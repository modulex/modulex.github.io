{
    "project": {
        "name": "API Documentation — KISSY v5.0 Documentation",
        "description": "The KISSY API : KISSY is a powerfull javascript framework for building cross end web application such as desktop, mobile and pad.",
        "version": "1.0.0",
        "url": "docs.kissyui.com"
    },
    "files": {
        "src/api/combobox/multi-word.js": {
            "name": "src/api/combobox/multi-word.js",
            "modules": {
                "combobox/multi-word": 1
            },
            "classes": {
                "ComboBoxMultiWord": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/component/extension/align.js": {
            "name": "src/api/component/extension/align.js",
            "modules": {
                "component/extension/align": 1
            },
            "classes": {
                "Component.Extension.Align": 1
            },
            "fors": {},
            "namespaces": {
                "Component.Extension": 1
            }
        },
        "src/api/component/extension/content-box.js": {
            "name": "src/api/component/extension/content-box.js",
            "modules": {
                "component/extension/content-box": 1
            },
            "classes": {
                "Component.Extension.ContentBox": 1
            },
            "fors": {},
            "namespaces": {
                "Component.Extension": 1
            }
        },
        "src/api/component/extension/delegate-children.js": {
            "name": "src/api/component/extension/delegate-children.js",
            "modules": {
                "component/extension/delegate-children": 1
            },
            "classes": {
                "Component.Extension.DelegateChildren": 1
            },
            "fors": {},
            "namespaces": {
                "Component.Extension": 1
            }
        },
        "src/api/component/extension/shim.js": {
            "name": "src/api/component/extension/shim.js",
            "modules": {
                "component/extension/shim": 1
            },
            "classes": {
                "Component.Extension.Shim": 1
            },
            "fors": {},
            "namespaces": {
                "Component.Extension": 1
            }
        },
        "src/api/component/plugin/drag.js": {
            "name": "src/api/component/plugin/drag.js",
            "modules": {
                "component/plugin/drag": 1
            },
            "classes": {
                "Component.Plugin.Drag": 1
            },
            "fors": {},
            "namespaces": {
                "Component.Plugin": 1
            }
        },
        "src/api/component/plugin/resize.js": {
            "name": "src/api/component/plugin/resize.js",
            "modules": {
                "component/plugin/resize": 1
            },
            "classes": {
                "Component.Plugin.Resize": 1
            },
            "fors": {},
            "namespaces": {
                "Component.Plugin": 1
            }
        },
        "src/api/component/container.js": {
            "name": "src/api/component/container.js",
            "modules": {
                "component/container": 1
            },
            "classes": {
                "Component.Container": 1
            },
            "fors": {},
            "namespaces": {
                "Component": 1
            }
        },
        "src/api/component/control.js": {
            "name": "src/api/component/control.js",
            "modules": {
                "component/control": 1
            },
            "classes": {
                "Component.Control": 1
            },
            "fors": {},
            "namespaces": {
                "Component": 1
            }
        },
        "src/api/dd/plugin/constrain.js": {
            "name": "src/api/dd/plugin/constrain.js",
            "modules": {
                "dd/plugin/constrain": 1
            },
            "classes": {
                "DD.Plugin.Constrain": 1
            },
            "fors": {},
            "namespaces": {
                "DD.Plugin": 1
            }
        },
        "src/api/dd/plugin/proxy.js": {
            "name": "src/api/dd/plugin/proxy.js",
            "modules": {
                "dd/plugin/proxy": 1
            },
            "classes": {
                "DD.Plugin.Proxy": 1
            },
            "fors": {},
            "namespaces": {
                "DD.Plugin": 1
            }
        },
        "src/api/dd/plugin/scroll.js": {
            "name": "src/api/dd/plugin/scroll.js",
            "modules": {
                "dd/plugin/scroll": 1
            },
            "classes": {
                "DD.Plugin.Scroll": 1
            },
            "fors": {},
            "namespaces": {
                "DD.Plugin": 1
            }
        },
        "src/api/event-dom/gesture/basic.js": {
            "name": "src/api/event-dom/gesture/basic.js",
            "modules": {
                "event-dom/gesture/basic": 1
            },
            "classes": {
                "GestureBasic": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/event-dom/gesture/edge-pan.js": {
            "name": "src/api/event-dom/gesture/edge-pan.js",
            "modules": {
                "event-dom/gesture/edge-pan": 1
            },
            "classes": {
                "GestureEdgePan": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/event-dom/gesture/pan.js": {
            "name": "src/api/event-dom/gesture/pan.js",
            "modules": {
                "event-dom/gesture/pan": 1
            },
            "classes": {
                "GesturePan": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/event-dom/gesture/pinch.js": {
            "name": "src/api/event-dom/gesture/pinch.js",
            "modules": {
                "event-dom/gesture/pinch": 1
            },
            "classes": {
                "GesturePinch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/event-dom/gesture/rotate.js": {
            "name": "src/api/event-dom/gesture/rotate.js",
            "modules": {
                "event-dom/gesture/rotate": 1
            },
            "classes": {
                "GestureRotate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/event-dom/gesture/shake.js": {
            "name": "src/api/event-dom/gesture/shake.js",
            "modules": {
                "event-dom/gesture/shake": 1
            },
            "classes": {
                "GestureShake": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/event-dom/gesture/swipe.js": {
            "name": "src/api/event-dom/gesture/swipe.js",
            "modules": {
                "event-dom/gesture/swipe": 1
            },
            "classes": {
                "GestureSwipe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/event-dom/gesture/tap.js": {
            "name": "src/api/event-dom/gesture/tap.js",
            "modules": {
                "event-dom/gesture/tap": 1
            },
            "classes": {
                "GestureTap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/navigation-view/bar.js": {
            "name": "src/api/navigation-view/bar.js",
            "modules": {
                "navigation-view/bar": 1
            },
            "classes": {
                "NavigationViewBar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/resizable/plugin/proxy.js": {
            "name": "src/api/resizable/plugin/proxy.js",
            "modules": {
                "resizable/plugin/proxy": 1
            },
            "classes": {
                "Resizable.Plugin.Proxy": 1
            },
            "fors": {},
            "namespaces": {
                "Resizable.Plugin": 1
            }
        },
        "src/api/scroll-view/plugin/pull-to-refresh.js": {
            "name": "src/api/scroll-view/plugin/pull-to-refresh.js",
            "modules": {
                "scroll-view/plugin/pull-to-refresh": 1
            },
            "classes": {
                "ScrollView.Plugin.PullToRefresh": 1
            },
            "fors": {},
            "namespaces": {
                "ScrollView.Plugin": 1
            }
        },
        "src/api/scroll-view/plugin/scrollbar.js": {
            "name": "src/api/scroll-view/plugin/scrollbar.js",
            "modules": {
                "scroll-view/plugin/scrollbar": 1
            },
            "classes": {
                "ScrollView.Plugin.ScrollBar": 1
            },
            "fors": {},
            "namespaces": {
                "ScrollView.Plugin": 1
            }
        },
        "src/api/scroll-view/base.js": {
            "name": "src/api/scroll-view/base.js",
            "modules": {
                "scroll-view": 1
            },
            "classes": {
                "ScrollView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/anim.js": {
            "name": "src/api/anim.js",
            "modules": {
                "anim": 1
            },
            "classes": {
                "Anim": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/attribute.js": {
            "name": "src/api/attribute.js",
            "modules": {
                "attribute": 1
            },
            "classes": {
                "Attribute": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/base.js": {
            "name": "src/api/base.js",
            "modules": {
                "base": 1
            },
            "classes": {
                "Base": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/button.js": {
            "name": "src/api/button.js",
            "modules": {
                "button": 1
            },
            "classes": {
                "Button": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/color.js": {
            "name": "src/api/color.js",
            "modules": {
                "color": 1
            },
            "classes": {
                "Color": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/combobox.js": {
            "name": "src/api/combobox.js",
            "modules": {
                "combobox": 1
            },
            "classes": {
                "ComboBox": 1,
                "ComboBox.LocalDataSource": 1,
                "ComboBox.RemoteDataSource": 1
            },
            "fors": {},
            "namespaces": {
                "ComboBox": 1
            }
        },
        "src/api/cookie.js": {
            "name": "src/api/cookie.js",
            "modules": {
                "cookie": 1
            },
            "classes": {
                "Cookie": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/date-picker.js": {
            "name": "src/api/date-picker.js",
            "modules": {
                "date-picker": 1
            },
            "classes": {
                "DatePicker": 1,
                "DatePicker.Popup": 1
            },
            "fors": {},
            "namespaces": {
                "DatePicker": 1
            }
        },
        "src/api/dd.js": {
            "name": "src/api/dd.js",
            "modules": {
                "dd": 1
            },
            "classes": {
                "DD.Draggable": 1,
                "DD.Droppable": 1,
                "DD.DDM": 1,
                "DD.DraggableDelegate": 1,
                "DD.DroppableDelegate": 1
            },
            "fors": {},
            "namespaces": {
                "DD": 1
            }
        },
        "src/api/dom.js": {
            "name": "src/api/dom.js",
            "modules": {
                "dom": 1
            },
            "classes": {
                "Dom": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/editor.js": {
            "name": "src/api/editor.js",
            "modules": {
                "editor": 1
            },
            "classes": {
                "Editor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/event-custom.js": {
            "name": "src/api/event-custom.js",
            "modules": {
                "event-custom": 1
            },
            "classes": {
                "CustomEvent.Target": 1
            },
            "fors": {},
            "namespaces": {
                "CustomEvent": 1
            }
        },
        "src/api/event-dom.js": {
            "name": "src/api/event-dom.js",
            "modules": {
                "event-dom": 1
            },
            "classes": {
                "DomEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/feature.js": {
            "name": "src/api/feature.js",
            "modules": {
                "feature": 1
            },
            "classes": {
                "Feature": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/filter-menu.js": {
            "name": "src/api/filter-menu.js",
            "modules": {
                "filter-menu": 1
            },
            "classes": {
                "FilterMenu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/gregorian-calendar-format.js": {
            "name": "src/api/gregorian-calendar-format.js",
            "modules": {
                "gregorian-calendar-format": 1
            },
            "classes": {
                "GregorianCalendarFormat": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/gregorian-calendar.js": {
            "name": "src/api/gregorian-calendar.js",
            "modules": {
                "gregorian-calendar": 1
            },
            "classes": {
                "GregorianCalendar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/io.js": {
            "name": "src/api/io.js",
            "modules": {
                "io": 1
            },
            "classes": {
                "IO": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/json.js": {
            "name": "src/api/json.js",
            "modules": {
                "json": 1
            },
            "classes": {
                "Json": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/logger-manager.js": {
            "name": "src/api/logger-manager.js",
            "modules": {
                "logger-manager": 1
            },
            "classes": {
                "LoggerManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/menu.js": {
            "name": "src/api/menu.js",
            "modules": {
                "menu": 1
            },
            "classes": {
                "Menu": 1,
                "Menu.Item": 1,
                "Menu.SubMenu": 1,
                "Menu.PopupMenu": 1,
                "Menu.CheckItem": 1,
                "Menu.RadioItem": 1
            },
            "fors": {},
            "namespaces": {
                "Menu": 1
            }
        },
        "src/api/menubutton.js": {
            "name": "src/api/menubutton.js",
            "modules": {
                "menubutton": 1
            },
            "classes": {
                "MenuButton": 1,
                "MenuButton.Select": 1,
                "MenuButton.Option": 1
            },
            "fors": {},
            "namespaces": {
                "MenuButton": 1
            }
        },
        "src/api/modulex.js": {
            "name": "src/api/modulex.js",
            "modules": {
                "modulex": 1
            },
            "classes": {
                "Modulex": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/navigation-view.js": {
            "name": "src/api/navigation-view.js",
            "modules": {
                "navigation-view": 1
            },
            "classes": {
                "NavigationView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/node.js": {
            "name": "src/api/node.js",
            "modules": {
                "node": 1
            },
            "classes": {
                "Node": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/overlay.js": {
            "name": "src/api/overlay.js",
            "modules": {
                "overlay": 1
            },
            "classes": {
                "Overlay": 1,
                "Overlay.Dialog": 1,
                "Overlay.Popup": 1
            },
            "fors": {},
            "namespaces": {
                "Overlay": 1
            }
        },
        "src/api/path.js": {
            "name": "src/api/path.js",
            "modules": {
                "path": 1
            },
            "classes": {
                "Path": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/promise.js": {
            "name": "src/api/promise.js",
            "modules": {
                "promise": 1
            },
            "classes": {
                "Promise": 1,
                "Promise.Defer": 1
            },
            "fors": {},
            "namespaces": {
                "Promise": 1
            }
        },
        "src/api/querystring.js": {
            "name": "src/api/querystring.js",
            "modules": {
                "querystring": 1
            },
            "classes": {
                "Querystring": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/resizable.js": {
            "name": "src/api/resizable.js",
            "modules": {
                "resizable": 1
            },
            "classes": {
                "Resizable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/router.js": {
            "name": "src/api/router.js",
            "modules": {
                "router": 1
            },
            "classes": {
                "Router": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/split-button.js": {
            "name": "src/api/split-button.js",
            "modules": {
                "split-button": 1
            },
            "classes": {
                "SplitButton": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/stylesheet.js": {
            "name": "src/api/stylesheet.js",
            "modules": {
                "stylesheet": 1
            },
            "classes": {
                "StyleSheet": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/swf.js": {
            "name": "src/api/swf.js",
            "modules": {
                "swf": 1
            },
            "classes": {
                "SWF": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/tabs.js": {
            "name": "src/api/tabs.js",
            "modules": {
                "tabs": 1
            },
            "classes": {
                "Tabs": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/toolbar.js": {
            "name": "src/api/toolbar.js",
            "modules": {
                "toolbar": 1
            },
            "classes": {
                "Toolbar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/tree.js": {
            "name": "src/api/tree.js",
            "modules": {
                "tree": 1
            },
            "classes": {
                "Tree": 1,
                "Tree.Node": 1,
                "Tree.CheckNode": 1,
                "Tree.CheckTree": 1,
                "Tree.Manager": 1
            },
            "fors": {},
            "namespaces": {
                "Tree": 1
            }
        },
        "src/api/ua.js": {
            "name": "src/api/ua.js",
            "modules": {
                "ua": 1
            },
            "classes": {
                "UA": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/url.js": {
            "name": "src/api/url.js",
            "modules": {
                "url": 1
            },
            "classes": {
                "Url": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/api/util.js": {
            "name": "src/api/util.js",
            "modules": {
                "util": 1
            },
            "classes": {
                "Util": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "combobox/multi-word": {
            "name": "combobox/multi-word",
            "submodules": {},
            "classes": {
                "ComboBoxMultiWord": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/combobox/multi-word.js",
            "line": 5
        },
        "component/extension/align": {
            "name": "component/extension/align",
            "submodules": {},
            "classes": {
                "Component.Extension.Align": 1
            },
            "fors": {},
            "namespaces": {
                "Component.Extension": 1
            },
            "tag": "module",
            "file": "src/api/component/extension/align.js",
            "line": 7
        },
        "component/extension/content-box": {
            "name": "component/extension/content-box",
            "submodules": {},
            "classes": {
                "Component.Extension.ContentBox": 1
            },
            "fors": {},
            "namespaces": {
                "Component.Extension": 1
            },
            "tag": "module",
            "file": "src/api/component/extension/content-box.js",
            "line": 5
        },
        "component/extension/delegate-children": {
            "name": "component/extension/delegate-children",
            "submodules": {},
            "classes": {
                "Component.Extension.DelegateChildren": 1
            },
            "fors": {},
            "namespaces": {
                "Component.Extension": 1
            },
            "tag": "module",
            "file": "src/api/component/extension/delegate-children.js",
            "line": 5
        },
        "component/extension/shim": {
            "name": "component/extension/shim",
            "submodules": {},
            "classes": {
                "Component.Extension.Shim": 1
            },
            "fors": {},
            "namespaces": {
                "Component.Extension": 1
            },
            "tag": "module",
            "file": "src/api/component/extension/shim.js",
            "line": 5
        },
        "component/plugin/drag": {
            "name": "component/plugin/drag",
            "submodules": {},
            "classes": {
                "Component.Plugin.Drag": 1
            },
            "fors": {},
            "namespaces": {
                "Component.Plugin": 1
            },
            "tag": "module",
            "file": "src/api/component/plugin/drag.js",
            "line": 6,
            "description": "组件拖拽插件"
        },
        "component/plugin/resize": {
            "name": "component/plugin/resize",
            "submodules": {},
            "classes": {
                "Component.Plugin.Resize": 1
            },
            "fors": {},
            "namespaces": {
                "Component.Plugin": 1
            },
            "tag": "module",
            "file": "src/api/component/plugin/resize.js",
            "line": 6,
            "description": "调整大小插件"
        },
        "component/container": {
            "name": "component/container",
            "submodules": {},
            "classes": {
                "Component.Container": 1
            },
            "fors": {},
            "namespaces": {
                "Component": 1
            },
            "tag": "module",
            "file": "src/api/component/container.js",
            "line": 6
        },
        "component/control": {
            "name": "component/control",
            "submodules": {},
            "classes": {
                "Component.Control": 1
            },
            "fors": {},
            "namespaces": {
                "Component": 1
            },
            "tag": "module",
            "file": "src/api/component/control.js",
            "line": 7,
            "description": "合并了原来的 box\n组件基类.仅用于 KISSY 内部组件继承，目前不建议外部使用，欢迎 review"
        },
        "dd/plugin/constrain": {
            "name": "dd/plugin/constrain",
            "submodules": {},
            "classes": {
                "DD.Plugin.Constrain": 1
            },
            "fors": {},
            "namespaces": {
                "DD.Plugin": 1
            },
            "tag": "module",
            "file": "src/api/dd/plugin/constrain.js",
            "line": 5
        },
        "dd/plugin/proxy": {
            "name": "dd/plugin/proxy",
            "submodules": {},
            "classes": {
                "DD.Plugin.Proxy": 1
            },
            "fors": {},
            "namespaces": {
                "DD.Plugin": 1
            },
            "tag": "module",
            "file": "src/api/dd/plugin/proxy.js",
            "line": 5
        },
        "dd/plugin/scroll": {
            "name": "dd/plugin/scroll",
            "submodules": {},
            "classes": {
                "DD.Plugin.Scroll": 1
            },
            "fors": {},
            "namespaces": {
                "DD.Plugin": 1
            },
            "tag": "module",
            "file": "src/api/dd/plugin/scroll.js",
            "line": 5
        },
        "event-dom/gesture/basic": {
            "name": "event-dom/gesture/basic",
            "submodules": {},
            "classes": {
                "GestureBasic": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/event-dom/gesture/basic.js",
            "line": 6,
            "description": "基本手势事件"
        },
        "event-dom/gesture/edge-pan": {
            "name": "event-dom/gesture/edge-pan",
            "submodules": {},
            "classes": {
                "GestureEdgePan": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/event-dom/gesture/edge-pan.js",
            "line": 6,
            "description": "在窗口边缘区域往窗口中心区域拖进的拖动手势事件"
        },
        "event-dom/gesture/pan": {
            "name": "event-dom/gesture/pan",
            "submodules": {},
            "classes": {
                "GesturePan": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/event-dom/gesture/pan.js",
            "line": 6,
            "description": "拖动手势事件"
        },
        "event-dom/gesture/pinch": {
            "name": "event-dom/gesture/pinch",
            "submodules": {},
            "classes": {
                "GesturePinch": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/event-dom/gesture/pinch.js",
            "line": 6,
            "description": "pinch手势事件"
        },
        "event-dom/gesture/rotate": {
            "name": "event-dom/gesture/rotate",
            "submodules": {},
            "classes": {
                "GestureRotate": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/event-dom/gesture/rotate.js",
            "line": 6,
            "description": "旋转手势事件"
        },
        "event-dom/gesture/shake": {
            "name": "event-dom/gesture/shake",
            "submodules": {},
            "classes": {
                "GestureShake": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/event-dom/gesture/shake.js",
            "line": 6,
            "description": "摇动手势事件"
        },
        "event-dom/gesture/swipe": {
            "name": "event-dom/gesture/swipe",
            "submodules": {},
            "classes": {
                "GestureSwipe": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/event-dom/gesture/swipe.js",
            "line": 6,
            "description": "滑动手势事件"
        },
        "event-dom/gesture/tap": {
            "name": "event-dom/gesture/tap",
            "submodules": {},
            "classes": {
                "GestureTap": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/event-dom/gesture/tap.js",
            "line": 6,
            "description": "点击手势事件"
        },
        "navigation-view/bar": {
            "name": "navigation-view/bar",
            "submodules": {},
            "classes": {
                "NavigationViewBar": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/navigation-view/bar.js",
            "line": 6,
            "description": "视图工具栏模块"
        },
        "resizable/plugin/proxy": {
            "name": "resizable/plugin/proxy",
            "submodules": {},
            "classes": {
                "Resizable.Plugin.Proxy": 1
            },
            "fors": {},
            "namespaces": {
                "Resizable.Plugin": 1
            },
            "tag": "module",
            "file": "src/api/resizable/plugin/proxy.js",
            "line": 5
        },
        "scroll-view/plugin/pull-to-refresh": {
            "name": "scroll-view/plugin/pull-to-refresh",
            "submodules": {},
            "classes": {
                "ScrollView.Plugin.PullToRefresh": 1
            },
            "fors": {},
            "namespaces": {
                "ScrollView.Plugin": 1
            },
            "tag": "module",
            "file": "src/api/scroll-view/plugin/pull-to-refresh.js",
            "line": 6
        },
        "scroll-view/plugin/scrollbar": {
            "name": "scroll-view/plugin/scrollbar",
            "submodules": {},
            "classes": {
                "ScrollView.Plugin.ScrollBar": 1
            },
            "fors": {},
            "namespaces": {
                "ScrollView.Plugin": 1
            },
            "tag": "module",
            "file": "src/api/scroll-view/plugin/scrollbar.js",
            "line": 6,
            "description": "ScrollView的插件ScrollBar"
        },
        "scroll-view": {
            "name": "scroll-view",
            "submodules": {},
            "classes": {
                "ScrollView": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/scroll-view/base.js",
            "line": 8
        },
        "anim": {
            "name": "anim",
            "submodules": {},
            "classes": {
                "Anim": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/anim.js",
            "line": 6,
            "description": "提供动画支持"
        },
        "attribute": {
            "name": "attribute",
            "submodules": {},
            "classes": {
                "Attribute": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/attribute.js",
            "line": 6
        },
        "base": {
            "name": "base",
            "submodules": {},
            "classes": {
                "Base": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/base.js",
            "line": 7,
            "description": "KISSY 的base模块提供给我们一个基类Base, 整合了 attribute 功能, 让继承 Base 的子类自动具有 attribute 的功能.如果你想让自定义类默认就支持 attribute 功能, 请直接继承 Base"
        },
        "button": {
            "name": "button",
            "submodules": {},
            "classes": {
                "Button": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/button.js",
            "line": 5
        },
        "color": {
            "name": "color",
            "submodules": {},
            "classes": {
                "Color": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/color.js",
            "line": 6,
            "description": "颜色封装"
        },
        "combobox": {
            "name": "combobox",
            "submodules": {},
            "classes": {
                "ComboBox": 1,
                "ComboBox.LocalDataSource": 1,
                "ComboBox.RemoteDataSource": 1
            },
            "fors": {},
            "namespaces": {
                "ComboBox": 1
            },
            "tag": "module",
            "file": "src/api/combobox.js",
            "line": 229
        },
        "cookie": {
            "name": "cookie",
            "submodules": {},
            "classes": {
                "Cookie": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/cookie.js",
            "line": 6,
            "description": "提供类Cookie"
        },
        "date-picker": {
            "name": "date-picker",
            "submodules": {},
            "classes": {
                "DatePicker": 1,
                "DatePicker.Popup": 1
            },
            "fors": {},
            "namespaces": {
                "DatePicker": 1
            },
            "tag": "module",
            "file": "src/api/date-picker.js",
            "line": 85,
            "description": "嵌入式日历控件，支持基本的日期选择、时间选择、范围选择、日期格式化输出等常用功能"
        },
        "dd": {
            "name": "dd",
            "submodules": {},
            "classes": {
                "DD.Draggable": 1,
                "DD.Droppable": 1,
                "DD.DDM": 1,
                "DD.DraggableDelegate": 1,
                "DD.DroppableDelegate": 1
            },
            "fors": {},
            "namespaces": {
                "DD": 1
            },
            "tag": "module",
            "file": "src/api/dd.js",
            "line": 395,
            "description": "拖放功能\n\n#Note \n支持 win8 的触摸事件"
        },
        "dom": {
            "name": "dom",
            "submodules": {},
            "classes": {
                "Dom": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/dom.js",
            "line": 6,
            "description": "提供类DOM"
        },
        "editor": {
            "name": "editor",
            "submodules": {},
            "classes": {
                "Editor": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/editor.js",
            "line": 5
        },
        "event-custom": {
            "name": "event-custom",
            "submodules": {},
            "classes": {
                "CustomEvent.Target": 1
            },
            "fors": {},
            "namespaces": {
                "CustomEvent": 1
            },
            "tag": "module",
            "file": "src/api/event-custom.js",
            "line": 7,
            "description": "自定义事件模块"
        },
        "event-dom": {
            "name": "event-dom",
            "submodules": {},
            "classes": {
                "DomEvent": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/event-dom.js",
            "line": 6,
            "description": "根据设备环境加载响应的子模块来处理 DOM 的事件模块"
        },
        "feature": {
            "name": "feature",
            "submodules": {},
            "classes": {
                "Feature": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/feature.js",
            "line": 6,
            "description": "features模块提供了Features来进行硬件环境关键特性检测，直接通过KISSY全局对象调用"
        },
        "filter-menu": {
            "name": "filter-menu",
            "submodules": {},
            "classes": {
                "FilterMenu": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/filter-menu.js",
            "line": 5
        },
        "gregorian-calendar-format": {
            "name": "gregorian-calendar-format",
            "submodules": {},
            "classes": {
                "GregorianCalendarFormat": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/gregorian-calendar-format.js",
            "line": 5
        },
        "gregorian-calendar": {
            "name": "gregorian-calendar",
            "submodules": {},
            "classes": {
                "GregorianCalendar": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/gregorian-calendar.js",
            "line": 6,
            "description": "公历模块,提供了时间转换，范围计算等功能。"
        },
        "io": {
            "name": "io",
            "submodules": {},
            "classes": {
                "IO": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/io.js",
            "line": 6,
            "description": "提供类IO"
        },
        "json": {
            "name": "json",
            "submodules": {},
            "classes": {
                "Json": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/json.js",
            "line": 5
        },
        "logger-manager": {
            "name": "logger-manager",
            "submodules": {},
            "classes": {
                "LoggerManager": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/logger-manager.js",
            "line": 5
        },
        "menu": {
            "name": "menu",
            "submodules": {},
            "classes": {
                "Menu": 1,
                "Menu.Item": 1,
                "Menu.SubMenu": 1,
                "Menu.PopupMenu": 1,
                "Menu.CheckItem": 1,
                "Menu.RadioItem": 1
            },
            "fors": {},
            "namespaces": {
                "Menu": 1
            },
            "tag": "module",
            "file": "src/api/menu.js",
            "line": 328
        },
        "menubutton": {
            "name": "menubutton",
            "submodules": {},
            "classes": {
                "MenuButton": 1,
                "MenuButton.Select": 1,
                "MenuButton.Option": 1
            },
            "fors": {},
            "namespaces": {
                "MenuButton": 1
            },
            "tag": "module",
            "file": "src/api/menubutton.js",
            "line": 192
        },
        "modulex": {
            "name": "modulex",
            "submodules": {},
            "classes": {
                "Modulex": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/modulex.js",
            "line": 6,
            "description": "modulex 是新一代的模块加载器，可独立使用。"
        },
        "navigation-view": {
            "name": "navigation-view",
            "submodules": {},
            "classes": {
                "NavigationView": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/navigation-view.js",
            "line": 5
        },
        "node": {
            "name": "node",
            "submodules": {},
            "classes": {
                "Node": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/node.js",
            "line": 6,
            "description": "node 包括 dom , event-dom , anim 模块的所有功能, 推荐采用 Node 模块"
        },
        "overlay": {
            "name": "overlay",
            "submodules": {},
            "classes": {
                "Overlay": 1,
                "Overlay.Dialog": 1,
                "Overlay.Popup": 1
            },
            "fors": {},
            "namespaces": {
                "Overlay": 1
            },
            "tag": "module",
            "file": "src/api/overlay.js",
            "line": 171
        },
        "path": {
            "name": "path",
            "submodules": {},
            "classes": {
                "Path": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/path.js",
            "line": 5
        },
        "promise": {
            "name": "promise",
            "submodules": {},
            "classes": {
                "Promise": 1,
                "Promise.Defer": 1
            },
            "fors": {},
            "namespaces": {
                "Promise": 1
            },
            "tag": "module",
            "file": "src/api/promise.js",
            "line": 111
        },
        "querystring": {
            "name": "querystring",
            "submodules": {},
            "classes": {
                "Querystring": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/querystring.js",
            "line": 6,
            "description": "提供JSON对象与querystring相互转换的方法"
        },
        "resizable": {
            "name": "resizable",
            "submodules": {},
            "classes": {
                "Resizable": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/resizable.js",
            "line": 5
        },
        "router": {
            "name": "router",
            "submodules": {},
            "classes": {
                "Router": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/router.js",
            "line": 6,
            "description": "一个类似express的路由模块"
        },
        "split-button": {
            "name": "split-button",
            "submodules": {},
            "classes": {
                "SplitButton": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/split-button.js",
            "line": 5
        },
        "stylesheet": {
            "name": "stylesheet",
            "submodules": {},
            "classes": {
                "StyleSheet": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/stylesheet.js",
            "line": 5
        },
        "swf": {
            "name": "swf",
            "submodules": {},
            "classes": {
                "SWF": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/swf.js",
            "line": 5
        },
        "tabs": {
            "name": "tabs",
            "submodules": {},
            "classes": {
                "Tabs": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/tabs.js",
            "line": 5
        },
        "toolbar": {
            "name": "toolbar",
            "submodules": {},
            "classes": {
                "Toolbar": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/toolbar.js",
            "line": 6,
            "description": "Toolbar菜单栏组件"
        },
        "tree": {
            "name": "tree",
            "submodules": {},
            "classes": {
                "Tree": 1,
                "Tree.Node": 1,
                "Tree.CheckNode": 1,
                "Tree.CheckTree": 1,
                "Tree.Manager": 1
            },
            "fors": {},
            "namespaces": {
                "Tree": 1
            },
            "tag": "module",
            "file": "src/api/tree.js",
            "line": 335
        },
        "ua": {
            "name": "ua",
            "submodules": {},
            "classes": {
                "UA": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/ua.js",
            "line": 11,
            "description": "UA模块可以获取浏览器等用户代理的信息。",
            "example": [
                "\n\t\n\trequire(['ua'], function(UA){\n\t\t//use UA\n\t})"
            ]
        },
        "url": {
            "name": "url",
            "submodules": {},
            "classes": {
                "Url": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/url.js",
            "line": 6,
            "description": "操作url"
        },
        "util": {
            "name": "util",
            "submodules": {},
            "classes": {
                "Util": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/api/util.js",
            "line": 6,
            "description": "util模块，包含类Util"
        }
    },
    "classes": {
        "ComboBoxMultiWord": {
            "name": "ComboBoxMultiWord",
            "shortname": "ComboBoxMultiWord",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "combobox/multi-word",
            "namespace": "",
            "file": "src/api/combobox/multi-word.js",
            "line": 5,
            "description": "自动补全组件。拓展自 ComboBox ，它可输入多个值。",
            "is_constructor": 1,
            "extends": "ComboBox",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\trequire(['combobox', 'combobox/multiword'], function(ComboBox, ComboBoxMultiWord){\n\t\tvar myComboBoxMultiWord = new ComboBoxMultiWord({\n\t        render : '#container',\n\t        dataSource : new ComboBox.LocalDataSource({\n\t            data : ['a1234', 'b2345', 'c3456', 'd4567']\n\t        }),\n\t        maxItemCount : 4,\n\t        format : function(query, data){  //自定义下拉菜单属性\n\t            var ret = [];\n\t            for(var i = 0; i < data.length; i++){\n\t                ret[i] = {\n\t                    content:(data[i] + \"\")\n\t                        .replace(query, '<strong>' + query + '</strong>'),\n\t                    disabled:(i % 2 ? true : false)\n\t                }\n\t            }\n\t            return ret;\n\t        }\n\t    })\n\t})"
            ]
        },
        "Component.Extension.Align": {
            "name": "Component.Extension.Align",
            "shortname": "Component.Extension.Align",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Menu.PopupMenu",
                "Overlay"
            ],
            "module": "component/extension/align",
            "namespace": "Component.Extension",
            "file": "src/api/component/extension/align.js",
            "line": 7,
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Component.Extension.ContentBox": {
            "name": "Component.Extension.ContentBox",
            "shortname": "Component.Extension.ContentBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Menu.PopupMenu",
                "NavigationView"
            ],
            "module": "component/extension/content-box",
            "namespace": "Component.Extension",
            "file": "src/api/component/extension/content-box.js",
            "line": 5,
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Component.Extension.DelegateChildren": {
            "name": "Component.Extension.DelegateChildren",
            "shortname": "Component.Extension.DelegateChildren",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "component/extension/delegate-children",
            "namespace": "Component.Extension",
            "file": "src/api/component/extension/delegate-children.js",
            "line": 5,
            "description": "为组件的子组件代理事件，用来 mixin"
        },
        "Component.Extension.Shim": {
            "name": "Component.Extension.Shim",
            "shortname": "Component.Extension.Shim",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Menu.PopupMenu",
                "Overlay"
            ],
            "module": "component/extension/shim",
            "namespace": "Component.Extension",
            "file": "src/api/component/extension/shim.js",
            "line": 5,
            "description": "垫片。组件扩充类，仅用于 KISSY 内部组件继承，目前不建议外部使用，欢迎 review\n用于修复 IE6 下select等Form控件间遮罩住弹出层，或者在某些高级浏览器上select遮住flash等情况。",
            "is_constructor": 1
        },
        "Component.Plugin.Drag": {
            "name": "Component.Plugin.Drag",
            "shortname": "Component.Plugin.Drag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "component/plugin/drag",
            "namespace": "Component.Plugin",
            "file": "src/api/component/plugin/drag.js",
            "line": 6,
            "is_constructor": 1,
            "extends": "DD.Draggable",
            "example": [
                "\n```\nrequire(['overlay','component/plugin/drag'],function(Overlay,Drag){\n    new Overlay({\n        plugins:[ new Drag({\n            handlers: ['.ks-overlay-header']\n        }) ]\n    });\n});\n```"
            ]
        },
        "Component.Plugin.Resize": {
            "name": "Component.Plugin.Resize",
            "shortname": "Component.Plugin.Resize",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "component/plugin/resize",
            "namespace": "Component.Plugin",
            "file": "src/api/component/plugin/resize.js",
            "line": 6,
            "description": "组件伸缩插件。钩子handlers的样式根据需要自行编写，例如下面例子的样式。",
            "is_constructor": 1,
            "extends": "Resizable",
            "example": [
                "\n\n\t//component/plugin/resize 插件需要应用的样式\n\t.ks-overlay .ks-resizable-handler {\n\t    overflow: hidden;\n\t    font-size: 0;\n\t    line-height: 0;\n\t    position: absolute;\n\t}\n\n\t.ks-overlay .ks-resizable-handler-b {\n\t    height: 6px;\n\t    width: 100%; \n\t    bottom: 0;\n\t    left: 0;\n\t    cursor: n-resize;\n\t}\n\n\t.ks-overlay .ks-resizable-handler-t {\n\t    height: 6px;\n\t    width: 100%;\n\t    top: 0;\n\t    left: 0;\n\t    cursor: n-resize;\n\t}\n\n\t.ks-overlay .ks-resizable-handler-l {\n\t    height: 100%;\n\t    -height: expression(this.parentNode.offsetHeight);\n\t    width: 6px; \n\t    top: 0;\n\t    left: 0;\n\t    cursor: e-resize;\n\t}\n\n\t.ks-overlay .ks-resizable-handler-r {\n\t    height: 100%;\n\t    -height: expression(this.parentNode.offsetHeight); \n\t    width: 6px;\n\t    position: absolute;\n\t    top: 0;\n\t    right: 0;\n\t    cursor: e-resize;\n\t}\n\n\t.ks-overlay .ks-resizable-handler-bl {\n\t    height: 6px;\n\t    width: 6px; \n\t    z-index: 1;\n\t    bottom: 0;\n\t    left: 0;\n\t    cursor: sw-resize;\n\t}\n\n\t.ks-overlay .ks-resizable-handler-br {\n\t    height: 6px;\n\t    width: 6px;\n\t    z-index: 1; \n\t    bottom: 0;\n\t    right: 0;\n\t    cursor: se-resize;\n\t}\n\n\t.ks-overlay .ks-resizable-handler-tl {\n\t    height: 6px;\n\t    width: 6px;\n\t    z-index: 1; \n\t    top: 0;\n\t    left: 0;\n\t    cursor: nw-resize;\n\t}\n\n\t.ks-overlay .ks-resizable-handler-tr {\n\t    height: 6px;\n\t    width: 6px;\n\t    z-index: 1; \n\t    top: 0;\n\t    right: 0;\n\t    cursor: ne-resize;\n\t}\n\n\n\trequire(['overlay','component/plugin/resize'],function(Overlay,Resize){\n\t    new Overlay({\n\t        plugins:[\n\t            new Resize({\n\t                minWidth:100,\n\t                maxWidth:200,\n\t                handlers:['l','r']\n\t            })\n\t        ]\n\t    });\n\t});"
            ]
        },
        "Component.Container": {
            "name": "Component.Container",
            "shortname": "Component.Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "component/container",
            "namespace": "Component",
            "file": "src/api/component/container.js",
            "line": 6,
            "extends": "Component.Control",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Component.Control": {
            "name": "Component.Control",
            "shortname": "Component.Control",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "component/control",
            "namespace": "Component",
            "file": "src/api/component/control.js",
            "line": 7,
            "is_constructor": 1,
            "extends": "Base",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "DD.Plugin.Constrain": {
            "name": "DD.Plugin.Constrain",
            "shortname": "DD.Plugin.Constrain",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dd/plugin/constrain",
            "namespace": "DD.Plugin",
            "file": "src/api/dd/plugin/constrain.js",
            "line": 5,
            "is_constructor": 1,
            "extends": "Base",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n```\nrequire(['dd','dd/plugin/constrain'],function(DD,Constrain){\n   new DD.Draggable({\n       node:'#drag',\n       plugins:[ new Constrain({\n           constrain:window // 限制拖动区域为视窗区域\n       }) ]\n   });\n});\n\nrequire('dd', 'dd/plugin/constrain',function(DD,Constrain){\n    var constrain = new Constrain({\n      constrain : '#container' //限制拖动区域为 container 元素\n    });\n    new DD.Draggable({\n        node:'#drag',\n        plugins:[ constrain ]  \n    });\n\n    constrain.set(\"constrain\", \"window\");  //改变限制拖动区域\n });\n ```"
            ]
        },
        "DD.Plugin.Proxy": {
            "name": "DD.Plugin.Proxy",
            "shortname": "DD.Plugin.Proxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dd/plugin/proxy",
            "namespace": "DD.Plugin",
            "file": "src/api/dd/plugin/proxy.js",
            "line": 5,
            "description": "Draggable 插件,可代理拖放对象",
            "is_constructor": 1,
            "extends": "Base",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\trequire(['dd', 'dd/plugin/proxy'],function(DD, Proxy){\n        var drag=new DD.Draggable({\n            node:'#test-drag',\n            cursor:'move',\n            move:true\n        });\n\n        //使用proxy插件来跟踪鼠标移动\n        drag.plug(Proxy);\n    });"
            ]
        },
        "DD.Plugin.Scroll": {
            "name": "DD.Plugin.Scroll",
            "shortname": "DD.Plugin.Scroll",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dd/plugin/scroll",
            "namespace": "DD.Plugin",
            "file": "src/api/dd/plugin/scroll.js",
            "line": 5,
            "is_constructor": 1,
            "extends": "Base",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "GestureBasic": {
            "name": "GestureBasic",
            "shortname": "GestureBasic",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event-dom/gesture/basic",
            "namespace": "",
            "file": "src/api/event-dom/gesture/basic.js",
            "line": 6,
            "description": "基本手势事件。引入模块则可以使用相应事件\n\n使用示例：\n\n\trequire(['node', 'event-dom/gesture/basic'], function($, GestureBasic){\n\t\t$(window).on(GestureBasic.START, function(ev){\n\t\t\t//touch start...\n\t\t});\n\t\t$(window).on(GestureBasic.MOVE, function(ev){\n\t\t\t//touch move...\n\t\t});\n\t\t$(window).on(GestureBasic.END, function(ev){\n\t\t\t//touch end...\n\t\t});\n\t});",
            "static": 1
        },
        "GestureEdgePan": {
            "name": "GestureEdgePan",
            "shortname": "GestureEdgePan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event-dom/gesture/edge-pan",
            "namespace": "",
            "file": "src/api/event-dom/gesture/edge-pan.js",
            "line": 6,
            "description": "在窗口边缘区域往窗口中心区域拖进的拖动手势事件。当将元素在窗口边缘区域往窗口中心区域拖进时触发，默认边缘区域为窗口上下左右四个方向顶端往窗口中心靠近的 '60px' 的区域。例如，窗口宽度为320，那么横坐标 0~60 和 260~320 这段区域就是边缘区域的一部分，当某元素在这个区域往窗口中心区域拖进时触发事件。\n引入模块则可以使用相应事件。\n\n使用示例：\n\n\trequire(['node', 'event-dom/gesture/edge-pan', 'dd'], function($, GestureEdgePan, DD){\n\t\tnew DD.Draggable({   //使得 #test 元素能被拖动\n\t\t\tnode : '#test',\n\t\t\tmove:true\n\t\t});\n\n\t\t$('#test').on(GestureEdgePan.EDGE_PAN_START, function(ev){ //在边缘区域往窗口中心区域开始拖进时触发\n\t\t\t//edge pan start...\n\t\t});\n\t\t$('#test').on(GestureEdgePan.EDGE_PAN, function(ev){  //在边缘区域往窗口中心区域拖进中时触发，如果已经超过边缘区域也会一直触发直到放开鼠标\n\t\t\t//edge paning...\n\t\t});\n\t\t$('#test').on(GestureEdgePan.EDGE_PAN_END, function(ev){  //在边缘区域往窗口中心区域拖进，放开鼠标时触发，如果已经超过边缘区域也会一直触发直到放开鼠标\n\t\t\t//edge pan end...\n\t\t});\n\t});",
            "static": 1
        },
        "GesturePan": {
            "name": "GesturePan",
            "shortname": "GesturePan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event-dom/gesture/pan",
            "namespace": "",
            "file": "src/api/event-dom/gesture/pan.js",
            "line": 6,
            "description": "拖动手势事件。引入模块则可以使用相应事件\n\n使用示例：\n\n\trequire(['node', 'event-dom/gesture/pan'], function($, GesturePan){\n\t\t$('#test').on(GesturePan.PAN_START, function(ev){\n\t\t\t//pan start...\n\t\t});\n\t\t$('#test').on(GesturePan.PAN, function(ev){\n\t\t\t//paning...\n\t\t});\n\t\t$('#test').on(GesturePan.PAN_END, function(ev){\n\t\t\t//pan end...\n\t\t});\n\t});",
            "static": 1
        },
        "GesturePinch": {
            "name": "GesturePinch",
            "shortname": "GesturePinch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event-dom/gesture/pinch",
            "namespace": "",
            "file": "src/api/event-dom/gesture/pinch.js",
            "line": 6,
            "description": "pinch手势事件，触屏上开始用双指调整某个 dom 元素大小时触发。引入模块则可以使用相应事件\n\n使用示例：\n\n\trequire(['node', 'event-dom/gesture/pinch'], function($, GesturePinch){\n\t\t$(#test).on(GesturePinch.PINCH_START, function(ev){\n\t\t\t//pinch start...\n\t\t});\n\t\t$(#test).on(GesturePinch.PINCH, function(ev){\n\t\t\t//pinching...\n\t\t});\n\t\t$(#test).on(GesturePinch.PINCH_END, function(ev){\n\t\t\t//pinch end...\n\t\t});\n\t});",
            "static": 1
        },
        "GestureRotate": {
            "name": "GestureRotate",
            "shortname": "GestureRotate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event-dom/gesture/rotate",
            "namespace": "",
            "file": "src/api/event-dom/gesture/rotate.js",
            "line": 6,
            "description": "旋转手势事件，触屏上开始用双指旋转某个 dom 元素大小时触发。引入模块则可以使用相应事件\n\n使用示例：\n\n\trequire(['node', 'event-dom/gesture/rotate'], function($, GestureRotate){\n\t\t$(#test).on(GestureRotate.ROTATE_START, function(ev){\n\t\t\t//rotate start...\n\t\t});\n\t\t$(#test).on(GestureRotate.ROTATE, function(ev){\n\t\t\t//rotating...\n\t\t});\n\t\t$(#test).on(GestureRotate.ROTATE_END, function(ev){\n\t\t\t//rotate end...\n\t\t});\n\t});",
            "static": 1
        },
        "GestureShake": {
            "name": "GestureShake",
            "shortname": "GestureShake",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event-dom/gesture/shake",
            "namespace": "",
            "file": "src/api/event-dom/gesture/shake.js",
            "line": 6,
            "description": "摇动手势事件。当用户摇动设备后触发，前后左右在一定连续时间内以一定幅度摇动设备。引入模块则可以使用相应事件\n\n使用示例：\n\n\trequire(['node', 'event-dom/gesture/shake'], function($, GestureShake){\n\t\t$(window).on(GestureShake.SHAKE, function(ev){\n\t\t\t//device is shaked...\n\t});",
            "static": 1
        },
        "GestureSwipe": {
            "name": "GestureSwipe",
            "shortname": "GestureSwipe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event-dom/gesture/swipe",
            "namespace": "",
            "file": "src/api/event-dom/gesture/swipe.js",
            "line": 6,
            "description": "滑动手势事件。当用户在屏幕上“有效”滑动时触发（足够短的时间内滑动足够的距离）。引入模块则可以使用相应事件\n\n使用示例：\n\n\trequire(['node', 'event-dom/gesture/swipe'], function($, GestureSwipe){\n\t\t$(window).on(GestureSwipe.SWIPE, function(ev){\n\t\t\t//swiped\n\t});",
            "static": 1
        },
        "GestureTap": {
            "name": "GestureTap",
            "shortname": "GestureTap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event-dom/gesture/tap",
            "namespace": "",
            "file": "src/api/event-dom/gesture/tap.js",
            "line": 6,
            "description": "点击手势事件\n使用示例：\n\n\trequire(['node', 'event-dom/gesture/tap'], function($, GestureTap){\n\t\t$('#test').on(GestureTap.TAP, function(ev){\n\t\t\t//taped...\n\t\t})\n\t})",
            "static": 1
        },
        "NavigationViewBar": {
            "name": "NavigationViewBar",
            "shortname": "NavigationViewBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "navigation-view/bar",
            "namespace": "",
            "file": "src/api/navigation-view/bar.js",
            "line": 6,
            "description": "视图工具栏。 xclass : navigation-bar",
            "is_constructor": 1,
            "extends": "Component.Control",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\trequire(['navigation-view', 'component/control'], function(NavigationView, Control){\n\t\tvar navigationView = new NavigationView({\n            loadingHtml: '<div class=\"ks-navigation-view-loading-outer\">' +\n                '<div class=\"ks-navigation-view-loading-inner\"></div>' +\n                '</div>',\n            render: 'body'\n        }).render();\n\n\t\tvar bar = new Bar({\n            navigationView: navigationView,\n            elBefore: navigationView.get('contentEl')\n        }).render();\n\n        var PageView = Control.extend({\n\t\t\tcreateDom : function(){\n\t\t\t\t//your code\n\t\t\t},\n\t\t\tbindUI : function(){\n\t\t\n\t\t\t},\n\t\t\tenter : function(){\n\t\n\t\t\t}\n\t\t\t//....more function\n        },{\n\t\t\txclass : 'page-view'\n        });\n\n        navigationView.push({\n\t\t\txclass : 'page-view',\n\t\t\ttitle : 'PageView Title'\n        });\n\t})"
            ]
        },
        "Resizable.Plugin.Proxy": {
            "name": "Resizable.Plugin.Proxy",
            "shortname": "Resizable.Plugin.Proxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "resizable/plugin/proxy",
            "namespace": "Resizable.Plugin",
            "file": "src/api/resizable/plugin/proxy.js",
            "line": 5,
            "description": "[Resizable](/5.0/api/classes/Resizable.html) 插件，可代理缩放对象用于展示缩放状态。proxy的样式需要自行编写，或参考下面这个里面的样式。",
            "is_constructor": 1,
            "extends": "Base",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t//css\n\t.ks-resizable-proxy {\n\t    border: 1px dashed #426FD9;\n\t    position: absolute;\n\t}\n\n\t//js\n\trequire(['node', 'resizable', 'resizable/plugin/proxy'], function($, Resizable, ResizableProxy) {\n\t    var r = new Resizable({\n\t        node:\"#something-can-resize\",\n\t        // 指定可拖动的位置\n\t        handlers:[\"b\",\"t\",\"r\",\"l\",\"tr\",\"tl\",\"br\",\"bl\"],\n\t        // 可选, 设置最小/最大 宽高\n\t        minHeight:100,\n\t        minWidth:100,\n\t        maxHeight:300,\n\t        maxWidth:400,\n            plugins : [\n                new ResizableProxy({\n                    destroyOnEnd:true,\n                    hideNodeOnResize:false\n                })\n            ]\n\t    });\n\t});"
            ]
        },
        "ScrollView.Plugin.PullToRefresh": {
            "name": "ScrollView.Plugin.PullToRefresh",
            "shortname": "ScrollView.Plugin.PullToRefresh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "scroll-view/plugin/pull-to-refresh",
            "namespace": "ScrollView.Plugin",
            "file": "src/api/scroll-view/plugin/pull-to-refresh.js",
            "line": 6,
            "description": "ScrollView的下拉刷新插件",
            "is_constructor": 1,
            "extends": "Base",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n```\nrequire(['node', 'scroll-view', 'scroll-view/plugin/scrollbar', 'scroll-view/plugin/pull-to-refresh'], function ($, ScrollView, ScrollbarPlugin, PullToRefresh) {\n    var str = '',\n        num = 1;\n    for (; num < 40; num++) {\n        str += '<p>line ' + num + '</p>'\n    }\n    $('#thelist').html(str);\n\n    var scrollView = new ScrollView({\n        srcNode: '#wrapper',\n        plugins: [ ScrollbarPlugin,\n            new PullToRefresh({\n                pullUpLoadFn: function (callback) {  //滚动到低端后继续上拉将进入这个函数\n                    setTimeout(function () {\n                        scrollView.get('contentEl')\n                                .append('<p>line ' + num++ + '</p>');\n                        scrollView.sync();\n                        callback();\n                    }, 500);\n                },\n                pullingUpHtml : '上拉刷新',\n                releasingUpHtml : '松手加载',\n                loadingUpHtml : '正在努力加载...',\n                pullDownLoadFn : function(callback){  //滚动到顶端后继续下拉将进入这个函数\n                    setTimeout(function () {\n                        scrollView.get('contentEl')\n                                .prepend('<p>line ' + num++ + '</p>');\n                        scrollView.sync();\n                        callback();\n                    }, 500);\n                }\n            })\n        ]\n    }).render();\n});\n```"
            ]
        },
        "ScrollView.Plugin.ScrollBar": {
            "name": "ScrollView.Plugin.ScrollBar",
            "shortname": "ScrollView.Plugin.ScrollBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "scroll-view/plugin/scrollbar",
            "namespace": "ScrollView.Plugin",
            "file": "src/api/scroll-view/plugin/scrollbar.js",
            "line": 6,
            "description": "ScrollView的滚动条插件,用来自定义滚动条",
            "is_constructor": 1,
            "extends": "Base",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n```\nrequire(['scroll-view','scroll-view/plugin/scrollbar'], function (ScrollView, ScrollbarPlugin) {\n    var scrollView = new ScrollView({\n        width: 320,\n        height: 219,\n        plugins: [new ScrollbarPlugin({\n            autoHideX: true,\n            autoHideY: false\n        })],\n        content: content\n    }).render();\n}\n```"
            ]
        },
        "ScrollView": {
            "name": "ScrollView",
            "shortname": "ScrollView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "scroll-view",
            "namespace": "",
            "file": "src/api/scroll-view/base.js",
            "line": 8,
            "is_constructor": 1,
            "extends": "Component.Container",
            "params": [
                {
                    "name": "config",
                    "description": "配置对象，详情参考其Attribute",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\trequire(['scroll-view'], function(ScrollView){\n        var content = '';\n        for (var i = 0; i < 10; i++) {\n            content += '<p>This is ' + i + ' block</p>';\n        }\n        var myScrollView = new ScrollView({\n            width : 318,\n            height : 300,\n            render : '#scroll-view-contaienr',\n            content : content\n        });\n        myScrollView.render();\n    })"
            ]
        },
        "Anim": {
            "name": "Anim",
            "shortname": "Anim",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "anim",
            "namespace": "",
            "file": "src/api/anim.js",
            "line": 6,
            "description": "动画支持",
            "is_constructor": 1,
            "params": [
                {
                    "name": "elem",
                    "description": "作用动画的元素节点或窗口（窗口时仅支持 scrollTop/Left）",
                    "type": "String|HTMLElement|KISSY.Node|window|普通的Object"
                },
                {
                    "name": "props",
                    "description": "动画结束的 dom 样式值",
                    "type": "Object"
                },
                {
                    "name": "config",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "Attribute": {
            "name": "Attribute",
            "shortname": "Attribute",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attribute",
            "namespace": "",
            "file": "src/api/attribute.js",
            "line": 6,
            "description": "鉴于不同浏览器对属性描述符的支持并不统一, KISSY 的 attribute 模块, 模拟实现了属性描述符, 提供属性的获取和设置操作, 即属性的 getter 和 setter 动作，它还有所有 CustomEvent.Target 的方法。",
            "uses": [
                "CustomEvent.Target"
            ],
            "is_constructor": 1
        },
        "Base": {
            "name": "Base",
            "shortname": "Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base",
            "namespace": "",
            "file": "src/api/base.js",
            "line": 7,
            "description": "如果你想让类默认就支持 [Attribute](/5.0/api/classes/Attribute.html) 功能, 请直接继承[Base](/5.0/api/classes/Base.html)。\n\n注：使用 Base 时, 虽然你还是可以通过 addAttr() 添加支持需要支持 setter/getter 的属性, 但最好还是把这些属性和它们的配置定义在类的 ATTRS 成员中. 即通过设置自定义类的 ATTRS 静态属性来给类实例对象添加属性管理机制.",
            "is_constructor": 1,
            "extends": "Attribute",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n```\nrequire(['base'], function(Base) {\n    var myClass = Base.extend({},{\n        ATTRS : {\n            size: {\n                value: 0,\n                setter: function(v) {\n                    if (S.isString(v) && v.indexOf('inch')!== -1) {\n                        return parseFloat(v)*10/3;\n                    }\n                    return parseFloat(v);\n                },\n                getter: function(v) {\n                    return v;\n                }\n            }\n        }\n     });\n\n    var cls = new myClass();\n\n    // 绑定事件\n    cls.on('afterSizeChange', function(ev){\n        console.log('change '+ ev.attrName + ': '+ev.prevVal+' --> '+ev.newVal);\n    });\n\n    // 设置属性\n    cls.set('size', 20);\n\n    // 获取属性\n    alert(cls.get('size'));\n\n    // 重置\n    cls.reset();\n    alert(cls.get('size'));\n});\n```"
            ]
        },
        "Button": {
            "name": "Button",
            "shortname": "Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "button",
            "namespace": "",
            "file": "src/api/button.js",
            "line": 5,
            "is_constructor": 1,
            "extends": "Component.Control",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t//首先引入KISSY提供的base样式和button样式 //g.alicdn.com/kissy/k/5.0.1/css/base.css 和 //g.alicdn.com/kissy/k/5.0.1/button/assets/dpl.css\n\t\n\trequire(['button'], function(Button){\n\t\tvar button1 = new Button({\n\t\t\tcontent : 'ButtonContent',\n\t\t\trender : '#container',\n\t\t\twidth : '150px',\n\t\t\telCls : 'ks-button-success'\n\t\t});\n\t\tbutton1.render();\n\t})\t"
            ]
        },
        "Color": {
            "name": "Color",
            "shortname": "Color",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "color",
            "namespace": "",
            "file": "src/api/color.js",
            "line": 6,
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "ComboBox": {
            "name": "ComboBox",
            "shortname": "ComboBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "combobox",
            "namespace": "",
            "file": "src/api/combobox.js",
            "line": 6,
            "is_constructor": 1,
            "extends": "Component.Control",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n```\nrequire(['combobox'], function(ComboBox){\n    var basicComboBox = new ComboBox({\n        render : '#container',\n        dataSource : new ComboBox.LocalDataSource({\n            data : ['a1234', 'b2345', 'c3456', 'd4567']\n        }),\n        maxItemCount : 4,\n        format : function(query, data){  //自定义下拉菜单属性\n            var ret = [];\n            for(var i = 0; i < data.length; i++){\n                ret[i] = {\n                    content:(data[i] + \"\")\n                        .replace(query, '<strong>' + query + '</strong>'),\n                    disabled:(i % 2 ? true : false)\n                }\n            }\n            return ret;\n        }\n    })\n})\n```"
            ]
        },
        "ComboBox.LocalDataSource": {
            "name": "ComboBox.LocalDataSource",
            "shortname": "ComboBox.LocalDataSource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "combobox",
            "namespace": "ComboBox",
            "file": "src/api/combobox.js",
            "line": 166,
            "description": "本地数据源，配合[ComboBox](/5.0/api/classes/ComboBox.html)使用",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    \n```\nrequire(['combobox'], function(ComboBox){\n    var basicComboBox = new ComboBox({\n        render : '#container',\n        dataSource : new ComboBox.LocalDataSource({\n            data : ['a1234', 'b2345', 'c3456', 'd4567']\n        }),\n        maxItemCount : 4,\n        format : function(query, data){  //自定义下拉菜单属性\n            var ret = [];\n            for(var i = 0; i < data.length; i++){\n                ret[i] = {\n                    content:(data[i] + \"\")\n                        .replace(query, '<strong>' + query + '</strong>'),\n                    disabled:(i % 2 ? true : false)\n                }\n            }\n            return ret;\n        }\n    })\n})\n```"
            ]
        },
        "ComboBox.RemoteDataSource": {
            "name": "ComboBox.RemoteDataSource",
            "shortname": "ComboBox.RemoteDataSource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "combobox",
            "namespace": "ComboBox",
            "file": "src/api/combobox.js",
            "line": 229,
            "description": "数据源，配合[ComboBox](/5.0/api/classes/ComboBox.html)使用",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    require(['combobox'], function(ComboBox){\n        var combobox = new ComboBox({\n            srcNode : '#combobox',\n            placeholder : 'input..',\n            prefixCls : 'search-',\n            dataSource : new ComboBox.RemoteDataSource({  //从淘宝获取数据\n                xhrCfg: {\n                    url: 'http://suggest.taobao.com/sug',\n                    dataType: 'jsonp',\n                    data: {\n                        k: 1,\n                        code: \"utf-8\"\n                    }\n                },\n                paramName: \"q\",\n                parse: function (query, results) {\n                    // 返回结果对象数组\n                    return results.result;\n                },\n                cache: true\n            }),\n            format : function(query, data){  //自定义下拉菜单属性\n                var ret = [];\n                for(var i = 0; i < data.length; i++){\n                    ret[i] = {\n                        content : data[i][0].replace(query, '<span class=\"item-text\">' + query + '</span>'),\n                        textContent : data[i][0]\n                    };\n                }\n                return ret;\n            }\n        });\n        combobox.render();\n    })"
            ]
        },
        "Cookie": {
            "name": "Cookie",
            "shortname": "Cookie",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cookie",
            "namespace": "",
            "file": "src/api/cookie.js",
            "line": 6,
            "description": "操作cookie\n\n### Note\n\n推荐阅读 NCZ 的这篇文章： [HTTP cookies explained](http://www.nczonline.net/blog/2009/05/05/http-cookies-explained/)",
            "static": 1
        },
        "DatePicker": {
            "name": "DatePicker",
            "shortname": "DatePicker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "date-picker",
            "namespace": "",
            "file": "src/api/date-picker.js",
            "line": 6,
            "description": "嵌入式日历组件",
            "is_constructor": 1,
            "extends": "Component.Control",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "DatePicker.Popup": {
            "name": "DatePicker.Popup",
            "shortname": "DatePicker.Popup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "date-picker",
            "namespace": "DatePicker",
            "file": "src/api/date-picker.js",
            "line": 85,
            "description": "浮层式日历控件，支持基本的日期选择、时间选择、范围选择、日期格式化输出等常用功能",
            "is_constructor": 1,
            "extends": "DatePicker",
            "uses": [
                "Align",
                "Shim"
            ],
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n```\nrequire(['date-picker'],function(DatePicker){\n    // use DatePicker.Popup\n});\n```"
            ]
        },
        "DD.Draggable": {
            "name": "DD.Draggable",
            "shortname": "DD.Draggable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dd",
            "namespace": "DD",
            "file": "src/api/dd.js",
            "line": 10,
            "description": "使得节点可被拖动",
            "is_constructor": 1,
            "extends": "Base",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n\trequire(['dd'],function(DD){\n        var drag=new DD.Draggable({\n            node:'#test-drag',\n            cursor:'move',\n            move:true\n        });\n    });"
            ]
        },
        "DD.Droppable": {
            "name": "DD.Droppable",
            "shortname": "DD.Droppable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dd",
            "namespace": "DD",
            "file": "src/api/dd.js",
            "line": 167,
            "description": "可放对象，通常用来监听事件，和Draggable一起使用做拖动交互",
            "is_constructor": 1,
            "extends": "Base",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n\trequire(['dd'], function(DD){\n\t\tvar Droppable = DD.Droppable;\n\t\tvar drop = new Droppable({\n\t\t\tnode : '#dropArea'\n\t\t});\n\t\tdrop.on('drophit', function(ev){\n\t\t\t//do something\n\t\t})\n\t})"
            ]
        },
        "DD.DDM": {
            "name": "DD.DDM",
            "shortname": "DD.DDM",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dd",
            "namespace": "DD",
            "file": "src/api/dd.js",
            "line": 233,
            "description": "拖放的中央控制对象, 所有的拖放实例的事件都会向其冒泡，通常用来监听所有拖放示例的事件做相应处理\n\n\trequire(['dd'], function(DD){\n\t\tvar DDM = DD.DDM;\n\t\n\t\t\tDDM.on('dragstart', function(ev){\n\t\t\t\t//do something\n\t\t\t});\n\t\t\tDDM.on('dragend', function(ev){\n\t\t\t\t//do something\n\t\t\t});\n\t})",
            "extends": "Base",
            "static": 1
        },
        "DD.DraggableDelegate": {
            "name": "DD.DraggableDelegate",
            "shortname": "DD.DraggableDelegate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dd",
            "namespace": "DD",
            "file": "src/api/dd.js",
            "line": 350,
            "description": "委托容器内的所有 Draggable 节点的拖放行为.",
            "is_constructor": 1,
            "extends": "DD.Draggable",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\trequire(['dd'],function(DD){\n\t\tvar DraggableDelegate = DD.DraggableDelegate;\n\t\tnew DraggableDelegate({\n            container:\"#container3\",\n            handlers:['.cheader'],\n            selector:'.component',\n            move:true\n        });\n\t})"
            ]
        },
        "DD.DroppableDelegate": {
            "name": "DD.DroppableDelegate",
            "shortname": "DD.DroppableDelegate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dd",
            "namespace": "DD",
            "file": "src/api/dd.js",
            "line": 395,
            "description": "为 Draggable 对象提供所需要的代理节点",
            "is_constructor": 1,
            "extends": "DD.Droppable",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Dom": {
            "name": "Dom",
            "shortname": "Dom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dom",
            "namespace": "",
            "file": "src/api/dom.js",
            "line": 6,
            "description": "操作DOM",
            "static": 1
        },
        "Editor": {
            "name": "Editor",
            "shortname": "Editor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "editor",
            "namespace": "",
            "file": "src/api/editor.js",
            "line": 5,
            "description": "富文本编辑器\n\n### Note1\neditor拥有各种常用的编辑器插件 —— editor-plugins ，KISSY@5.0+将 KISSY Editor 核心代码和 KISSY 代码放在一起，而 editor-plugins 则放在 [gallery](http://gallery.kissyui.com/) 上。插件的相关资料请查看 [editor-plugins教程](http://gallery.kissyui.com/editor-plugins/doc/guide/index.html)",
            "is_constructor": 1,
            "extends": "Component.Control",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    require(['node','editor,'kg/editor-plugins/1.1.2/font-size','kg/editor-plugins/1.1.2/source-area','kg/editor-plugins/1.1.2/image'], function(Node, Editor, FontSize, SourceArea, Image){\n        var myEditor = new Editor({\n            focused : true,\n            attachForm : true,\n            render : '#editorContainer',\n            width : '500px',\n            height : '500px',\n            plugins : [\n                FontSize,\n                SourceArea,\n                new Image({\n                    upload : {\n                        serverUrl: 'http://youurl.php',\n                        serverParams: {\n                            waterMark: function () {\n                                return Node.one(\"#ke_img_up_watermark_1\")[0].checked;\n                            }\n                        },\n                        suffix: \"png,jpg,jpeg,gif\",\n                        fileInput: \"Filedata\",\n                        sizeLimit: 1000, //k\n                        extraHTML: \"<p style='margin-top:10px;'><input type='checkbox' id='ke_img_up_watermark_1' checked='checked'> 图片加水印，防止别人盗用</p>\"\n                    }\n                })\n            ]\n        });\n    })"
            ]
        },
        "CustomEvent.Target": {
            "name": "CustomEvent.Target",
            "shortname": "CustomEvent.Target",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Attribute",
                "Router"
            ],
            "module": "event-custom",
            "namespace": "CustomEvent",
            "file": "src/api/event-custom.js",
            "line": 7,
            "description": "通过将该对象混入普通对象就可以使得普通对象和 dom 节点一样也能触发, 添加和删除事件。此外，如果要自定义事件也可以直接拓展 Base。\n\n__Note__\n\n注意 CustomEvent.Target 仅用于 mix/augment ，不可以直接使用。使用示例：\n```\nrequire(['util', 'event-custom'], function(Util, CustomEvent){\n\tfunction Dog(name){\n\t\tthis.name = name;\n\t}\n\tUtil.augment(Dog, CustomEvent.Target, {\n\t\tshout : function(){\n\t\t\tthis.fire('shout',{\n\t\t\t\tcontent : 'I am hungry...'\n\t\t\t});\n\t\t}\n\t});\n\tvar myDog = new Dog('cuteDog');\n\tmyDog.on('shout', function(ev){\n\t\talert(this.name + 'say that ' + ev.conent);\n\t});\n\n\tmyDog.shout();\n})\n\n```"
        },
        "DomEvent": {
            "name": "DomEvent",
            "shortname": "DomEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event-dom",
            "namespace": "",
            "file": "src/api/event-dom.js",
            "line": 6,
            "description": "处理 DOM 事件。DomEvent处理标准的event事件，除此之外还拓展了下面介绍的 Events \n```\nrequire('event-dom', function(DomEvent){\n    DomEvent.on(document.body,{\n        'click':{\n            fn:function(){\n                alert('hello,kissy..');\n            },\n            // filter: '', // delegate,\n            once:true // 绑定一次\n        },\n        'mouseenter':function(){}\n    });\n\n    //写法相当于\n    DomEvent.on(document.body, 'click', function(){\n\t\talert('hello,kissy..');\n    })\n})\n```",
            "static": 1
        },
        "Feature": {
            "name": "Feature",
            "shortname": "Feature",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "feature",
            "namespace": "",
            "file": "src/api/feature.js",
            "line": 6,
            "description": "硬件环境关键特性检测，这类功能通常在判断硬件环境时使用，如：\n```\nrequire(['feature'], function(Feature){\n\tif(Feature.isIELessThan(9)){\n\t\t//do something\n\t}\n})\n```",
            "static": 1
        },
        "FilterMenu": {
            "name": "FilterMenu",
            "shortname": "FilterMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "filter-menu",
            "namespace": "",
            "file": "src/api/filter-menu.js",
            "line": 5,
            "description": "可过滤菜单",
            "is_constructor": 1,
            "extends": "Menu",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t//从已存在html节点生成\n\trequire(['filter-menu'], function(FilterMenu){\n        var filterMenu = new FilterMenu({\n            srcNode: '#filterMenuExist',\n            width: 200,\n           \tallowMultiple : true\n        });\n\n        filterMenu.render();\n\t})\n\n\t//全新节点生成\n\trequire(['menu','filter-menu'], function(Menu, FilterMenu){\n\t\tvar m1 = new Menu.Item({\n            selectable: true,\n            content: \"女鞋\",\n            pinyin: \"nx\"\n        });\n        var m4 = new Menu.Item({\n\n            selectable: true,\n            content: \"女装女服\",\n            pinyin: \"nznf\"\n        });\n        var m2 = new Menu.Item({\n\n            selectable: true, content: \"家居服务\",\n            elCls: \"hasChildren\",\n            pinyin: \"jjfw\"\n        });\n        var m3 = new Menu.Item({\n\n            selectable: true,\n            content: \"手机\",\n            elCls: \"hasChildren\",\n            pinyin: \"sj\"\n        });\n\n        var filterMenu = new FilterMenu({\n            render: \"#container\",\n            width: 500,\n            placeholder: \"请输入中文或简拼\"\n        });\n        filterMenu.addChild(m1);\n        filterMenu.addChild(m2);\n        filterMenu.addChild(m3);\n        filterMenu.addChild(m4);\n        \n        filterMenu.render();\n\t})"
            ]
        },
        "GregorianCalendarFormat": {
            "name": "GregorianCalendarFormat",
            "shortname": "GregorianCalendarFormat",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gregorian-calendar-format",
            "namespace": "",
            "file": "src/api/gregorian-calendar-format.js",
            "line": 5,
            "description": "根据传入参数，创建对应的 DateTimeFormat 对象",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pattern",
                    "description": "时间模式（具体写法参见下面的表格）\n![](/5.0/api/assets/img/project-img/date-format.jpg)",
                    "type": "String"
                },
                {
                    "name": "locale",
                    "description": "时区",
                    "type": "Object"
                },
                {
                    "name": "timeZoneOffset",
                    "description": "时区时间偏移",
                    "type": "Number"
                }
            ]
        },
        "GregorianCalendar": {
            "name": "GregorianCalendar",
            "shortname": "GregorianCalendar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gregorian-calendar",
            "namespace": "",
            "file": "src/api/gregorian-calendar.js",
            "line": 6,
            "description": "公历",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "参数列表，可以有不同的参数，如下：\n1. 参数组合1：\n   - timezoneOffset (Number) – 时区时间偏差，以分钟形式，偏移小时数乘以60\n2. 参数组合2:\n   - locale (Object) – 区域信息，包含时差，时间符号等的对象\n3. 参数组合3：\n   - timezoneOffset (Number) – 时区时间偏差，以分钟形式，偏移小时数乘以60\n   - locale (Object) – 区域信息，包含时差，时间符号等的对象\n4. 参数组合4，按照所给日期和时间在默认时区和默认区域创建公历：\n   - year (Number) \n   - [month, day, hour, minute, seconds] (可选) 对应域的值"
                }
            ]
        },
        "IO": {
            "name": "IO",
            "shortname": "IO",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": "",
            "file": "src/api/io.js",
            "line": 6,
            "description": "构造请求并发送",
            "is_constructor": 1,
            "extends": "Promise",
            "params": [
                {
                    "name": "cfg",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n载入并执行一段脚本\n```\nnew IO({\n   type: \"GET\",\n   url: \"test.js\",\n   dataType: \"script\"\n });\n ```\n 发送数据给服务器，服务器返回后通知用户\n ```\n new IO({\n   type: \"POST\",\n   url: \"some.php\",\n   data: {\n    x:'y'\n   },\n   success: function(msg){\n     alert( \"Data Saved: \" + msg );\n   }\n });\n ```\n 取得最新的 html 并显示\n ```\n new IO({\n  url: \"test.html\",\n  cache: false,\n  success: function(html){\n    $(\"#results\").html(html);\n  }\n});\n```\n发送 xml 文档给服务器\n```\nvar xmlDocument=S.parseXML(\"<a>h</a>\");\n\nnew IO({\n   url: \"page.php\",\n   processData: false,\n   contentType:'text/xml',\n   data: xmlDocument,\n   type:'post'\n });\n ```\n 通过 xhr 发送 form 内容,自动序列化 form 为查询串通过 xhr 发送给服务器端\n ```\n <form>\n    <input name='test' value='v' />\n</form>\n\n<script>\n    new IO({\n        url:'send.php',\n        form:'#test',\n        type:'post',\n        dataType:'json',\n        success:function(d,s,xhr){\n            alert('success');\n        }\n    });\n</script>\n```"
            ]
        },
        "Json": {
            "name": "Json",
            "shortname": "Json",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "json",
            "namespace": "",
            "file": "src/api/json.js",
            "line": 5,
            "static": 1
        },
        "LoggerManager": {
            "name": "LoggerManager",
            "shortname": "LoggerManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "logger-manager",
            "namespace": "",
            "file": "src/api/logger-manager.js",
            "line": 5,
            "description": "控制台log输出\n\n示例1：\n    \n    require(['logger-manager'], function(LoggerManager){\n        LoggerManager.log('hello', 'warn')\n    });\n\n示例2：\n    \n    require(['logger-manager'], function(LoggerManager){\n        LoggerManager.config({\n            includes: [\n                {\n                    logger: /^KISSY/,\n                    minLevel : 'info',\n                    maxLevel : 'warn'\n                }\n            ],\n            excludes: [\n                {\n                    logger: /^modulex/, //以xx/开头的不显示\n                    maxLevel: 'info' //不显示 info 及 info 以下的 log\n                }\n            ]\n        })\n        var KissyLogger = LoggerManager.getLogger('KISSY');\n        KissyLogger.debug('hello KISSY');  //不会输出，因为配置了 minLevel : 'info'\n        KissyLogger.info('KISSY info');  //输出  KISSY: KISSY info\n        KissyLogger.warn('KISSY warn');  //输出 KISSY: KISSY warn\n        KissyLogger.error('KISSY error');  //不会输出，因为配置了 maxLevel : 'warn'\n\n        var ModulexLogger = LoggerManager.getLogger('modulex');  \n        ModulexLogger.debug('hello modulex');  // 不会输出\n    });",
            "static": 1
        },
        "Menu": {
            "name": "Menu",
            "shortname": "Menu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "menu",
            "namespace": "",
            "file": "src/api/menu.js",
            "line": 5,
            "description": "菜单。xclass : menu",
            "is_constructor": 1,
            "extends": "Component.Container",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t//先引入样式文件：\n\t////g.alicdn.com/kissy/k/5.0.1/css/base.css\n\t////g.alicdn.com/kissy/k/5.0.1/menu/assets/dpl.css\n\trequire(['menu', 'separator'], function(Menu, Separator){\n        var myMenu = new Menu({\n            render : '#container',\n            width : 150,\n            children : [\n                new Menu.Item({  //通过构造器来生成 Menu.Item 节点\n                    content : 'item1'\n                }),\n                {\n                    xclass : 'menuitem',  //通过xclass来生成 Menu.Item 节点\n                    content : 'item2'\n                },\n                {\n                    xclass:'separator'    //分隔符\n                },\n                {\n                    xclass : 'submenu',\n                    content : 'submenu',\n                    menu : new Menu.PopupMenu({\n                        autoHideOnMouseLeave:true,\n                        width : 150,\n                        children : [\n                            {\n                                xclass : 'menuitem',\n                                content : 'item1InSubMenu'\n                            },\n                            {\n                                xclass : 'menuitem',\n                                content : 'item2InSubMenu'\n                            }\n                        ]\n                    })\n                }\n            ]\n        });\n\n        myMenu.render();\n    });"
            ]
        },
        "Menu.Item": {
            "name": "Menu.Item",
            "shortname": "Menu.Item",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "menu",
            "namespace": "Menu",
            "file": "src/api/menu.js",
            "line": 75,
            "description": "菜单项。xclass : menuitem",
            "is_constructor": 1,
            "extends": "Component.Control",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    require(['menu'], function(Menu){\n        var myMenu = new Menu({\n            render : '#container',\n            width : 150,\n            children : [\n                new Menu.Item({  //通过构造器来生成 Menu.Item 节点\n                    content : 'item1'\n                }),\n                {\n                    xclass : 'menuitem',  //通过xclass来生成 Menu.Item 节点\n                    content : 'item2'\n                }\n            ]\n        });\n\n        myMenu.render();\n    });"
            ]
        },
        "Menu.SubMenu": {
            "name": "Menu.SubMenu",
            "shortname": "Menu.SubMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "menu",
            "namespace": "Menu",
            "file": "src/api/menu.js",
            "line": 138,
            "description": "子菜单，用来拓展子菜单。",
            "is_constructor": 1,
            "extends": "Menu.Item",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    require(['menu', 'separator'], function(Menu, Separator){\n        var myMenu = new Menu({\n            render : '#container',\n            width : 150,\n            children : [\n                new Menu.Item({  //通过构造器来生成 Menu.Item 节点\n                    content : 'item1'\n                }),\n                {\n                    xclass : 'menuitem',  //通过xclass来生成 Menu.Item 节点\n                    content : 'item2'\n                },\n                {\n                    xclass:'separator'    //分隔符\n                },\n                {\n                    xclass : 'submenu',  //通过 xclass 来生产 Menu.SubMenu\n                    content : 'submenu',\n                    menu : new Menu.PopupMenu({\n                        autoHideOnMouseLeave:true,\n                        width : 150,\n                        children : [\n                            {\n                                xclass : 'menuitem',\n                                content : 'item1InSubMenu'\n                            },\n                            {\n                                xclass : 'menuitem',\n                                content : 'item2InSubMenu'\n                            }\n                        ]\n                    })\n                }\n            ]\n        });\n\n        myMenu.render();\n    });"
            ]
        },
        "Menu.PopupMenu": {
            "name": "Menu.PopupMenu",
            "shortname": "PopupMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "menu",
            "namespace": "Menu",
            "file": "src/api/menu.js",
            "line": 208,
            "description": "弹出菜单。xclass : popmenu",
            "is_constructor": 1,
            "extends": "Menu",
            "uses": [
                "Component.Extension.Align",
                "Component.Extension.Shim",
                "Component.Extension.ContentBox"
            ],
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "    \n    require(['menu', 'separator'], function(Menu, Separator){\n        var myMenu = new Menu({\n            render : '#container',\n            width : 150,\n            children : [\n                new Menu.Item({  //通过构造器来生成 Menu.Item 节点\n                    content : 'item1'\n                }),\n                {\n                    xclass : 'menuitem',  //通过xclass来生成 Menu.Item 节点\n                    content : 'item2'\n                },\n                {\n                    xclass:'separator'    //分隔符\n                },\n                {\n                    xclass : 'submenu',\n                    content : 'submenu',\n                    menu : new Menu.PopupMenu({\n                        autoHideOnMouseLeave:true,\n                        width : 150,\n                        children : [\n                            {\n                                xclass : 'menuitem',\n                                content : 'item1InSubMenu'\n                            },\n                            {\n                                xclass : 'menuitem',\n                                content : 'item2InSubMenu'\n                            }\n                        ]\n                    })\n                }\n            ]\n        });\n\n        myMenu.render();\n    });"
            ]
        },
        "Menu.CheckItem": {
            "name": "Menu.CheckItem",
            "shortname": "Menu.CheckItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "menu",
            "namespace": "Menu",
            "file": "src/api/menu.js",
            "line": 277,
            "description": "多选菜单项。xclass : check-menuitem。所有class为CheckItem的多选菜单项，可以选中多个，区别于RadioItem",
            "is_constructor": 1,
            "extends": "Menu.Item",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\trequire(['menu', 'separator'], function(Menu, Separator){\n        new Menu({\n            render:\"#container\",\n            width : 150,\n            children:[\n                {\n                    xclass:'check-menuitem',\n                    content:\"checkable menuitem\"\n                },\n                {\n                    xclass:'separator'\n                },\n                {\n                    xclass:'submenu',\n                    content:'submenu',\n                    menu : new Menu.PopupMenu({\n                        autoHideOnMouseLeave:true,\n                        width : 150,\n                        children:[\n                            {\n                                xclass:'check-menuitem',\n                                content:\"checkable menuitem1\"\n                            },\n                            {\n                                xclass:'check-menuitem',\n                                content:\"checkable menuitem2\"\n                            }\n                        ]\n                    })\n                }\n            ]\n        }).render();\n    });"
            ]
        },
        "Menu.RadioItem": {
            "name": "Menu.RadioItem",
            "shortname": "Menu.RadioItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "menu",
            "namespace": "Menu",
            "file": "src/api/menu.js",
            "line": 328,
            "description": "单选菜单项。xclass : radio-menuitem。所有class为RadioItem的单选菜单项，只能选中一个，区别于CheckItem",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "extends": "Menu.Item",
            "example": [
                "\n    require(['menu', 'separator'], function(Menu, Separator){\n        var myMenu = new Menu({\n            render : '#container',\n            width : 150,\n            children : [\n                new Menu.RadioItem({  //通过构造器来生成 Menu.RadioItem 单选节点\n                    content : 'item1'\n                }),\n                {\n                    xclass : 'radio-menuitem',  //通过xclass来生成 Menu.RadioItem 单选节点\n                    content : 'item2'\n                },\n                {\n                    xclass:'separator'    //分隔符\n                },\n                {\n                    xclass : 'submenu',\n                    content : 'submenu',\n                    menu : new Menu.PopupMenu({\n                        autoHideOnMouseLeave:true,\n                        width : 150,\n                        children : [\n                            {\n                                xclass : 'radio-menuitem',\n                                content : 'item1InSubMenu'\n                            },\n                            {\n                                xclass : 'radio-menuitem',\n                                content : 'item2InSubMenu'\n                            }\n                        ]\n                    })\n                }\n            ]\n        });\n\n        myMenu.render();\n    });"
            ]
        },
        "MenuButton": {
            "name": "MenuButton",
            "shortname": "MenuButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "menubutton",
            "namespace": "",
            "file": "src/api/menubutton.js",
            "line": 5,
            "description": "菜单按钮。xclass : menu-button",
            "is_constructor": 1,
            "extends": "Button",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\trequire(['menu', 'menubutton'], function(Menu, MenuButton){\n        var myMenuButton1 = new MenuButton({  //全新生成节点\n            content : '我的淘宝',\n            render : '#container',\n            matchElWidth : false,\n            menu : {\n                xclass : 'popupmenu',\n                children : [\n                    {\n                        xclass : 'menuitem',   //通过xclass来生成menuitem\n                        content : '已买到的宝贝'\n                    },\n                    new Menu.Item({            //通过构造器来生成menuitem\n                        content : '已卖出的宝贝'\n                    })\n                ],\n                listeners : {\n                    click : function(ev){\n                        S.log(ev.target.get('content'));\n                    }\n                }\n            }\n        });\n        myMenuButton1.render();\n    });"
            ]
        },
        "MenuButton.Select": {
            "name": "MenuButton.Select",
            "shortname": "MenuButton.Select",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "menubutton",
            "namespace": "MenuButton",
            "file": "src/api/menubutton.js",
            "line": 105,
            "description": "管理 select > option 列表(manage a list of single-select options)，xclass : select。用于模拟selectbox",
            "extends": "MenuButton",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\trequire(['menu', 'menubutton'], function(Menu, MenuButton){\n\t\t// 调用 MenuButton.Select.decorate 接口替换已有的 select 元素\n        var select = MenuButton.Select.decorate('#decorateSelect', {\n            width:80,\n            prefixCls:\"c2c-\",  //自定义的c2c主题样式\n            // 设置对齐方式, 与普通的 Align 大体一致\n            // 该配置同菜单配置项\n            menu:{\n                align:{\n                    points : ['bl', 'tl'],  //默认就是这个配置，可写可不写，或根据需要进行自定义定位\n                    offset:[0, -1]\n                },\n                height:150,\n                elStyle:{\n                    overflow:\"auto\",\n                    overflowX:\"hidden\"\n                }\n            }\n        });\n        select.on(\"click\", function (e) {\n            alert('当前值为: ' + select.get(\"value\"));\n        });\n\n\n        //全新生成\n        var select2 = new MenuButton.Select({\n        \trender : '#container',\n\t\t\tprefixCls : 'c2c',\n\t\t\twidth : 100,\n\t\t\tmenu : {\n\t\t\t\txclass : 'popupmenu',\n\t\t\t\talign : {\n\t\t\t\t\toffset : [0, -1]\n\t\t\t\t},\n\t\t\t\tchildren : [\n\t\t\t\t\t{\n\t\t\t\t\t\txclass : 'option',\n\t\t\t\t\t\tcontent : '杭州'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\txclass : 'option',\n\t\t\t\t\t\tcontent : '广州'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n        });\n        select2.render();\n\t});"
            ]
        },
        "MenuButton.Option": {
            "name": "MenuButton.Option",
            "shortname": "MenuButton.Option",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "menubutton",
            "namespace": "MenuButton",
            "file": "src/api/menubutton.js",
            "line": 192,
            "description": "模拟select > option，与 MenuButton.Select 配合使用。xclass : option",
            "is_constructor": 1,
            "extends": "Menu.Item",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\trequire(['menu', 'menubutton'], function(Menu, MenuButton){\n        //全新生成\n        var select2 = new MenuButton.Select({\n        \trender : '#container',\n\t\t\tprefixCls : 'c2c',\n\t\t\twidth : 100,\n\t\t\tmenu : {\n\t\t\t\txclass : 'popupmenu',\n\t\t\t\talign : {\n\t\t\t\t\toffset : [0, -1]\n\t\t\t\t},\n\t\t\t\tchildren : [\n\t\t\t\t\tnew MenuButton.Option({   //构造器生成\n\t\t\t\t\t\tvalue : 'customValue',\n\t\t\t\t\t\tcontent : '北京',\n\t\t\t\t\t\tprefixCls:\"c2c-\"\n\t\t\t\t\t}),\n\t\t\t\t\t{\n\t\t\t\t\t\txclass : 'option',  //xclass生成\n\t\t\t\t\t\tcontent : '杭州',\n\t\t\t\t\t\tprefixCls:\"c2c-\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\txclass : 'option',\n\t\t\t\t\t\tcontent : '广州',\n\t\t\t\t\t\tprefixCls:\"c2c-\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n        });\n        select2.render();\n\t});"
            ]
        },
        "Modulex": {
            "name": "Modulex",
            "shortname": "Modulex",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "modulex",
            "namespace": "",
            "file": "src/api/modulex.js",
            "line": 6,
            "description": "modulex 是新一代的模块加载器，可单独使用。\n实际上，KISSY的种子文件 seed.js 是由 modulex + feature + ua + meta 四个部分组成的。seed.js是KISSY的种子文件，引用它则可以方便使用KISSY提供的各种模块，如 anim , dom , event-dom 等。而 modulex 是一个模块加载器，如果你只是需要模块加载功能，也可以直接使用 modulex。更多信息可以查看 [modulex on github](https://github.com/modulex/modulex)。modulex 始终作为一个全局对象存在页面的生命周期。",
            "static": 1
        },
        "NavigationView": {
            "name": "NavigationView",
            "shortname": "NavigationView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "navigation-view",
            "namespace": "",
            "file": "src/api/navigation-view.js",
            "line": 5,
            "description": "可管理多个视图之间显示/隐藏/切换的导航视图，同一时间只能显示一个视图，并针对没有提供“返回键”的终端系统，如IOS，提供了一个模块 navigation-view/bar 实现返回按钮，可配合使用。xclass : navigation-view",
            "extends": "Component.Container",
            "uses": [
                "Component.Extension.ContentBox"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": ""
                }
            ],
            "example": [
                "\n\trequire(['navigation-view', 'component/control'], function(NavigationView, Control){\n\t\tvar navigationView = new NavigationView({\n            loadingHtml: '<div class=\"ks-navigation-view-loading-outer\">' +\n                '<div class=\"ks-navigation-view-loading-inner\"></div>' +\n                '</div>',\n            render: 'body'\n        }).render();\n\n        var PageView = Control.extend({\n\t\t\tcreateDom : function(){\n\t\t\t\t//your code\n\t\t\t},\n\t\t\tbindUI : function(){\n\t\t\n\t\t\t},\n\t\t\tenter : function(){\n\t\n\t\t\t}\n\t\t\t//....more function\n        },{\n\t\t\txclass : 'page-view'\n        });\n\n        navigationView.push({\n\t\t\txclass : 'page-view',\n\t\t\ttitle : 'PageView Title'\n        });\n\t})"
            ]
        },
        "Node": {
            "name": "Node",
            "shortname": "Node",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "node",
            "namespace": "",
            "file": "src/api/node.js",
            "line": 6,
            "description": "由node模块提供的类 Node,你只需要把 Node 看做 jquery 中的 $ 就可以了,非常方便",
            "is_constructor": 1,
            "params": [
                {
                    "name": "html",
                    "description": "不同类型有不同意义，如下：\n- string : html 字符串, 例如 `<div>` , 根据该字符串生成 Node 对象\n- HTMLElement|Text|Window|HTMLDocument : 把原生 DOM 节点包装成一个 Node 对象, 这个情景一般可用 `Node.all` 代替\n- HTMLCollection|ArrayList<HTMLElement> : 将原生节点列表包装为一个 Node 对象\n- Node : 从当前 Node 对象中克隆一个新对象返回",
                    "type": "String|HTMLElement|Text|Window|HTMLDocument|HTMLCollection|ArrayList<HTMLElement>|Node"
                },
                {
                    "name": "props",
                    "description": "属性键值对, 对生成的 Node 对象代表的原生 DOM 节点设置属性. 仅当 html 参数为 html 字符串时使用",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "ownerDocument",
                    "description": "该 Node 产生的原生 DOM 节点所属的文档对象. 仅当 html 参数为 html 字符串时使用",
                    "type": "HTMLDocument",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回Node对象\n### Note1\n\n#### 推荐除了需要生成文本节点的情况下, 统统使用 Node.all() 代替\n\n### Note2\n\n以下的这些方法,\n[filter()](/5.0/api/classes/Dom.html#method_filter) ,[test()](/5.0/api/classes/Dom.html#method_test) ,[clone()](/5.0/api/classes/Dom.html#method_clone) ,[empty()](/5.0/api/classes/Dom.html#method_empty) ,[replaceWith()](/5.0/api/classes/Dom.html#method_replaceWith) ,[hasClass()](/5.0/api/classes/Dom.html#method_hasClass) ,[addClass()](/5.0/api/classes/Dom.html#method_addClass) ,[removeClass()](/5.0/api/classes/Dom.html#method_removeClass) ,[replaceClass()](/5.0/api/classes/Dom.html#method_replaceClass) ,[toggleClass()](/5.0/api/classes/Dom.html#method_toggleClass) ,[removeAttr()](/5.0/api/classes/Dom.html#method_removeAttr) ,[attr()](/5.0/api/classes/Dom.html#method_attr) ,[hasAttr()](/5.0/api/classes/Dom.html#method_hasAttr) ,[prop()](/5.0/api/classes/Dom.html#method_prop) ,[hasProp()](/5.0/api/classes/Dom.html#method_hasProp) ,[val()](/5.0/api/classes/Dom.html#method_val) ,[text()](/5.0/api/classes/Dom.html#method_text) ,[css()](/5.0/api/classes/Dom.html#method_css) ,[toggle()](/5.0/api/classes/Dom.html#method_toggle) ,[offset()](/5.0/api/classes/Dom.html#method_offset) ,[scrollIntoView()](/5.0/api/classes/Dom.html#method_scrollIntoView) ,[parent()](/5.0/api/classes/Dom.html#method_parent) ,[index()](/5.0/api/classes/Dom.html#method_index) ,[next()](/5.0/api/classes/Dom.html#method_next) ,[prev()](/5.0/api/classes/Dom.html#method_prev) ,[first()](/5.0/api/classes/Dom.html#method_first) ,[last()](/5.0/api/classes/Dom.html#method_last) ,[siblings()](/5.0/api/classes/Dom.html#method_siblings) ,[children()](/5.0/api/classes/Dom.html#method_children) ,[contains()](/5.0/api/classes/Dom.html#method_contains) ,[html()](/5.0/api/classes/Dom.html#method_html) ,[remove()](/5.0/api/classes/Dom.html#method_remove) ,[data()](/5.0/api/classes/Dom.html#method_data) ,[removeData()](/5.0/api/classes/Dom.html#method_removeData) ,[hasData()](/5.0/api/classes/Dom.html#method_hasData) ,[contains()](/5.0/api/classes/Dom.html#method_contains) ,[unselectable()](/5.0/api/classes/Dom.html#method_unselectable) ,[innerWidth()](/5.0/api/classes/Dom.html#method_innerWidth) ,[innerHeight()](/5.0/api/classes/Dom.html#method_innerHeight) ,[outerWidth()](/5.0/api/classes/Dom.html#method_outerWidth) ,[outerHeight()](/5.0/api/classes/Dom.html#method_outerHeight) ,[on()](/5.0/api/classes/Dom.html#method_on) ,[detach()](/5.0/api/classes/Dom.html#method_detach) ,[fire()](/5.0/api/classes/Dom.html#method_fire)  的调用都会被转发给 dom , event , 原 DOM , Event 对应方法的第一个参数传入一个原生 DOM 节点数组, 而这个原生 DOM 节点数组则是由当前的 KISSY Node 对象得到的",
                "type": "Node"
            }
        },
        "Overlay": {
            "name": "Overlay",
            "shortname": "Overlay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "overlay",
            "namespace": "",
            "file": "src/api/overlay.js",
            "line": 5,
            "description": "悬浮层。使用前先引入overlay样式`//g.alicdn.com/kissy/k/5.0.1/overlay/assets/dpl.css`或利用prefixCls自定义样式。",
            "is_constructor": 1,
            "extends": "Component.Container",
            "uses": [
                "Component.Extension.Shim",
                "Component.Extension.Align"
            ],
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    require(['overlay', 'button'], function(Overlay, Button){\n        var modalDialog = new Overlay.Dialog({\n            headerContent : '我是头部',\n            width : 500,\n            mask : true,\n            bodyContent : '<div>我是主体</div>',\n            align : {  //定位对话框\n                points : ['cc', 'cc']  //在可视区域正中央\n            }\n        });\n        modalDialog.show();\n    });"
            ]
        },
        "Overlay.Dialog": {
            "name": "Overlay.Dialog",
            "shortname": "Overlay.Dialog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "overlay",
            "namespace": "Overlay",
            "file": "src/api/overlay.js",
            "line": 92,
            "description": "模态对话框",
            "is_constructor": 1,
            "extends": "Overlay",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    require(['overlay', 'button'], function(Overlay, Button){\n        var modalDialog = new Overlay.Dialog({\n            headerContent : '我是头部',\n            width : 500,\n            mask : true,\n            bodyContent : '<div>我是主体</div>',\n            align : {  //定位对话框\n                points : ['cc', 'cc']  //在可视区域正中央\n            }\n        });\n        modalDialog.show();\n    });"
            ]
        },
        "Overlay.Popup": {
            "name": "Overlay.Popup",
            "shortname": "Overlay.Popup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "overlay",
            "namespace": "Overlay",
            "file": "src/api/overlay.js",
            "line": 171,
            "description": "内容提示框",
            "is_constructor": 1,
            "extends": "Overlay",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    <script type=\"x-template\" id=\"popupTpl\">\n        <div class=\"ks-popup-arrow\"></div>\n        <div class=\"ks-popup-inner\"> <!-- 已定义好的内容提示框的样式-->\n            <h3 class=\"ks-popup-title\">This is Title</h3>\n\n            <div class=\"ks-popup-inner-content\">\n                <p>This is content...</p>\n            </div>\n        </div>\n    </script>\n    require(['overlay', 'button', 'node'], function(Overlay, Button, $){\n        var myPopup = new Overlay.Popup({\n            width : 200,\n            trigger : '#popup',\n            triggerType : 'mouse',\n            content : $('#popupTpl').html(),\n            elCls: \"ks-popup-right\",  //添加内容提示框在右侧时的箭头图标样式\n            effect : {\n                effect : 'fade',\n                duration : 0.3\n            },\n            align: {\n                node: '#popup',  //相对按钮#popup定位\n                points: ['cr', 'cl']\n            }\n        });\n    });"
            ]
        },
        "Path": {
            "name": "Path",
            "shortname": "Path",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "path",
            "namespace": "",
            "file": "src/api/path.js",
            "line": 5,
            "description": "地址操作工具类",
            "static": "```\nrequire(['path'],function(Path){\n        Path.do_sth();// 执行操作\n});\n```"
        },
        "Promise": {
            "name": "Promise",
            "shortname": "Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "promise",
            "namespace": "",
            "file": "src/api/promise.js",
            "line": 5,
            "description": "### 简单使用\n```\nrequire(['promise'],function(Promise){\n\tvar d = new Promise.Defer();\n    var promise = d.promise;\n    promise.then(function (v) {\n        return v + 1;\n    }).then(function (v) {\n            alert(v); // => 2\n        });\n    d.resolve(1); // 该位置也可以放在 then 前面\n});\n```",
            "is_constructor": 1,
            "return": {
                "description": "promise 实例，外部不允许初始化。要通过[Defer()](/5.0/api/classes/Promise.Defer.html)来获取"
            }
        },
        "Promise.Defer": {
            "name": "Promise.Defer",
            "shortname": "Promise.Defer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "promise",
            "namespace": "Promise",
            "file": "src/api/promise.js",
            "line": 111,
            "is_constructor": 1,
            "return": {
                "description": "Defer 实例，用于逻辑内部控制成功或失败，返回 promise 供外部监听"
            }
        },
        "Querystring": {
            "name": "Querystring",
            "shortname": "Querystring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "querystring",
            "namespace": "",
            "file": "src/api/querystring.js",
            "line": 6,
            "description": "提供JSON对象与querystring相互转换的方法\n\n使用示例：\n\n\trequire(['querystring'], function(Querystring){\n\t    var obj = {\n\t\t\tfoo : 1,\n\t\t\tbar : [2, 3]\t\n\t    };\n\t    Querystring.stringify(obj); // foo=1&bar%5B%5D=2&bar%5B%5D=3 \n\n\t    var str = 'section=blog&tag=js&tag=doc';\n\t    Querystring.parse(str);  // {section: 'blog', tag: ['js', 'doc']}\n\t});",
            "static": 1
        },
        "Resizable": {
            "name": "Resizable",
            "shortname": "Resizable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "resizable",
            "namespace": "",
            "file": "src/api/resizable.js",
            "line": 5,
            "description": "缩放功能\n\n拖放 handler 的样式需要调用者自己编写,如下面这个例子的样式。",
            "is_constructor": 1,
            "extends": "Base",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t//css\n\t.ks-resizable-handler {\n\tposition: absolute;\n\toverflow: hidden;\n\tfont-size: 0;\n\tline-height: 0;\n\tz-index: 1;\n\t}\n\t.ks-resizable-handler-t,.ks-resizable-handler-b,  .ks-resizable-handler-r, .ks-resizable-handler-l {\n\t    opacity: 0.6;\n\t    filter: alpha(opacity = 60);\n\t    background-color: #F19EC2;\n\t}\n\t.ks-resizable-handler-t,.ks-resizable-handler-b {\n\t    left: 0;\n\t    height: 5px;\n\t    width: 100%;\n\t    cursor: n-resize;\n\t}\n\t.ks-resizable-handler-b {\n\t    bottom: 0;\n\t}\n\n\t.ks-resizable-handler-t {\n\t    top: 0;\n\t}\n\t.ks-resizable-handler-r, .ks-resizable-handler-l {\n\t    top: 0;\n\t    height: 100%;\n\t    -height: expression(this.parentNode.offsetHeight);\n\t    width: 5px;\n\t    cursor: e-resize;\n\t}\n\t.ks-resizable-handler-l {\n\t    left: 0;\n\t}\n\n\t.ks-resizable-handler-r {\n\t    right: 0;\n\t}\n\n\t.ks-resizable-handler-bl, .ks-resizable-handler-br, .ks-resizable-handler-tl, .ks-resizable-handler-tr {\n\t    position: absolute;\n\t    width: 5px;\n\t    height: 5px;\n\t    border: 1px solid #535353;\n\t    background-color: #E4007F;\n\t    z-index: 2;\n\t}\n\t.ks-resizable-handler-bl {\n\t    left: -3px;\n\t    bottom: -3px;\n\t    cursor: sw-resize;\n\t}\n\n\t.ks-resizable-handler-br {\n\t    right: -3px;\n\t    bottom: -3px;\n\t    cursor: nw-resize;\n\t}\n\n\t.ks-resizable-handler-tl {\n\t    left: -3px;\n\t    top: -3px;\n\t    cursor: nw-resize;\n\t}\n\n\t.ks-resizable-handler-tr {\n\t    right: -3px;\n\t    top: -3px;\n\t    cursor: sw-resize;\n\t}\n\n\t//javascript\n\trequire(['node', 'resizable'], function($, Resizable) {\n\t    var r = new Resizable({\n\t        node:\"#something-can-resize\",\n\t        // 指定可拖动的位置\n\t        handlers:[\"b\",\"t\",\"r\",\"l\",\"tr\",\"tl\",\"br\",\"bl\"],\n\t        // 可选, 设置最小/最大 宽高\n\t        minHeight:100,\n\t        minWidth:100,\n\t        maxHeight:300,\n\t        maxWidth:400\n\t    });\n\t});"
            ]
        },
        "Router": {
            "name": "Router",
            "shortname": "Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "router",
            "namespace": "",
            "file": "src/api/router.js",
            "line": 6,
            "description": "一个类似express的路由管理器\n\n使用示例：\n\n\trequire(['node', 'router'], function($, Router){\n\t\tRouter.config({  //路由全局配置\n\t        triggerRoute: true,  // 触发当前地址对应的 route 操作\n\t        urlRoot: location.pathname\n\t\t});\n\n\t\tRouter.get('/', function(req, res, nextCallback){\n\t\t\t//显示根目录内容\n\t\t});\n\n\t\tRouter.get('/:path*', function(req){\n\t\t\t//req.params.path => 'test'\n\t\t\t//req.params[0] => '/test1/test2'\n\t\t\t//req.parmas[1] => 'test1/test2'\n\t\t});\n\n\t\tRouter.get('/detail/:id', function(req){\n\t\t\t//req.params.id => 88\n\t\t\t//req.query => { pa : 1, pe : 2 }\n\t\t})\n\n\t\tRouter.navigate(\"/test/test1/test2\");\n\t\tRouter.navigate('/detail/88?pa=1&pe=2');\n\n\t\tRouter.start(function(){\n\t        $('#loading').hide();\n\t\t});\n\t});",
            "static": 1,
            "uses": [
                "CustomEvent.Target"
            ]
        },
        "SplitButton": {
            "name": "SplitButton",
            "shortname": "SplitButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "split-button",
            "namespace": "",
            "file": "src/api/split-button.js",
            "line": 5,
            "description": "按钮和菜单按钮的组合,构建支持下拉菜单的按钮组。\n\nsplit-button 内部实现其实是利用 button 和 menubutton 两个组件组合使用而成，split-button左边是button组件内容，右边是设置content为空的menubutton。\n\nsplit-button的html结构规范如下：\n\n\t<div id=\"split-button2\" class=\"ks-split-button\">\n        <div class=\"ks-button ks-split-button-left\"\n             tabindex=\"0\">Action\n        </div>\n        <div class=\"ks-menu-button ks-button ks-split-button-right\"\n             tabindex=\"0\">\n            <div class=\"ks-menu-button-content\"></div>\n            <div class=\"ks-menu-button-dropdown\">\n                <div class=\"ks-menu-button-dropdown-inner\"></div>\n            </div>\n            <div class=\"ks-popupmenu ks-menu\">\n                <div class=\"ks-popupmenu-content\">\n                    <div class=\"ks-menuitem\">Action</div>\n                    <div class=\"ks-menuitem\">Another</div>\n                    <div class=\"ks-menuitem\">else</div>\n                </div>\n            </div>\n        </div>\n    </div>",
            "is_constructor": 1,
            "extends": "Component.Container",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t//全新节点生成\n\tvar splitButton1 = new SplitButton({\n        render : '#button-container1',\n        button : {  //设置splitButton 的内容\n            xclass : 'button',\n            elCls : 'ks-button-info',  //使用 button 组件提供的按钮样式\n            content : 'Button'\n        },\n        menuButton : {  //设置 splitButton 的下拉内容\n            xclass : 'menu-button',\n            elCls : 'ks-button-info',\n            matchElWidth: false,\n            collapseOnClick: true,\n            menu : {\n                xclass : 'popupmenu',\n                children : [\n                    {\n                        xclass : 'menuitem',\n                        content : 'content1'\n                    },\n                    {\n                        xclass : 'menuitem',\n                        content : 'content2'\n                    }\n                ]\n            }\n        }\n    });\n    splitButton1.render();\n\n    //从已有元素生成（html结构和class需符合规范）\n    var splitButton2 = new SplitButton({\n        srcNode : '#split-button2'\n    }).render();"
            ]
        },
        "StyleSheet": {
            "name": "StyleSheet",
            "shortname": "StyleSheet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "stylesheet",
            "namespace": "",
            "file": "src/api/stylesheet.js",
            "line": 5,
            "description": "动态修改外部或内联样式表",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    require(['node', 'stylesheet'], function( $, StyleSheet){\n        var linkStyleSheet = new StyleSheet('#linkcss');\n        $('#change-link-css').on('click', function(ev){\n            linkStyleSheet.set('.link',{\n                color : 'red'\n            });\n        });\n\n        var innerStyleSheet = new StyleSheet('#my-style');\n        $('#change-style-css').on('click', function(ev){\n            innerStyleSheet.set('.style p',{\n                color : 'red'\n            });\n        });\n        $('#get-p-styletext').on('click', function(ev){\n            alert(innerStyleSheet.get('.style'));\n        });\n    });"
            ]
        },
        "SWF": {
            "name": "SWF",
            "shortname": "SWF",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "swf",
            "namespace": "",
            "file": "src/api/swf.js",
            "line": 5,
            "description": "动态插入 swf 功能",
            "is_constructor": 1,
            "extends": "Base.Attribute",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n```\nrequire(['swf'],function(SWF){\n    // use SWF\n    var swf=new SWF({\n        src:'xx.swf',\n        attrs:{\n            width:100\n        },\n        params:{\n            flashVars:{\n                x:1\n            }\n        },\n        render:'#container'\n    });\n\n    swf.get('el') // => 对应 swf dom 节点\n\n    swf.callSWF('save',[key,value]);  //调用swf的方法\n});\n```"
            ]
        },
        "Tabs": {
            "name": "Tabs",
            "shortname": "Tabs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tabs",
            "namespace": "",
            "file": "src/api/tabs.js",
            "line": 5,
            "description": "选项卡组件",
            "is_constructor": 1,
            "extends": "Component.Container",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\trequire(['tabs'], function(Tabs){\n        var myTabs = new Tabs({\n            render : '#container',\n            width : '60%',\n            items : [\n                {\n                    title : 'title of tab-1',\n                    content : 'tab-1 content'\n                },\n                {\n                    title : 'title of tab-2',\n                    content : 'tab-2 content',\n                    selected : true   //默认选中这个tab\n                },\n                {\n                    title : 'title of tab-3',\n                    content : 'tab-3 content',\n                    closable : true    //显示关闭按钮，点击删除tab\n                }\n            ]\n        }).render();\n    });"
            ]
        },
        "Toolbar": {
            "name": "Toolbar",
            "shortname": "Toolbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "toolbar",
            "namespace": "",
            "file": "src/api/toolbar.js",
            "line": 6,
            "description": "toolbar 的子节点children默认使用 button 组件，所以若设置了子节点则需要手动引入button模块，或者使用xclass则需要确保直接或间接引入相应的模块。如使用了 xclass:menu-button 则需要手动引入 menubuton 模块。\n\nKISSY 内置的参考样式（或利用prefixCls/elCls自定义样式）：\n\t\n\t.ks-toolbar {\n\t  background-color: #f2f2f2;\n\t  background-image: -moz-linear-gradient(top, #f5f5f5, #eeeeee);\n\t  background-image: -ms-linear-gradient(top, #f5f5f5, #eeeeee);\n\t  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#f5f5f5), to(#eeeeee));\n\t  background-image: -webkit-linear-gradient(top, #f5f5f5, #eeeeee);\n\t  background-image: -o-linear-gradient(top, #f5f5f5, #eeeeee);\n\t  background-image: linear-gradient(top, #f5f5f5, #eeeeee);\n\t  background-repeat: repeat-x;\n\t  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#f5f5f5', endColorstr='#eeeeee', GradientType=0);\n\t  border: 1px solid #e5e5e5;\n\t  border-radius: 4px;\n\t  outline: none;\n\t  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\t  -webkit-box-shadow: inset 0 1px 0 #ffffff, 0 1 px 5 px rgba(0, 0, 0, 0.1);\n\t  -moz-box-shadow: inset 0 1px 0 #ffffff, 0 1 px 5 px rgba(0, 0, 0, 0.1);\n\t  box-shadow: inset 0 1px 0 #ffffff, 0 1 px 5 px rgba(0, 0, 0, 0.1);\n\t}\n\t.ks-toolbar .ks-button {\n\t  background: transparent;\n\t  border: none;\n\t  text-shadow: none;\n\t  padding: 11px 12px 11px 12px;\n\t  color: #0088cc;\n\t  margin: 0;\n\t  border-left: 1px solid #f5f5f5;\n\t  border-right: 1px solid #e5e5e5;\n\t  border-radius: 0;\n\t  background-image: none;\n\t  -webkit-box-shadow: none;\n\t  -moz-box-shadow: none;\n\t  box-shadow: none;\n\t}\n\t.ks-toolbar .ks-button:first-child {\n\t  border-left: 0;\n\t  padding-left: 13px;\n\t}\n\t.ks-toolbar .ks-button:last-child {\n\t  border-right: 0;\n\t  padding-right: 13px;\n\t}\n\t.ks-toolbar .ks-button-hover {\n\t  color: #005580;\n\t  background-color: #eeeeee;\n\t  border-right-color: #dddddd;\n\t}\n\t.ks-toolbar .ks-button-checked,\n\t.ks-toolbar .ks-button-active {\n\t  color: #777777;\n\t  background-color: #e9e9e9;\n\t  padding-left: 13px;\n\t  border-left: 0;\n\t  box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.05);\n\t}\n\t.ks-toolbar .ks-menu-button-dropdown {\n\t  border-top-color: #0088cc;\n\t}\n\t.ks-toolbar .ks-button-hover .ks-menu-button-dropdown {\n\t  border-top-color: #777777;\n\t}\n\t.ks-toolbar .ks-menu-button-open {\n\t  color: #ffffff;\n\t  background-color: #999999;\n\t  border-color: #999999;\n\t}\n\t.ks-toolbar .ks-menu-button-open .ks-menu-button-dropdown {\n\t  border-top-color: #ffffff;\n\t}",
            "is_constructor": 1,
            "extends": "Component.Container",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\trequire(['toolbar', 'button', 'menubutton'], function(Toolbar){\n        var simpleToolbar = new Toolbar({\n            render : '#wrap',\n            width : '80%',\n            children : [\n                {\n                    xclass : 'button',\n                    content : 'Home'\n                },\n                {\n                    xclass : 'button',\n                    content : 'QuickStart'\n                },\n                {\n                    xclass : 'menu-button',\n                    content : 'Docs',\n                    matchElWidth : false,\n                    menu : {\n                        children : [\n                            {\n                                content : 'API'\n                            },\n                            {\n                                content : 'Guide'\n                            }\n                        ]\n                    }\n                },\n                {\n                    xclass : 'button',\n                    content : 'Contribute'\n                }\n            ],\n            listeners : {\n                click : function(ev){\n                    console.log(ev.target.get('content'));\n                }\n            }\n        }).render();\n    });"
            ]
        },
        "Tree": {
            "name": "Tree",
            "shortname": "Tree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tree",
            "namespace": "",
            "file": "src/api/tree.js",
            "line": 7,
            "description": "普通树结构。xclass:tree",
            "is_constructor": 1,
            "extends": "Tree.Node",
            "uses": [
                "Tree.Manager"
            ],
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t//通过addChild添加子节点\n\trequire(['tree', 'node'], function(Tree, $){\n\t    var tree = new Tree({\n\t        content: \"淘宝网\",\n\t        expanded: true,\n\t        // showRootNode:false,  //是否显示根节点\n\t        render: \"#treeContainer\"\n\t    });\n\t    var favorates = new Tree.Node({\n\t        content: \"收藏夹\",\n\t        tree: tree\n\t    });\n\t    favorates.addChild(new Tree.Node({\n\t        content: \"收藏的宝贝\"\n\t    }));\n\t    favorates.addChild(new Tree.Node({\n\t        // 即使没有儿子也强制指定为 folder 样式\n\t        isLeaf: false,\n\t        content: \"收藏的店铺\"\n\t    }));\n\t    tree.addChild(favorates);\n\t  });\n\n  \t//通过xclass生成节点(json)\n  \trequire(['tree', 'node'], function(Tree, $){\n        var tree = new Tree({\n            content: \"淘宝网\",\n            expanded: true,\n            children: [\n                {\n                    xclass : 'check-tree-node',\n                    content: \"收藏夹\",\n                    children: [\n                        {\n                            content: \"收藏的宝贝\"\n                        },\n                        {\n                            content: \"收藏的店铺\"\n                        }\n                    ]\n                },\n                {\n                    content: '我要买'\n                },\n                {\n                    xclass : 'tree-node',\n                    content: '我的淘宝',\n                    children: [\n                        {\n                            content: \"已买到的宝贝\"\n                        },\n                        {\n                            content: \"已买到的宝贝\"\n                        }\n                    ]\n                }\n            ],\n            // showRootNode:false,\n            render: \"#treeContainer\"\n        });\n\n        tree.render();\n        tree.on(\"expand\", function (e) {\n            S.log(\"expand : \" + e.target.get(\"content\"));\n            S.log(\"expandIconEl\");\n            S.log(e.target.get(\"expandIconEl\"));\n            S.log(\"iconEl\");\n            S.log(e.target.get(\"iconEl\"));\n        });\n        tree.on(\"collapse\", function (e) {\n            S.log(\"collapse : \" + e.target.get(\"content\"));\n        });\n    });"
            ]
        },
        "Tree.Node": {
            "name": "Tree.Node",
            "shortname": "Tree.Node",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tree",
            "namespace": "Tree",
            "file": "src/api/tree.js",
            "line": 129,
            "description": "普通树节点。xclass : tree-node",
            "is_constructor": 1,
            "extends": "Component.Container",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t//通过addChild添加子节点\n\trequire(['tree', 'node'], function(Tree, $){\n\t    var tree = new Tree({\n\t        content: \"淘宝网\",\n\t        expanded: true,\n\t        // showRootNode:false,  //是否显示根节点\n\t        render: \"#treeContainer\"\n\t    });\n\t    var favorates = new Tree.Node({\n\t        content: \"收藏夹\",\n\t        tree: tree\n\t    });\n\t    favorates.addChild(new Tree.Node({\n\t        content: \"收藏的宝贝\"\n\t    }));\n\t    favorates.addChild(new Tree.Node({\n\t        // 即使没有儿子也强制指定为 folder 样式\n\t        isLeaf: false,\n\t        content: \"收藏的店铺\"\n\t    }));\n\t    tree.addChild(favorates);\n\t});"
            ]
        },
        "Tree.CheckNode": {
            "name": "Tree.CheckNode",
            "shortname": "Tree.CheckNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tree",
            "namespace": "Tree",
            "file": "src/api/tree.js",
            "line": 228,
            "description": "可多选树节点。xclass:check-tree-node",
            "is_constructor": 1,
            "extends": "Tree.Node",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\trequire(['tree', 'node'], function(Tree, $){\n\t    var tree = new Tree.CheckTree({\n\t        content: \"淘宝网\",\n\t        expanded: true,\n\t        // showRootNode:false,\n\t        render: \"#treeContainer\"\n\t    });\n\t    var favorates = new Tree.CheckNode({\n\n\t        content: \"收藏夹\",\n\t        tree: tree\n\t    });\n\t    favorates.addChild(new Tree.CheckNode({\n\n\t        content: \"收藏的宝贝\"\n\t    }));\n\t    favorates.addChild(new Tree.CheckNode({\n\t        content: \"收藏的店铺\"\n\t    }));\n\n\t    tree.addChild(favorates);\n\t});"
            ]
        },
        "Tree.CheckTree": {
            "name": "Tree.CheckTree",
            "shortname": "Tree.CheckTree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tree",
            "namespace": "Tree",
            "file": "src/api/tree.js",
            "line": 271,
            "description": "多选树结构。xclass : check-tree",
            "is_constructor": 1,
            "extends": "Tree.CheckNode",
            "uses": [
                "Tree.Manager"
            ],
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\trequire(['tree', 'node'], function(Tree, $){\n\t    var tree = new Tree.CheckTree({\n\t        content: \"淘宝网\",\n\t        expanded: true,\n\t        // showRootNode:false,\n\t        render: \"#treeContainer\"\n\t    });\n\t    var favorates = new Tree.CheckNode({\n\n\t        content: \"收藏夹\",\n\t        tree: tree\n\t    });\n\t    favorates.addChild(new Tree.CheckNode({\n\n\t        content: \"收藏的宝贝\"\n\t    }));\n\t    favorates.addChild(new Tree.CheckNode({\n\t        content: \"收藏的店铺\"\n\t    }));\n\n\t    tree.addChild(favorates);\n\t});"
            ]
        },
        "Tree.Manager": {
            "name": "Tree.Manager",
            "shortname": "Tree.Manager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Tree",
                "Tree.CheckTree"
            ],
            "module": "tree",
            "namespace": "Tree",
            "file": "src/api/tree.js",
            "line": 335,
            "description": "管理树节点(Manage tree node for tree root)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "UA": {
            "name": "UA",
            "shortname": "UA",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ua",
            "namespace": "",
            "file": "src/api/ua.js",
            "line": 11,
            "description": "通过 UA 的属性，你可以获取浏览器等用户代理的信息。可以首先使用 UA.shell 返回的标识符判断当前浏览器类型，若需浏览器具体版本信息，可以再通过 UA[UA.shell] 取出版本号。属性值遵循以下规则：\n  \n   - 表示当前引擎或浏览器的版本。版本号 1.2.3.4 会转换为数值 1.234\n   - 如果不是当前引擎或浏览器，返回 0 或者 undefined\n   - 如果当前浏览器版本号无法准确判定，均返回 0.1\n  \n示例：\n\t\n\trequire(['ua'], function(UA){\n\t\t//use UA\n\t})",
            "static": 1
        },
        "Url": {
            "name": "Url",
            "shortname": "Url",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "url",
            "namespace": "",
            "file": "src/api/url.js",
            "line": 6,
            "description": "操作url\n使用示例：\n\t\n\trequire(['url'], function(Url){\n\t\tvar websiteUrl = 'http://modulex.github.io/5.0/api/classes/Path.html?test=iamtestcontent&date=2014.09.10#method_resolve';\n\t\tvar urlDataObj = Url.parse(websiteUrl); \n\t\t// 得到的urlDataObj如下：\n\t\t// {\n\t\t//  auth: undefined\n\t\t// \thash: \"#method_resolve\"\n\t\t// \thost: \"modulex.github.io\"\n\t\t// \thostname: \"modulex.github.io\"\n\t\t// \thref: \"http://modulex.github.io/5.0/api/classes/Path.html?test=iamtestcontent&date=2014.09.10#method_resolve\"\n\t\t// \tpath: \"/5.0/api/classes/Path.html?test=iamtestcontent&date=2014.09.10\"\n\t\t// \tpathname: \"/5.0/api/classes/Path.html\"\n\t\t// \tport: undefined\n\t\t// \tprotocol: \"http:\"\n\t\t// \tquery: \"test=iamtestcontent&date=2014.09.10\"\n\t\t// \tsearch: \"?test=iamtestcontent&date=2014.09.10\"\n\t\t// \tslashes: true\n\t\t// }\n\n\t\turlDataObj.search = undefined;\n\t\turlDataObj.query = {\n\t\t\tname : 'weekeight',\n\t\t\tlove : 'kissy'\n\t\t};\n\n\t\tvar newUrl = Url.format(urlDataObj);  //得到的newUrl是 http://modulex.github.io/5.0/api/classes/Path.html?name=weekeight&love=kissy#method_resolve\n\n\t})",
            "static": 1
        },
        "Util": {
            "name": "Util",
            "shortname": "Util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "namespace": "",
            "file": "src/api/util.js",
            "line": 6,
            "description": "是underscore风格的工具集，提供一些常用的工具函数",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "src/api/combobox/multi-word.js",
            "line": 35,
            "description": "默认 false. 是否允许多个值的输入",
            "itemtype": "attribute",
            "name": "multiple",
            "type": "Boolean",
            "default": "false",
            "class": "ComboBoxMultiWord",
            "module": "combobox/multi-word"
        },
        {
            "file": "src/api/combobox/multi-word.js",
            "line": 41,
            "description": "当允许多个值输入时，分割多个值的分隔符",
            "itemtype": "attribute",
            "name": "separator",
            "type": "String",
            "default": "\",;\"",
            "class": "ComboBoxMultiWord",
            "module": "combobox/multi-word"
        },
        {
            "file": "src/api/combobox/multi-word.js",
            "line": 47,
            "description": "默认 “suffix”. 可取枚举值（”prefix”,”suffix”）. 表示分隔符在最前面( @xx 模式)还是在最后面(gmail 模式).",
            "itemtype": "attribute",
            "name": "separatorType",
            "type": "String",
            "class": "ComboBoxMultiWord",
            "module": "combobox/multi-word"
        },
        {
            "file": "src/api/combobox/multi-word.js",
            "line": 52,
            "description": "默认 false. 自动补全菜单是否和光标对齐.",
            "itemtype": "attribute",
            "name": "alignWithCursor",
            "type": "Boolean",
            "default": "false",
            "class": "ComboBoxMultiWord",
            "module": "combobox/multi-word"
        },
        {
            "file": "src/api/combobox/multi-word.js",
            "line": 58,
            "description": "默认 \" 在该字符内的所有字符（包括分隔符）都算作普通字符.",
            "itemtype": "attribute",
            "name": "literal",
            "type": "String",
            "default": "'\"'",
            "class": "ComboBoxMultiWord",
            "module": "combobox/multi-word"
        },
        {
            "file": "src/api/component/extension/align.js",
            "line": 14,
            "description": "设置组件根节点对齐",
            "itemtype": "method",
            "name": "align",
            "params": [
                {
                    "name": "node",
                    "description": "对齐的参考元素",
                    "type": "String|KISSY.Node|HTMLDOMNode"
                },
                {
                    "name": "points",
                    "description": "对齐的参考位置",
                    "type": "Array<String>"
                },
                {
                    "name": "offset",
                    "description": "相对对齐元素的偏移",
                    "type": "Array<Number>"
                },
                {
                    "name": "overflow",
                    "description": "超出可视区域后如何处理",
                    "type": "Object"
                }
            ],
            "class": "Component.Extension.Align",
            "module": "component/extension/align",
            "namespace": "Component.Extension"
        },
        {
            "file": "src/api/component/extension/align.js",
            "line": 23,
            "description": "将组件根节点放在当前视窗中央",
            "itemtype": "method",
            "name": "center",
            "class": "Component.Extension.Align",
            "module": "component/extension/align",
            "namespace": "Component.Extension"
        },
        {
            "file": "src/api/component/extension/align.js",
            "line": 28,
            "description": "可选, 组件节点对齐的相关配置, 例如：\n```\n{\n    node: null,         // 类型选择器字符串, 对齐参考元素;falsy值则为可视区域;若在子组件里使用，不设置node则默认是父组件\n    points: ['tr','tl'], // 类型字符串数组, 表示 overlay 的 tl 与参考节点的 tr 对齐\n    offset: [0, 0],      // 类型整数数组, 表示 overlay 最终位置与经 node 和 points 计算后位置的偏移,\n                        // 数组第一个元素表示 x 轴偏移, 第二个元素表示 y 轴偏移.\n    overflow:{\n        adjustX:1, // 当对象不能处于可显示区域时，自动调整横坐标\n        adjustY:1 // 当对象不能处于可显示区域时，自动调整纵坐标\n    }\n}\n```\npoints 字符串数组元素的取值范围为 t,b,c 与 l,r,c 的两两组合, 分别表示 top,bottom,center 与 left,right,center 的两两组合, 可以表示 9 种取值范围\n第一个字符取值 t,b,c , 第二个字符取值 l,r,c. 如下图所示\n\n![alt text](/5.0/api/assets/img/project-img/align.png)",
            "itemtype": "attribute",
            "name": "align",
            "type": "Object",
            "class": "Component.Extension.Align",
            "module": "component/extension/align",
            "namespace": "Component.Extension"
        },
        {
            "file": "src/api/component/extension/content-box.js",
            "line": 12,
            "description": "组件的内层节点",
            "itemtype": "attribute",
            "name": "contentEl",
            "type": "KISSY.Node",
            "class": "Component.Extension.ContentBox",
            "module": "component/extension/content-box",
            "namespace": "Component.Extension"
        },
        {
            "file": "src/api/component/extension/shim.js",
            "line": 13,
            "description": "在IE6下默认为 true，其他默认为 false",
            "itemtype": "attribute",
            "name": "shim",
            "type": "Boolean",
            "class": "Component.Extension.Shim",
            "module": "component/extension/shim",
            "namespace": "Component.Extension"
        },
        {
            "file": "src/api/component/container.js",
            "line": 14,
            "description": "可选，当前组件的子组件数组",
            "itemtype": "attribute",
            "name": "children",
            "type": "Control[]",
            "class": "Component.Container",
            "module": "component/container",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/container.js",
            "line": 20,
            "description": "添加一个指定的组件作为当前组件的子组件",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "c",
                    "description": "要添加的子组件实例或者子组件的对象描述",
                    "type": "Control|Object"
                },
                {
                    "name": "index",
                    "description": "子组件的索引，可选。从 0 开始，新子组件被插入时的索引。如果未指定，新组件将会被插入在最后",
                    "optional": true
                }
            ],
            "class": "Component.Container",
            "module": "component/container",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/container.js",
            "line": 27,
            "description": "返回所给索引对应的子组件，如果索引超出返回，则返回 null",
            "itemtype": "method",
            "name": "getChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "从 0 开始的索引",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "所给索引对应的子组件对象。如果不存在则返回 null",
                "type": "Control"
            },
            "class": "Component.Container",
            "module": "component/container",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/container.js",
            "line": 34,
            "description": "从当前组件中移除所给子组件，并返回这个子组件对象。\n如果 destroy 是 true，调用要移除的组件的 destroy() 方法，随后从 DOM 文档中移除子组件的 DOM。否则，清除子组件 DOM 的工作就要由调用者做。",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "c",
                    "description": "要添加的子组件实例或者子组件的对象描述",
                    "type": "Control|Object"
                },
                {
                    "name": "destroy",
                    "description": "默认为 true, 在移除的子组件上调用 destroy()方法",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "Component.Container",
            "module": "component/container",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/container.js",
            "line": 42,
            "description": "移除所有包含的子组件",
            "itemtype": "method",
            "name": "removeChildren",
            "params": [
                {
                    "name": "destroy",
                    "description": "默认为 true, 在移除的子组件上调用 destroy()方法",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "Component.Container",
            "module": "component/container",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 16,
            "description": "可选，附加给组件根节点的属性键值对",
            "itemtype": "attribute",
            "name": "elAttrs",
            "type": "Object",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 21,
            "description": "可选，组件根节点的渲染到该节点之前",
            "itemtype": "attribute",
            "name": "elBefore",
            "type": "KISSY.Node",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 27,
            "description": "可选，附加给组件根节点的样式类",
            "itemtype": "attribute",
            "name": "elCls",
            "type": "String",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 33,
            "description": "可选，附加给组件根节点的内联样式",
            "itemtype": "attribute",
            "name": "elStyle",
            "type": "Object",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 39,
            "description": "可选，该组件是否初始获得焦点",
            "itemtype": "attribute",
            "name": "focused",
            "type": "Boolean",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 45,
            "description": "可选，组件的高度，单位像素",
            "itemtype": "attribute",
            "name": "height",
            "type": "Number",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 51,
            "description": "可选，该组件的父组件",
            "itemtype": "attribute",
            "name": "parent",
            "type": "Control",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 56,
            "description": "可选，默认 “ks-” . 组件的 css 样式类前缀 . 例如假设组件为 menu ，则该组件内的样式类名为 {prefixCls}menu，默认为 “ks-menu”.可用于实现自定义皮肤",
            "itemtype": "attribute",
            "name": "prefixCls",
            "type": "String",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 61,
            "description": "可选，组件 prefix 的超类。只在config中使用。当超类未被指定时，用这个做超类",
            "itemtype": "attribute",
            "name": "prefixXClass",
            "type": "String",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 66,
            "description": "组件要应用的节点。默认 S.all(“body”)，组件根节点的渲染为该节点最后一个节点",
            "itemtype": "attribute",
            "name": "render",
            "type": "KISSY.Node",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 71,
            "description": "可选，组件从页面中已存在的该节点中渲染而来.srcNode 时设置其他属性不起作用，属性通通在 html 标签中指定，并且 html 标签必须包含完整结构，例如 content 节点必须存在",
            "itemtype": "attribute",
            "name": "srcNode",
            "type": "KISSY.Node",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 76,
            "description": "默认 true ，是否显示.只是为组件的根节点添加/删除 {prefix}{component}-hidden 形式的 css class，自行指定具体的 css 样式",
            "itemtype": "attribute",
            "name": "visible",
            "default": "true",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 82,
            "description": "可选，组件的宽度，单位像素",
            "itemtype": "attribute",
            "name": "width",
            "type": "Number",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 87,
            "description": "只读属性，组件结构是否已经创建",
            "itemtype": "attribute",
            "name": "created",
            "type": "Boolean",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 92,
            "description": "只读属性，组件是否已经渲染",
            "itemtype": "attribute",
            "name": "rendered",
            "type": "Boolean",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 97,
            "description": "组件是否已经激活",
            "itemtype": "attribute",
            "name": "active",
            "type": "Boolean",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 102,
            "description": "设置的 content 属性",
            "itemtype": "attribute",
            "name": "content",
            "type": "String|KISSY.Node",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 107,
            "description": "该组件是否禁用状态",
            "itemtype": "attribute",
            "name": "disabled",
            "type": "Boolean",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 112,
            "description": "只读属性，该组件的根节点. 注意调用 render() 后才可以取得",
            "itemtype": "attribute",
            "name": "el",
            "type": "KISSY.Node",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 118,
            "description": "组件的高",
            "itemtype": "attribute",
            "name": "height",
            "type": "Number",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 123,
            "description": "该组件是否处于高亮状态",
            "itemtype": "attribute",
            "name": "highlighted",
            "type": "Boolean",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 128,
            "description": "标记当前实例是 Control 的实例",
            "itemtype": "attribute",
            "name": "isControl",
            "type": "Boolean",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 134,
            "description": "横轴位置",
            "itemtype": "attribute",
            "name": "x",
            "type": "Number",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 139,
            "description": "纵轴位置",
            "itemtype": "attribute",
            "name": "y",
            "type": "Number",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 144,
            "description": "横纵轴位置",
            "itemtype": "attribute",
            "name": "xy",
            "type": "Number[]",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 149,
            "description": "z-index 值",
            "itemtype": "attribute",
            "name": "zIndex",
            "type": "Number",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 155,
            "description": "创建当前组件的DOM结构，control将会代理给render",
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "自身"
            },
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 161,
            "description": "把当前组件的DOM结构放入 DOM 文档中，并绑定事件，同步属性",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "自身"
            },
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 167,
            "description": "同步属性值.组件基类增加 sync 函数，调用后可调用父类、扩展类、插件对应的 syncUI 方法",
            "itemtype": "method",
            "name": "sync",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 172,
            "description": "隐藏组件",
            "itemtype": "method",
            "name": "hide",
            "return": {
                "description": "自身"
            },
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 178,
            "description": "显示组件",
            "itemtype": "method",
            "name": "show",
            "return": {
                "description": "自身"
            },
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 184,
            "description": "移动到(x,y)",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "x",
                    "description": "横轴位置",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "纵轴位置",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "自身"
            },
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 192,
            "description": "使组件失去焦点",
            "itemtype": "method",
            "name": "blur",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 197,
            "description": "使组件获得焦点",
            "itemtype": "method",
            "name": "focus",
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 202,
            "description": "当组件内部事件绑定完之后触发",
            "itemtype": "event",
            "name": "afterBindUI",
            "params": [
                {
                    "name": "e",
                    "description": "KISSY CustomEvent 对象",
                    "type": "Object"
                }
            ],
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 208,
            "description": "当组件根节点创建的时候触发",
            "itemtype": "event",
            "name": "afterCreateDom",
            "params": [
                {
                    "name": "e",
                    "description": "KISSY CustomEvent 对象",
                    "type": "Object"
                }
            ],
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 214,
            "description": "当组件根节点渲染到 DOM 文档后触发",
            "itemtype": "event",
            "name": "afterRenderUI",
            "params": [
                {
                    "name": "e",
                    "description": "KISSY CustomEvent 对象",
                    "type": "Object"
                }
            ],
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 220,
            "description": "当组件内部的状态同步完之后触发",
            "itemtype": "event",
            "name": "afterSyncUI",
            "params": [
                {
                    "name": "e",
                    "description": "KISSY CustomEvent 对象",
                    "type": "Object"
                }
            ],
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 226,
            "description": "在组件内部事件绑定前触发",
            "itemtype": "event",
            "name": "beforeBindUI",
            "params": [
                {
                    "name": "e",
                    "description": "KISSY CustomEvent 对象",
                    "type": "Object"
                }
            ],
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 232,
            "description": "在组件根节点创建前触发",
            "itemtype": "event",
            "name": "beforeCreateDom",
            "params": [
                {
                    "name": "e",
                    "description": "KISSY CustomEvent 对象",
                    "type": "Object"
                }
            ],
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 238,
            "description": "在组件根节点渲染之前触发",
            "itemtype": "event",
            "name": "beforeRenderUI",
            "params": [
                {
                    "name": "e",
                    "description": "KISSY CustomEvent 对象",
                    "type": "Object"
                }
            ],
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 244,
            "description": "在同步组件内部状态前触发",
            "itemtype": "event",
            "name": "beforeSyncUI",
            "params": [
                {
                    "name": "e",
                    "description": "KISSY CustomEvent 对象",
                    "type": "Object"
                }
            ],
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 250,
            "description": "在组件 show 的时候触发",
            "itemtype": "event",
            "name": "show",
            "params": [
                {
                    "name": "e",
                    "description": "KISSY CustomEvent 对象",
                    "type": "Object"
                }
            ],
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 256,
            "description": "在组件 hide 的时候触发",
            "itemtype": "event",
            "name": "hide",
            "params": [
                {
                    "name": "e",
                    "description": "KISSY CustomEvent 对象",
                    "type": "Object"
                }
            ],
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/component/control.js",
            "line": 262,
            "description": "在组件 visible 属性发生变化时触发",
            "itemtype": "event",
            "name": "beforeVisibleChange",
            "params": [
                {
                    "name": "e",
                    "description": "KISSY CustomEvent 对象",
                    "type": "Object"
                }
            ],
            "class": "Component.Control",
            "module": "component/control",
            "namespace": "Component"
        },
        {
            "file": "src/api/dd/plugin/constrain.js",
            "line": 37,
            "description": "- 取值选择器字符串时, 则在限制拖动范围为根据该选择器字符串取到的第一个节点所在区域.\n- 取 KISSY.Node 时，则限制拖动范围为该节点所在区域.\n- 取值 true 时, 只能在当前视窗范围内拖动.\n- 取值 false 时, 可任意移动, 例如以扩充了该组件的 dialog 为例",
            "itemtype": "attribute",
            "name": "constrain",
            "type": "Boolean | String | KISSY.Node",
            "class": "DD.Plugin.Constrain",
            "module": "dd/plugin/constrain",
            "namespace": "DD.Plugin"
        },
        {
            "file": "src/api/dd/plugin/proxy.js",
            "line": 25,
            "description": "当 Draggable 对象需要代理节点时通过调用该函数产生代理节点, 函数的参数为当前 Draggable 对象, 返回值类型为 KISSY.Node . 即代理节点和当前节点保持一致,该属性有默认值,如下：\n```\nfunction(drag) {\n    return new Node(drag.get(\"node\")[0].cloneNode(true));\n}\n```",
            "itemtype": "attribute",
            "name": "node",
            "type": "Function",
            "class": "DD.Plugin.Proxy",
            "module": "dd/plugin/proxy",
            "namespace": "DD.Plugin"
        },
        {
            "file": "src/api/dd/plugin/proxy.js",
            "line": 35,
            "description": "默认 false. 指明是否代理节点需要每次拖放前 dragstart 生成, 拖放后 dragend 销毁. 用于多 Draggable 对象共享一个 Proxy 对象实例, 且要求代理节点和单个 Draggable 对象关联, 或者一个 DraggableDelegate 对象共享一个 Proxy 对象实例",
            "itemtype": "attribute",
            "name": "destroyOnEnd",
            "type": "Boolean",
            "default": "false",
            "class": "DD.Plugin.Proxy",
            "module": "dd/plugin/proxy",
            "namespace": "DD.Plugin"
        },
        {
            "file": "src/api/dd/plugin/proxy.js",
            "line": 41,
            "description": "默认 true. 当拖放结束时，是否移动源节点到代理节点的位置.",
            "itemtype": "attribute",
            "name": "moveOnEnd",
            "type": "Boolean",
            "default": "true",
            "class": "DD.Plugin.Proxy",
            "module": "dd/plugin/proxy",
            "namespace": "DD.Plugin"
        },
        {
            "file": "src/api/dd/plugin/proxy.js",
            "line": 47,
            "description": "默认 false. 拖放时是否隐藏源节点",
            "itemtype": "attribute",
            "name": "hideNodeOnDrag",
            "type": "Boolean",
            "default": "false",
            "class": "DD.Plugin.Proxy",
            "module": "dd/plugin/proxy",
            "namespace": "DD.Plugin"
        },
        {
            "file": "src/api/dd/plugin/scroll.js",
            "line": 13,
            "description": "自动滚动容器, 随其内的可拖放节点自动滚动.",
            "itemtype": "attribute",
            "name": "node",
            "type": "String | HTMLElement | window",
            "class": "DD.Plugin.Scroll",
            "module": "dd/plugin/scroll",
            "namespace": "DD.Plugin"
        },
        {
            "file": "src/api/dd/plugin/scroll.js",
            "line": 18,
            "description": "长度为 2, 默认值 [10,10] . 表示容器自动滚动的速度, 数组元素 1 表示横向滚动的速度, 数组元素 2 表示纵向滚动的速度.",
            "itemtype": "attribute",
            "name": "rate",
            "type": "Number[]",
            "class": "DD.Plugin.Scroll",
            "module": "dd/plugin/scroll",
            "namespace": "DD.Plugin"
        },
        {
            "file": "src/api/dd/plugin/scroll.js",
            "line": 23,
            "description": "长度为 2, 默认值 [20,20] . 当鼠标进入容器内边缘区域时开始自动滚动. 数组元素 1 表示横向容器内边缘宽度, 数组元素 2 表示纵向容器内边缘宽度.",
            "itemtype": "attribute",
            "name": "diff",
            "type": "Number[]",
            "class": "DD.Plugin.Scroll",
            "module": "dd/plugin/scroll",
            "namespace": "DD.Plugin"
        },
        {
            "file": "src/api/event-dom/gesture/basic.js",
            "line": 27,
            "description": "手势开始事件",
            "itemtype": "event",
            "name": "START",
            "class": "GestureBasic",
            "module": "event-dom/gesture/basic"
        },
        {
            "file": "src/api/event-dom/gesture/basic.js",
            "line": 32,
            "description": "手势进行事件",
            "itemtype": "event",
            "name": "MOVE",
            "class": "GestureBasic",
            "module": "event-dom/gesture/basic"
        },
        {
            "file": "src/api/event-dom/gesture/basic.js",
            "line": 37,
            "description": "手势结束事件",
            "itemtype": "event",
            "name": "END",
            "class": "GestureBasic",
            "module": "event-dom/gesture/basic"
        },
        {
            "file": "src/api/event-dom/gesture/edge-pan.js",
            "line": 33,
            "description": "在边缘区域往窗口中心区域开始拖进时触发\n返回的事件对象包括格外下面的属性：\n- pageX {Number} 鼠标横坐标位置\n- pageY {Number} 鼠标纵坐标位置\n- distance {Number} 当前鼠标位置与开始事件时位置的距离\n- duration {Number} 从开始事件到目前的时间\n- velocityX {Number} 横坐标速率\n- velocityY {Number} 纵坐标速率\n- direction {String} 方向 ： left/right/up/down",
            "itemtype": "event",
            "name": "EDGE_PAN_START",
            "class": "GestureEdgePan",
            "module": "event-dom/gesture/edge-pan"
        },
        {
            "file": "src/api/event-dom/gesture/edge-pan.js",
            "line": 46,
            "description": "在边缘区域往窗口中心区域拖进中时触发，如果已经超过边缘区域也会一直触发直到放开鼠标\n返回的事件对象包括格外下面的属性：\n- pageX {Number} 鼠标横坐标位置\n- pageY {Number} 鼠标纵坐标位置\n- distance {Number} 当前鼠标位置与开始事件时位置的距离\n- duration {Number} 从开始事件到目前的时间\n- velocityX {Number} 横坐标速率\n- velocityY {Number} 纵坐标速率\n- direction {String} 方向 ： left/right/up/down",
            "itemtype": "event",
            "name": "EDGE_PAN",
            "class": "GestureEdgePan",
            "module": "event-dom/gesture/edge-pan"
        },
        {
            "file": "src/api/event-dom/gesture/edge-pan.js",
            "line": 59,
            "description": "在边缘区域往窗口中心区域拖进，放开鼠标时触发，如果已经超过边缘区域也会一直触发直到放开鼠标\n返回的事件对象包括格外下面的属性：\n- pageX {Number} 鼠标横坐标位置\n- pageY {Number} 鼠标纵坐标位置\n- distance {Number} 当前鼠标位置与开始事件时位置的距离\n- duration {Number} 从开始事件到目前的时间\n- velocityX {Number} 横坐标速率\n- velocityY {Number} 纵坐标速率\n- direction {String} 方向 ： left/right/up/down",
            "itemtype": "event",
            "name": "EDGE_PAN_END",
            "class": "GestureEdgePan",
            "module": "event-dom/gesture/edge-pan"
        },
        {
            "file": "src/api/event-dom/gesture/pan.js",
            "line": 27,
            "description": "开始拖动某个 dom 元素时触发\n返回的事件对象包括格外下面的属性：\n- deltaX {Number} 当前触点位置与开始拖动时的位置的横坐标差值\n- deltaX {Number} 当前触点位置与开始拖动时的位置的纵坐标差值\n- startTime {Number} 拖动开始时间\n- gestureType {String} 'mouse'或'touch'\n- direction {String} 方向 ： left/right/up/down",
            "itemtype": "event",
            "name": "PAN_START",
            "class": "GesturePan",
            "module": "event-dom/gesture/pan"
        },
        {
            "file": "src/api/event-dom/gesture/pan.js",
            "line": 38,
            "description": "拖动某个 dom 元素进行时触发\n返回的事件对象包括格外下面的属性：\n- pageX {Number} 触点横坐标\n- pageY {Number} 触点纵坐标\n- deltaX {Number} 当前触点位置与开始拖动时的位置的横坐标差值\n- deltaX {Number} 当前触点位置与开始拖动时的位置的纵坐标差值\n- startTime {Number} 拖动开始时间\n- gestureType {String} 'mouse'或'touch'\n- direction {String} 方向 ： left/right/up/down",
            "itemtype": "event",
            "name": "PAN",
            "class": "GesturePan",
            "module": "event-dom/gesture/pan"
        },
        {
            "file": "src/api/event-dom/gesture/pan.js",
            "line": 51,
            "description": "拖动某个 dom 元素结束后触发\n返回的事件对象包括格外下面的属性：\n- pageX {Number} 触点横坐标\n- pageY {Number} 触点纵坐标\n- deltaX {Number} 当前触点位置与开始拖动时的位置的横坐标差值\n- deltaX {Number} 当前触点位置与开始拖动时的位置的纵坐标差值\n- startTime {Number} 拖动开始时间\n- gestureType {String} 'mouse'或'touch'\n- direction {String} 方向 ： left/right/up/down",
            "itemtype": "event",
            "name": "PAN_END",
            "class": "GesturePan",
            "module": "event-dom/gesture/pan"
        },
        {
            "file": "src/api/event-dom/gesture/pinch.js",
            "line": 27,
            "description": "触屏上开始用双指调整某个 dom 元素大小时触发\n返回的事件对象包括格外下面的属性：\n- distance {Number} 开始时双指的绝对距离\n- scale {Number} 固定为 1",
            "itemtype": "event",
            "name": "PINCH_START",
            "class": "GesturePinch",
            "module": "event-dom/gesture/pinch"
        },
        {
            "file": "src/api/event-dom/gesture/pinch.js",
            "line": 35,
            "description": "触屏上用双指调整某个 dom 元素大小进行时触发\n返回的事件对象包括格外下面的属性：\n- distance {Number} 开始时双指的绝对距离\n- scale {Number} 固定为 1",
            "itemtype": "event",
            "name": "PINCH",
            "class": "GesturePinch",
            "module": "event-dom/gesture/pinch"
        },
        {
            "file": "src/api/event-dom/gesture/pinch.js",
            "line": 43,
            "description": "触屏上用双指调整某个 dom 元素大小结束后触发",
            "itemtype": "event",
            "name": "PINCH_END",
            "class": "GesturePinch",
            "module": "event-dom/gesture/pinch"
        },
        {
            "file": "src/api/event-dom/gesture/rotate.js",
            "line": 27,
            "description": "触屏上开始用双指旋转某个 dom 元素大小时触发\n返回的事件对象包括格外下面的属性：\n- angle {Number} 开始时双指的角度值\n- rotation {Number} 双指和开始相比改变的角度值",
            "itemtype": "event",
            "name": "ROTATE_START",
            "class": "GestureRotate",
            "module": "event-dom/gesture/rotate"
        },
        {
            "file": "src/api/event-dom/gesture/rotate.js",
            "line": 35,
            "description": "触屏上用双指旋转某个 dom 元素大小进行时触发\n返回的事件对象包括格外下面的属性：\n- angle {Number} 开始时双指的角度值\n- rotation {Number} 双指和开始相比改变的角度值",
            "itemtype": "event",
            "name": "ROTATE",
            "class": "GestureRotate",
            "module": "event-dom/gesture/rotate"
        },
        {
            "file": "src/api/event-dom/gesture/rotate.js",
            "line": 43,
            "description": "触屏上用双指旋转某个 dom 元素大小结束后触发",
            "itemtype": "event",
            "name": "ROTATE_END",
            "class": "GestureRotate",
            "module": "event-dom/gesture/rotate"
        },
        {
            "file": "src/api/event-dom/gesture/shake.js",
            "line": 20,
            "description": "当用户摇动设备后触发",
            "itemtype": "event",
            "name": "SHAKE",
            "class": "GestureShake",
            "module": "event-dom/gesture/shake"
        },
        {
            "file": "src/api/event-dom/gesture/swipe.js",
            "line": 20,
            "description": "当用户在屏幕上“有效”滑动时触发（足够短的时间内滑动足够的距离）\n返回的事件对象包含格外属性：\n- pageX {Number} 触点横坐标\n- pageY {Number} 触点纵坐标\n- direction {String} : 滑动方向 ： left/right/up/down\n- distance {Number} : 滑动距离\n- duration {Number} : 滑动时间，单位 ： 秒",
            "itemtype": "event",
            "name": "SWIPE",
            "class": "GestureSwipe",
            "module": "event-dom/gesture/swipe"
        },
        {
            "file": "src/api/event-dom/gesture/tap.js",
            "line": 20,
            "description": "当点击某个 dom 节点后触发， 和 SINGLE_TAP 的不同的是： 触发 DOUBLE_TAP 就不会触发 SINGLE_TAP， 而触发 DOUBLE_TAP 前会触发 TAP",
            "itemtype": "event",
            "name": "TAP",
            "class": "GestureTap",
            "module": "event-dom/gesture/tap"
        },
        {
            "file": "src/api/event-dom/gesture/tap.js",
            "line": 25,
            "description": "当快速点击某个 dom 节点一次（短时间没有再次点击）后触发",
            "itemtype": "event",
            "name": "SINGLE_TAP",
            "class": "GestureTap",
            "module": "event-dom/gesture/tap"
        },
        {
            "file": "src/api/event-dom/gesture/tap.js",
            "line": 30,
            "description": "当快速点击某个 dom 节点两次后触发",
            "itemtype": "event",
            "name": "DOUBLE_TAP",
            "class": "GestureTap",
            "module": "event-dom/gesture/tap"
        },
        {
            "file": "src/api/event-dom/gesture/tap.js",
            "line": 35,
            "description": "当长按某个 dom 节点超过 1s 后触发",
            "itemtype": "event",
            "name": "HOLD",
            "class": "GestureTap",
            "module": "event-dom/gesture/tap"
        },
        {
            "file": "src/api/navigation-view/bar.js",
            "line": 48,
            "description": "对应的 navigationView",
            "itemtype": "attribute",
            "name": "navigationView",
            "type": "NavigationView",
            "class": "NavigationViewBar",
            "module": "navigation-view/bar"
        },
        {
            "file": "src/api/navigation-view/bar.js",
            "line": 53,
            "description": "是否带有返回按钮",
            "itemtype": "attribute",
            "name": "withBackButton",
            "type": "Boolean",
            "default": "true",
            "class": "NavigationViewBar",
            "module": "navigation-view/bar"
        },
        {
            "file": "src/api/navigation-view/bar.js",
            "line": 59,
            "description": "返回按钮的文本内容",
            "itemtype": "attribute",
            "name": "backText",
            "type": "String",
            "default": "'Back'",
            "class": "NavigationViewBar",
            "module": "navigation-view/bar"
        },
        {
            "file": "src/api/navigation-view/bar.js",
            "line": 65,
            "description": "是否能聚焦。聚焦时会在组件根节点添加class : {prefixCls}navigation-bar-focused",
            "itemtype": "attribute",
            "name": "focusable",
            "type": "Boolean",
            "default": "false",
            "class": "NavigationViewBar",
            "module": "navigation-view/bar"
        },
        {
            "file": "src/api/navigation-view/bar.js",
            "line": 71,
            "description": "是否允许在视图内选取文本",
            "itemtype": "attribute",
            "name": "allowTextSelection",
            "type": "Boolean",
            "default": "true",
            "class": "NavigationViewBar",
            "module": "navigation-view/bar"
        },
        {
            "file": "src/api/navigation-view/bar.js",
            "line": 77,
            "description": "是否显示标题",
            "itemtype": "attribute",
            "name": "withTitle",
            "type": "Boolean",
            "default": "true",
            "class": "NavigationViewBar",
            "module": "navigation-view/bar"
        },
        {
            "file": "src/api/navigation-view/bar.js",
            "line": 83,
            "description": "当返回上一个视图时触发返回事件。例如点击了返回按钮，浏览器后退等",
            "itemtype": "event",
            "name": "backward",
            "class": "NavigationViewBar",
            "module": "navigation-view/bar"
        },
        {
            "file": "src/api/navigation-view/bar.js",
            "line": 88,
            "description": "标题节点",
            "itemtype": "attribute",
            "name": "titleEl",
            "type": "Node",
            "class": "NavigationViewBar",
            "module": "navigation-view/bar"
        },
        {
            "file": "src/api/navigation-view/bar.js",
            "line": 93,
            "description": "内容节点",
            "itemtype": "attribute",
            "name": "contentEl",
            "type": "Node",
            "class": "NavigationViewBar",
            "module": "navigation-view/bar"
        },
        {
            "file": "src/api/navigation-view/bar.js",
            "line": 98,
            "description": "工具栏居中的节点",
            "itemtype": "attribute",
            "name": "centerEl",
            "type": "Node",
            "class": "NavigationViewBar",
            "module": "navigation-view/bar"
        },
        {
            "file": "src/api/navigation-view/bar.js",
            "line": 103,
            "description": "标题内容",
            "itemtype": "attribute",
            "name": "title",
            "type": "String",
            "class": "NavigationViewBar",
            "module": "navigation-view/bar"
        },
        {
            "file": "src/api/resizable/plugin/proxy.js",
            "line": 40,
            "description": "当 Resizable 对象需要代理节点时通过调用该函数产生代理节点, 函数的参数为当前 Resizable 对象, 返回值类型为 KISSY.Node . 该属性有默认值:\n```\nfunction(resizable) {\n    return new Node(resizable.get(\"node\")[0].cloneNode(true));\n}\n```\n\n即代理节点和当前节点保持一致.",
            "itemtype": "attribute",
            "name": "node",
            "type": "Function",
            "class": "Resizable.Plugin.Proxy",
            "module": "resizable/plugin/proxy",
            "namespace": "Resizable.Plugin"
        },
        {
            "file": "src/api/resizable/plugin/proxy.js",
            "line": 52,
            "description": "默认 false. 指明在 resize 之后是否销毁代理节点",
            "itemtype": "attribute",
            "name": "destroyOnEnd",
            "type": "Boolean",
            "default": "false",
            "class": "Resizable.Plugin.Proxy",
            "module": "resizable/plugin/proxy",
            "namespace": "Resizable.Plugin"
        },
        {
            "file": "src/api/resizable/plugin/proxy.js",
            "line": 58,
            "description": "默认 false. 是否在用代理节点 resize 时隐藏原节点",
            "itemtype": "attribute",
            "name": "hideNodeOnResize",
            "type": "Boolean",
            "default": "false",
            "class": "Resizable.Plugin.Proxy",
            "module": "resizable/plugin/proxy",
            "namespace": "Resizable.Plugin"
        },
        {
            "file": "src/api/scroll-view/plugin/pull-to-refresh.js",
            "line": 53,
            "description": "下拉时提示内容",
            "itemtype": "attribute",
            "name": "pullingDownHtml",
            "type": "String",
            "default": "\"Pull down to refresh...\"",
            "class": "ScrollView.Plugin.PullToRefresh",
            "module": "scroll-view/plugin/pull-to-refresh",
            "namespace": "ScrollView.Plugin"
        },
        {
            "file": "src/api/scroll-view/plugin/pull-to-refresh.js",
            "line": 59,
            "description": "下拉释放操作的提示内容",
            "itemtype": "attribute",
            "name": "releasingDownHtml",
            "type": "String",
            "default": "\"release to refresh...\"",
            "class": "ScrollView.Plugin.PullToRefresh",
            "module": "scroll-view/plugin/pull-to-refresh",
            "namespace": "ScrollView.Plugin"
        },
        {
            "file": "src/api/scroll-view/plugin/pull-to-refresh.js",
            "line": 65,
            "description": "下拉加载内容时的提示内容",
            "itemtype": "attribute",
            "name": "loadingDownHtml",
            "type": "String",
            "default": "\"loading...\"",
            "class": "ScrollView.Plugin.PullToRefresh",
            "module": "scroll-view/plugin/pull-to-refresh",
            "namespace": "ScrollView.Plugin"
        },
        {
            "file": "src/api/scroll-view/plugin/pull-to-refresh.js",
            "line": 71,
            "description": "下拉加载内容的具体函数实现，自行实现，如果不给出，则无操作，只完成动画。\n组件内部会给pullDownLoadFn函数传入参数callback,callback参数在是组件内部传进来的，在加载完事之后执行这个callback即可",
            "itemtype": "attribute",
            "name": "pullDownLoadFn",
            "type": "Function",
            "class": "ScrollView.Plugin.PullToRefresh",
            "module": "scroll-view/plugin/pull-to-refresh",
            "namespace": "ScrollView.Plugin"
        },
        {
            "file": "src/api/scroll-view/plugin/pull-to-refresh.js",
            "line": 77,
            "description": "下拉时提示内容",
            "itemtype": "attribute",
            "name": "pullingUpHtml",
            "type": "String",
            "default": "\"Pull down to refresh...\"",
            "class": "ScrollView.Plugin.PullToRefresh",
            "module": "scroll-view/plugin/pull-to-refresh",
            "namespace": "ScrollView.Plugin"
        },
        {
            "file": "src/api/scroll-view/plugin/pull-to-refresh.js",
            "line": 83,
            "description": "下拉释放操作的提示内容",
            "itemtype": "attribute",
            "name": "releasingUpHtml",
            "type": "String",
            "default": "\"release to refresh...\"",
            "class": "ScrollView.Plugin.PullToRefresh",
            "module": "scroll-view/plugin/pull-to-refresh",
            "namespace": "ScrollView.Plugin"
        },
        {
            "file": "src/api/scroll-view/plugin/pull-to-refresh.js",
            "line": 89,
            "description": "下拉加载内容时的提示内容",
            "itemtype": "attribute",
            "name": "loadingUpHtml",
            "type": "String",
            "default": "\"loading...\"",
            "class": "ScrollView.Plugin.PullToRefresh",
            "module": "scroll-view/plugin/pull-to-refresh",
            "namespace": "ScrollView.Plugin"
        },
        {
            "file": "src/api/scroll-view/plugin/pull-to-refresh.js",
            "line": 95,
            "description": "下拉加载内容的具体函数实现，自行实现，如果不给出，则无操作，只完成动画。\n组件内部会给pullUpLoadFn函数传入参数callback,callback参数在是组件内部传进来的，在加载完事之后执行这个callback即可",
            "itemtype": "attribute",
            "name": "pullUpLoadFn",
            "type": "Function",
            "class": "ScrollView.Plugin.PullToRefresh",
            "module": "scroll-view/plugin/pull-to-refresh",
            "namespace": "ScrollView.Plugin"
        },
        {
            "file": "src/api/scroll-view/plugin/scrollbar.js",
            "line": 29,
            "description": "滚动条的最小长度",
            "itemtype": "attribute",
            "name": "minLength",
            "type": "Number",
            "class": "ScrollView.Plugin.ScrollBar",
            "module": "scroll-view/plugin/scrollbar",
            "namespace": "ScrollView.Plugin"
        },
        {
            "file": "src/api/scroll-view/plugin/scrollbar.js",
            "line": 34,
            "description": "是否自动隐藏横向滚动条",
            "itemtype": "attribute",
            "name": "autoHideX",
            "type": "Boolean",
            "class": "ScrollView.Plugin.ScrollBar",
            "module": "scroll-view/plugin/scrollbar",
            "namespace": "ScrollView.Plugin"
        },
        {
            "file": "src/api/scroll-view/plugin/scrollbar.js",
            "line": 39,
            "description": "是否自动隐藏纵向滚动条",
            "itemtype": "attribute",
            "name": "autoHideY",
            "type": "Boolean",
            "class": "ScrollView.Plugin.ScrollBar",
            "module": "scroll-view/plugin/scrollbar",
            "namespace": "ScrollView.Plugin"
        },
        {
            "file": "src/api/scroll-view/base.js",
            "line": 29,
            "description": "- 当为String时，表示传入元素的选择器\n- 当为Boolean时，表示用来指定是否在滚动是将元素“折断”，就是在滚动停在元素上时如何处理。默认为 false ，不做操作，就停在那里，为true时滚动到下一个同类元素的起点，停止。",
            "itemtype": "attribute",
            "name": "snap",
            "type": "String|Boolean",
            "class": "ScrollView",
            "module": "scroll-view"
        },
        {
            "file": "src/api/scroll-view/base.js",
            "line": 35,
            "description": "“折断”操作动画持续时间，当snap为true时有效。",
            "itemtype": "attribute",
            "name": "snapDuration",
            "type": "Number",
            "default": "0.3",
            "class": "ScrollView",
            "module": "scroll-view"
        },
        {
            "file": "src/api/scroll-view/base.js",
            "line": 41,
            "description": "“折断”操作动画的时间函数",
            "itemtype": "attribute",
            "name": "snapEasing",
            "type": "String",
            "default": "\"easeOut\"",
            "class": "ScrollView",
            "module": "scroll-view"
        },
        {
            "file": "src/api/scroll-view/base.js",
            "line": 48,
            "description": "滚动到指定位置",
            "itemtype": "method",
            "name": "scrollTo",
            "params": [
                {
                    "name": "cfg",
                    "description": "{left: xx, top: xx} 位置",
                    "type": "Object"
                },
                {
                    "name": "animCfg",
                    "description": "Anim的配置参数，详见 [Anim](/5.0/api/classes/Anim.html)",
                    "type": "Object"
                }
            ],
            "class": "ScrollView",
            "module": "scroll-view"
        },
        {
            "file": "src/api/scroll-view/base.js",
            "line": 55,
            "description": "滚动到指定index的page",
            "itemtype": "method",
            "name": "scrollToPage",
            "params": [
                {
                    "name": "index",
                    "description": "page索引值",
                    "type": "Number"
                },
                {
                    "name": "animCfg",
                    "description": "Anim的配置参数，详见 [Anim](/5.0/api/classes/Anim.html)",
                    "type": "Object"
                }
            ],
            "class": "ScrollView",
            "module": "scroll-view"
        },
        {
            "file": "src/api/scroll-view/base.js",
            "line": 62,
            "description": "在元素最大滚动距离和最小滚动距离范围内滚动",
            "itemtype": "method",
            "name": "scrollToWithBounds",
            "params": [
                {
                    "name": "cfg",
                    "description": "{left: xx, top: xx} 位置",
                    "type": "Object"
                },
                {
                    "name": "animCfg",
                    "description": "Anim的配置参数，详见 [Anim](/5.0/api/classes/Anim.html)",
                    "type": "Object"
                }
            ],
            "class": "ScrollView",
            "module": "scroll-view"
        },
        {
            "file": "src/api/scroll-view/base.js",
            "line": 69,
            "description": "停止动画\n停止动画队列里的函数，并清空动画队列，将滚动停在当前位置。",
            "itemtype": "method",
            "name": "stopAnimation",
            "class": "ScrollView",
            "module": "scroll-view"
        },
        {
            "file": "src/api/scroll-view/base.js",
            "line": 75,
            "description": "判断对应方向上的滚动是否允许\n横向传入 x，纵向 y",
            "itemtype": "method",
            "name": "isAxisEnabled",
            "return": {
                "description": "对应方向上是否允许",
                "type": "Boolean"
            },
            "class": "ScrollView",
            "module": "scroll-view"
        },
        {
            "file": "src/api/scroll-view/base.js",
            "line": 82,
            "description": "获得要滚动的步进长度",
            "itemtype": "method",
            "name": "getScrollStep",
            "return": {
                "description": "{top: xx, left: xx} 两个方向上的步进值",
                "type": "Object"
            },
            "class": "ScrollView",
            "module": "scroll-view"
        },
        {
            "file": "src/api/anim.js",
            "line": 16,
            "description": "单位秒。默认 1 秒.动画持续时间",
            "itemtype": "attribute",
            "name": "duration",
            "type": "Number",
            "default": "1",
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 22,
            "description": "默认 ‘easeNone’,动画平滑函数.\n可取值 “swing”, “easeNone”, “linear”, “easeIn”, “easeOut”, “easeBoth”,”easeInStrong”, “easeOutStrong”,”easeBothStrong”,”elasticIn”,”elasticOut”, “elasticBoth”,”backIn”,”backOut”,”backBoth”, “bounceIn”,”bounceOut”,”bounceBoth”, “cubic-bezier(p1x, p1y, p2x, p2y)（所有取值必须在[0,1]之间）”. 效果预览, 可以参考 [easing可视化](/5.0/examples/anim/easing.html)，[cubic-bezier可视化](/5.0/examples/anim/cubic-bezier.html)",
            "itemtype": "attribute",
            "name": "easing",
            "type": "String",
            "default": "\"easeNone\"",
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 29,
            "description": "所属队列名称. 默认undefined. 属于系统内置队列, 设置 false 则表示该动画不排队立即执行",
            "itemtype": "attribute",
            "name": "queue",
            "type": "String|false|undefined",
            "default": "undefined",
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 35,
            "description": "动画到最后一帧后的回调函数",
            "itemtype": "attribute",
            "name": "complete",
            "type": "Function",
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 40,
            "description": "是否使用css3 transition提升性能。\n在 useTransition 为 true 的时候，easing 的值必须是 w3c 规定的时间函数名称。\n具体为： ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(p1x, p1y, p2x, p2y)",
            "itemtype": "attribute",
            "name": "useTransition",
            "type": "Boolean",
            "default": "false",
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 50,
            "description": "判断当前动画对象是否在执行动画过程",
            "itemtype": "method",
            "name": "isRunning",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 55,
            "description": "判断当前动画对象是否被暂停",
            "itemtype": "method",
            "name": "isPaused",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 61,
            "description": "在动画实例上调用, 开始当前动画实例的动画",
            "itemtype": "method",
            "name": "run",
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 66,
            "description": "在动画实例上调用, 结束当前动画实例的动画",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "finish",
                    "description": "默认为false. false 时, 动画会在当前帧直接停止（不触发 complete 回调）. 为 true 时, 动画停止时会立刻跳到最后一帧（触发 complete 回调）",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 72,
            "description": "在动画实例上调用, 暂停当前动画实例的动画",
            "itemtype": "method",
            "name": "pause",
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 77,
            "description": "在动画实例上调用, 继续当前动画实例的动画",
            "itemtype": "method",
            "name": "resume",
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 82,
            "description": "Anim 的静态方法, 用于判断 elem 上是否有动画对象在执行",
            "itemtype": "method",
            "name": "isRunning",
            "static": 1,
            "params": [
                {
                    "name": "elem",
                    "description": "作用动画的元素节点",
                    "type": "HTMLElement|window"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 90,
            "description": "Anim 的静态方法, 用于判断 elem 上是否有动画对象在暂停",
            "itemtype": "method",
            "name": "isPaused",
            "static": 1,
            "params": [
                {
                    "name": "elem",
                    "description": "作用动画的元素节点",
                    "type": "HTMLElement|window"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 98,
            "description": "Anim 的静态方法, 结束某元素上的动画（集合）",
            "itemtype": "method",
            "name": "stop",
            "static": 1,
            "params": [
                {
                    "name": "elem",
                    "description": "作用动画的元素节点",
                    "type": "HTMLElement|window"
                },
                {
                    "name": "end",
                    "description": "此参数同实例方法 [stop](#method_stop) 中的 finish 参数",
                    "type": "Boolean"
                },
                {
                    "name": "clearQueue=false",
                    "description": "默认为 false, 是否清除动画队列中余下的动画",
                    "type": "Boolean"
                },
                {
                    "name": "queueName",
                    "description": "队列名字。设置 queueName 后, 表示结束元素上指定队列中的所有动画：\n- null 表示默认队列的动画\n- false 表示不排队的动画\n- string 类型表示指定名称的队列的动画\n- 不设置时, 表示结束所有队列中的所有动画",
                    "type": "String"
                }
            ],
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 112,
            "description": "Anim 的静态方法, 暂停某元素上的动画（集合）",
            "itemtype": "method",
            "name": "pause",
            "static": 1,
            "params": [
                {
                    "name": "elem",
                    "description": "作用动画的元素节点",
                    "type": "HTMLElement|window"
                },
                {
                    "name": "queueName",
                    "description": "队列名字。设置 queueName 后, 表示暂停元素上指定队列中的所有动画：\n- null 表示默认队列的动画\n- false 表示不排队的动画\n- string 类型表示指定名称的队列的动画\n- 不设置时, 表示暂停所有队列中的所有动画",
                    "type": "String"
                }
            ],
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 124,
            "description": "Anim 的静态方法, 继续某元素上的动画（集合）",
            "itemtype": "method",
            "name": "resume",
            "static": 1,
            "params": [
                {
                    "name": "elem",
                    "description": "作用动画的元素节点",
                    "type": "HTMLElement|window"
                },
                {
                    "name": "queueName",
                    "description": "队列名字。设置 queueName 后, 表示继续元素上指定队列中的所有动画：\n- null 表示默认队列的动画\n- false 表示不排队的动画\n- string 类型表示指定名称的队列的动画\n- 不设置时, 表示继续所有队列中的所有动画",
                    "type": "String"
                }
            ],
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/anim.js",
            "line": 136,
            "description": "动画结束后, 触发该事件",
            "itemtype": "event",
            "name": "complete",
            "class": "Anim",
            "module": "anim"
        },
        {
            "file": "src/api/attribute.js",
            "line": 13,
            "description": "给宿主对象增加一个属性",
            "itemtype": "method",
            "name": "addAttr",
            "params": [
                {
                    "name": "name",
                    "description": "属性名",
                    "type": "String"
                },
                {
                    "name": "attrConfig",
                    "description": "属性配置信息, 支持下面的配置项:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "属性默认值。注意默认值请不要设置为复杂对象（通过自定义构造器 new 出来的），复杂对象可设置 valueFn 返回.如果配置项中没有设置 value, 会调用 valueFn 函数获取默认值并赋给 value",
                            "type": "String|Number"
                        },
                        {
                            "name": "valueFn",
                            "description": "提供属性默认值的函数，传入对象内部对应的属性值和属性名，取该函数的返回值作为最终值给用户",
                            "type": "Function"
                        },
                        {
                            "name": "setter",
                            "description": "写属性时的处理函数，传入从 set() 参数得到的属性值和属性名，如果返回非 undefined 则作为新的属性设置值",
                            "type": "Function"
                        },
                        {
                            "name": "getter",
                            "description": "读属性时的处理函数",
                            "type": "Function"
                        },
                        {
                            "name": "validator",
                            "description": "写属性时的验证函数，传入从 set() 参数得到的属性值和属性名，返回 false 则不改变该属性值",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "class": "Attribute",
            "module": "attribute"
        },
        {
            "file": "src/api/attribute.js",
            "line": 25,
            "description": "批量添加属性",
            "itemtype": "method",
            "name": "addAttrs",
            "params": [
                {
                    "name": "attrConfigs",
                    "description": "属性名/配置信息对",
                    "type": "Object"
                },
                {
                    "name": "values",
                    "description": "属性名/值对, 批量设置当前对象的属性值",
                    "type": "Object"
                }
            ],
            "class": "Attribute",
            "module": "attribute"
        },
        {
            "file": "src/api/attribute.js",
            "line": 32,
            "description": "判断是否有名为 name 的属性",
            "itemtype": "method",
            "name": "hasAttr",
            "params": [
                {
                    "name": "name",
                    "description": "属性名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Attribute",
            "module": "attribute"
        },
        {
            "file": "src/api/attribute.js",
            "line": 39,
            "description": "删除名为 name 的属性",
            "itemtype": "method",
            "name": "removeAttr",
            "params": [
                {
                    "name": "name",
                    "description": "属性名",
                    "type": "String"
                }
            ],
            "class": "Attribute",
            "module": "attribute"
        },
        {
            "file": "src/api/attribute.js",
            "line": 45,
            "description": "设置属性 name 的值为 value",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "name",
                    "description": "属性名.也可以为 “x.y” 形式，此时要求 x 属性为包含 y 属性的普通 Object，这时会设置 x 属性值的 y 属性.但只会触发 x 的相关 change 事件",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "属性的值",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "控制对象，包括以下控制选项",
                    "type": "Object",
                    "props": [
                        {
                            "name": "silent=false",
                            "description": "默认 false , 是否触发 change 系列事件",
                            "type": "Boolean"
                        },
                        {
                            "name": "error",
                            "description": "验证失败的回调，包括失败原因",
                            "type": "Function"
                        },
                        {
                            "name": "force",
                            "description": "是否强制触发 change 事件，默认值为 false，当值发生变化时才触发",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "return": {
                "description": "该次属性设置是否生效（是否通过了 validator 验证）",
                "type": "Boolean"
            },
            "class": "Attribute",
            "module": "attribute"
        },
        {
            "file": "src/api/attribute.js",
            "line": 57,
            "description": "获取属性 name 的值",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "属性名.也可以为 “x.y” 形式. 此时要求 x 属性为包含 y 属性的普通 Object.当没有设置属性值时, 会取该属性的默认值",
                    "type": "String"
                }
            ],
            "class": "Attribute",
            "module": "attribute"
        },
        {
            "file": "src/api/attribute.js",
            "line": 63,
            "description": "获取目前实例的所有属性键值对集合",
            "itemtype": "method",
            "name": "getAttrVals",
            "return": {
                "description": "属性键值对集合",
                "type": "Object"
            },
            "class": "Attribute",
            "module": "attribute"
        },
        {
            "file": "src/api/attribute.js",
            "line": 69,
            "description": "重置属性 name 为初始值. (调用一次 set() )",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "name",
                    "description": "属性",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "控制对象，包括以下控制选项",
                    "type": "Object",
                    "props": [
                        {
                            "name": "silent=false",
                            "description": "默认 false , 是否触发 change 系列事件",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "Attribute",
            "module": "attribute"
        },
        {
            "file": "src/api/attribute.js",
            "line": 77,
            "description": "将所有属性全部重置为初始值. (调用一次 set() )",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "opts",
                    "description": "控制对象，包括以下控制选项",
                    "type": "Object",
                    "props": [
                        {
                            "name": "silent=false",
                            "description": "默认 false , 是否触发 change 系列事件",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "Attribute",
            "module": "attribute"
        },
        {
            "file": "src/api/attribute.js",
            "line": 84,
            "description": "名为 “attrName” 的属性, 在改变它的值之前触发该事件",
            "itemtype": "event",
            "name": "beforeAttrNameChange",
            "params": [
                {
                    "name": "e",
                    "description": "回调函数传入的对象",
                    "type": "Object",
                    "props": [
                        {
                            "name": "newVal",
                            "description": "将要改变到的属性值"
                        },
                        {
                            "name": "prevVal",
                            "description": "当前的属性值"
                        },
                        {
                            "name": "attrName",
                            "description": "当前的属性名，例如 “x”",
                            "type": "String"
                        },
                        {
                            "name": "subAttrName",
                            "description": "当前的完整属性名，例如 “x.y”",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Attribute",
            "module": "attribute"
        },
        {
            "file": "src/api/attribute.js",
            "line": 94,
            "description": "名为 “attrName” 的属性, 在改变它的值之后触发该事件",
            "itemtype": "event",
            "name": "afterAttrNameChange",
            "params": [
                {
                    "name": "e",
                    "description": "回调函数传入的对象",
                    "type": "Object",
                    "props": [
                        {
                            "name": "newVal",
                            "description": "当前的属性值"
                        },
                        {
                            "name": "prevVal",
                            "description": "当前改变前的属性值"
                        },
                        {
                            "name": "attrName",
                            "description": "当前的属性名，例如 “x”",
                            "type": "String"
                        },
                        {
                            "name": "subAttrName",
                            "description": "当前的完整属性名，例如 “x.y”",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Attribute",
            "module": "attribute"
        },
        {
            "file": "src/api/attribute.js",
            "line": 104,
            "description": "每调用 [set()](/5.0/api/classes/Attribute.html#method_set) 一次后就触发一次该事件",
            "itemtype": "event",
            "name": "*Change",
            "params": [
                {
                    "name": "e",
                    "description": "回调函数传入的对象",
                    "type": "Object",
                    "props": [
                        {
                            "name": "newVal",
                            "description": "本次 set 导致的属性当前值集合"
                        },
                        {
                            "name": "prevVal",
                            "description": "本次 set 导致的属性在 set 前的值集合"
                        },
                        {
                            "name": "attrName",
                            "description": "本次 set 导致改变的属性名集合",
                            "type": "String"
                        },
                        {
                            "name": "subAttrName",
                            "description": "本次 set 导致的属性全名集合",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Attribute",
            "module": "attribute"
        },
        {
            "file": "src/api/base.js",
            "line": 57,
            "description": "配置组件的事件绑定,例如:\n```\n{\n    listeners:{\n        customEvent:function(e){\n            alert(e.type); // => \"customEvent\"\n        }\n    }\n}\n\nor\n\n{\n    listeners:{\n        customEvent:{\n            fn:function(e){\n                // e.type // => customEvent\n                // this.xx => 1\n            },\n            context:{xx:1}\n        }\n    }\n}\n```",
            "itemtype": "attribute",
            "name": "listeners",
            "type": "Object",
            "class": "Base",
            "module": "base"
        },
        {
            "file": "src/api/base.js",
            "line": 85,
            "description": "插件构造器数组或插件对象数组. 例如\n```\n{\n    plugins: [ Plugin1,Plugin2 ]\n}\n\n// or\n\n{\n    plugins: [new Plugin1(cfg),new Plugin2(cfg)]\n}\n```",
            "itemtype": "attribute",
            "name": "plugins",
            "type": "Function[]|Object[]",
            "class": "Base",
            "module": "base"
        },
        {
            "file": "src/api/base.js",
            "line": 102,
            "description": "从当前类上扩展出一个子类",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "extensions",
                    "description": "扩展类数组",
                    "type": "Function[]",
                    "optional": true
                },
                {
                    "name": "methodDesc",
                    "description": "方法集合键值对",
                    "type": "Object"
                },
                {
                    "name": "staticAttributes",
                    "description": "放到新产生组件类上的静态属性集合键值对，其中 ATTRS 属性特殊对待",
                    "type": "Object"
                },
                {
                    "name": "desc",
                    "description": "类元信息",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "类名",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Base",
            "module": "base"
        },
        {
            "file": "src/api/base.js",
            "line": 112,
            "description": "调用父类的对应方法，如果没有，则返回undefined",
            "itemtype": "method",
            "name": "callSuper",
            "example": [
                "\n```\nrequire(['base'], function(Base) {\n    var A = Base.extend({\n        m: function (value) {\n            return 'am:' + value;\n        },\n        m2: function (value) {\n            return 'am2:' + value;\n        }\n    });\n\n    var B = A.extend({\n        m: function(value) {\n            return 'bm:(' + this.callSuper(value) + ')';\n        },\n        m2: function(value) {\n            return 'bm2(' + this.callSuper.apply(this, arguments) + ')';\n        }\n    });\n\n    var b = new B();\n    console.log(b.m(1));\n    console.log(b.m2(2));\n});\n```"
            ],
            "class": "Base",
            "module": "base"
        },
        {
            "file": "src/api/base.js",
            "line": 143,
            "description": "安装指定插件",
            "itemtype": "method",
            "name": "plug",
            "params": [
                {
                    "name": "plugin",
                    "description": "指定的插件构造器或者插件对象",
                    "type": "Function|Object"
                }
            ],
            "return": {
                "description": "自身"
            },
            "example": [
                "\n```\nrequire(['overlay', 'component/plugin/resize'],function(Overlay,Resize){\n    new Overlay({\n        content:'test'\n    }).plug(new Resize({\n        handlers:['t','t']\n    }));\n});\n```"
            ],
            "class": "Base",
            "module": "base"
        },
        {
            "file": "src/api/base.js",
            "line": 160,
            "description": "卸载指定插件",
            "itemtype": "method",
            "name": "unplug",
            "params": [
                {
                    "name": "plugin",
                    "description": "指定的插件构造器或者插件对象",
                    "type": "Function|Object"
                }
            ],
            "return": {
                "description": "自身"
            },
            "example": [
                "\n```\nrequire(['overlay','component/plugin/resize'],function(Overlay,Resize){\n    var o= new Overlay({\n        content:'test'\n    }).plug(new Resize({\n        handlers:['t','t']\n    }));\n\n    o.unplug('component/plugin/resize'); // 卸载 resize 插件\n});\n```"
            ],
            "class": "Base",
            "module": "base"
        },
        {
            "file": "src/api/base.js",
            "line": 179,
            "description": "根据指定的 id 获取对应的plugin实例",
            "itemtype": "method",
            "name": "getPlugin",
            "params": [
                {
                    "name": "id",
                    "description": "plugin实例的id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "对应的plugin实例"
            },
            "example": [
                "\n```\ndialog.getPlugin('component/plugin/drag')\n   .getPlugin('dd/plugin/constrain')\n   .set('constrain', false);\n```"
            ],
            "class": "Base",
            "module": "base"
        },
        {
            "file": "src/api/base.js",
            "line": 192,
            "description": "销毁实例",
            "itemtype": "method",
            "name": "destroy",
            "class": "Base",
            "module": "base"
        },
        {
            "file": "src/api/button.js",
            "line": 25,
            "description": "按钮是否 toggle button",
            "itemtype": "attribute",
            "name": "checkable",
            "type": "Boolean",
            "class": "Button",
            "module": "button"
        },
        {
            "file": "src/api/button.js",
            "line": 30,
            "description": "可选，按钮节点的 aria-describedby 属性值",
            "itemtype": "attribute",
            "name": "describedby",
            "type": "String",
            "optional": 1,
            "class": "Button",
            "module": "button"
        },
        {
            "file": "src/api/button.js",
            "line": 37,
            "description": "按钮的显示内容",
            "itemtype": "attribute",
            "name": "content",
            "type": "String",
            "class": "Button",
            "module": "button"
        },
        {
            "file": "src/api/button.js",
            "line": 42,
            "description": "按钮是否是 checked 状态",
            "itemtype": "attribute",
            "name": "checked",
            "type": "Boolean",
            "class": "Button",
            "module": "button"
        },
        {
            "file": "src/api/button.js",
            "line": 47,
            "description": "按钮值",
            "itemtype": "attribute",
            "name": "value",
            "type": "String",
            "class": "Button",
            "module": "button"
        },
        {
            "file": "src/api/button.js",
            "line": 52,
            "description": "按钮节点的 title 属性值",
            "itemtype": "attribute",
            "name": "tooltip",
            "type": "String",
            "class": "Button",
            "module": "button"
        },
        {
            "file": "src/api/button.js",
            "line": 57,
            "description": "当按钮被点击或被获得焦点后按键 enter|space 触发",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "e",
                    "description": "触发事件对象，类型 Event.Object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "触发事件的按钮实例",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Button",
            "module": "button"
        },
        {
            "file": "src/api/color.js",
            "line": 13,
            "description": "alpha 值",
            "itemtype": "attribute",
            "name": "a",
            "type": "Number",
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 18,
            "description": "red 值",
            "itemtype": "attribute",
            "name": "r",
            "type": "Number",
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 23,
            "description": "green 值",
            "itemtype": "attribute",
            "name": "g",
            "type": "Number",
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 28,
            "description": "blue 值",
            "itemtype": "attribute",
            "name": "b",
            "type": "Number",
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 33,
            "description": "得到当前颜色属性对应的 hsl 表示",
            "itemtype": "method",
            "name": "getHSL",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 39,
            "description": "得到当前颜色属性对应的 hsl 表示字符串",
            "itemtype": "method",
            "name": "toHSL",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 45,
            "description": "得到当前颜色属性对应的 hsla 表示字符串",
            "itemtype": "method",
            "name": "toHSLA",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 51,
            "description": "得到当前颜色属性对应的 rgb 表示字符串",
            "itemtype": "method",
            "name": "toRGB",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 57,
            "description": "得到当前颜色属性对应的 rgba 表示字符串",
            "itemtype": "method",
            "name": "toRGBA",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 63,
            "description": "得到当前颜色属性对应的 16 进制表示字符串",
            "itemtype": "method",
            "name": "toHex",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 69,
            "description": "得到当前颜色属性对应的 hsv 表示",
            "itemtype": "method",
            "name": "getHSV",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 75,
            "description": "根据 hsv 对象修改当前颜色实例",
            "itemtype": "method",
            "name": "setHSV",
            "params": [
                {
                    "name": "hsv",
                    "description": "hsv 对象",
                    "type": "Object"
                }
            ],
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 81,
            "description": "根据 hsl 对象修改当前颜色实例",
            "itemtype": "method",
            "name": "setHSL",
            "params": [
                {
                    "name": "hsv",
                    "description": "hsl 对象",
                    "type": "Object"
                }
            ],
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 87,
            "description": "从字符串表示的颜色值中获取颜色对象",
            "itemtype": "method",
            "name": "parse",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "支持格式： ‘#rrggbb’ ‘#rgb’ or ‘rgb(r,g,b)’ ‘rgba(r,g,b,a)’",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/color.js",
            "line": 95,
            "description": "从 hsl 对象中生成颜色实例",
            "itemtype": "method",
            "name": "fromHSL",
            "static": 1,
            "params": [
                {
                    "name": "cfg",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Color",
            "module": "color"
        },
        {
            "file": "src/api/combobox.js",
            "line": 38,
            "description": "默认 true. 是否显示下拉按钮",
            "itemtype": "attribute",
            "name": "hasTrigger",
            "default": "true",
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 44,
            "description": "默认无. 输入框的提示信息",
            "itemtype": "attribute",
            "name": "placeholder",
            "type": "String",
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 49,
            "description": "数据源配置\n例如静态数据源的配置:\n```\n{\n    dataSource : new ComboBox.LocalDataSource({\n                    data:[\"abc\",\"123\"]\n                })\n} \n```",
            "itemtype": "attribute",
            "name": "dataSource",
            "type": "ComboBox.LocalDataSource|ComboBox.RemoteDataSource",
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 62,
            "description": "最多可显示的下拉菜单个数",
            "itemtype": "attribute",
            "name": "maxItemCount",
            "type": "Number",
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 67,
            "description": "是否下拉菜单和自动补全框宽度一致。默认 true.",
            "itemtype": "attribute",
            "name": "matchWidth",
            "type": "Boolean",
            "default": "true",
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 73,
            "description": "可选。自定义下拉菜单属性的函数，传入参数 query(自动补全框当前值) , data(匹配数据数组)。 返回对象数组，其中对象的 content 属性表示菜单项显示内容，textContent 表示放入到自动补全框的内容，disabled 表示当前项是否被禁用.\n例如高亮的处理:\n```\n{\n    format:function(query, data){\n        var ret = [];\n        for (var i = 0; i < data.length; i++) {\n            ret[i] = {\n                content:(data[i] + \"\")\n                        .replace(new RegExp(S.escapeRegExp(query), \"g\"),\n                        \"<b>$&</b>\")\n            };\n        }\n        return ret;\n    }\n}\n```",
            "itemtype": "attribute",
            "name": "format",
            "type": "Function",
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 94,
            "description": "默认 true. 上下键是否导致高亮项填充入自动补全框",
            "itemtype": "attribute",
            "name": "updateInputOnDownUp",
            "type": "Boolean",
            "default": "true",
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 100,
            "description": "默认 false. 是否当自动补全菜单出现时高亮第一项",
            "example": [
                "\n```\nrequire(['node', 'combobox'], function ($, ComboBox) {\n    var data = [\"a123456\", \"b12345\", \"c3464356\", \"d23434\"];\n\n    var basicComboBox = new ComboBox({\n        width:100,\n        srcNode:$(\"#combobox\"),\n        // 初始就聚焦\n        focused:true,\n        hasTrigger:false,\n        dataSource:new ComboBox.LocalDataSource({\n            data:data\n        })\n    });\n    basicComboBox.render();\n\n    // 得到焦点时展示全部\n    basicComboBox.get(\"input\").on(\"focus\", function () {\n        basicComboBox.sendRequest('');\n    });\n}\n```"
            ],
            "itemtype": "attribute",
            "name": "autoHighlightFirst",
            "default": "false",
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 129,
            "description": "关联的复合输入框",
            "itemtype": "attribute",
            "name": "input",
            "type": "KISSY.Node",
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 134,
            "description": "自动补全菜单的配置（在显示后转换为实例）或实例",
            "itemtype": "attribute",
            "name": "menu",
            "type": "ComboBox.Menu|Object",
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 139,
            "description": "自动补全菜单是否已经收起",
            "itemtype": "attribute",
            "name": "collapsed",
            "type": "Boolean",
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 144,
            "description": "根据 value 自动补全并显示下拉菜单",
            "itemtype": "method",
            "name": "sendRequest",
            "params": [
                {
                    "name": "value",
                    "description": "自动补全的值",
                    "type": "String"
                }
            ],
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 150,
            "description": "当用户选择自动补全下拉框内的项时触发",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "e.target",
                    "description": "选择的下拉菜单项",
                    "type": "MenuItem"
                }
            ],
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 156,
            "description": "当下拉菜单显示或收起时触发",
            "itemtype": "event",
            "name": "afterCollapsedChange",
            "params": [
                {
                    "name": "e.NewVal",
                    "description": "当前下拉菜单是否是收起状态",
                    "type": "Boolean"
                }
            ],
            "class": "ComboBox",
            "module": "combobox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 198,
            "description": "静态数据数组",
            "itemtype": "attribute",
            "name": "data",
            "type": "Object[]",
            "class": "ComboBox.LocalDataSource",
            "module": "combobox",
            "namespace": "ComboBox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 203,
            "description": "可选. 如何根据用户输入对数据进行过滤。默认为\n```\nfunction parser(inputVal, data) {\n    var ret = [],\n        count = 0;\n\n    if (!inputVal) {\n        return data;\n    }\n\n    S.each(data, function (d) {\n        if (d.indexOf(inputVal) != -1) {\n            ret.push(d);\n        }\n        count++;\n    });\n\n    return ret;\n}\n\n```",
            "itemtype": "attribute",
            "name": "parse",
            "type": "Function",
            "class": "ComboBox.LocalDataSource",
            "module": "combobox",
            "namespace": "ComboBox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 272,
            "description": "用户输入发送到后端的参数名，默认 ‘q’",
            "itemtype": "attribute",
            "name": "paramName",
            "type": "String",
            "default": "'q'",
            "class": "ComboBox.RemoteDataSource",
            "module": "combobox",
            "namespace": "ComboBox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 278,
            "description": "可选. 如何根据用户输入对后台返回数据进行过滤。默认\n```\nfunction parser(\n    // 用户输入\n    inputVal,\n    // 服务器返回数据\n    data) {\n    return data;\n}\n```",
            "itemtype": "attribute",
            "name": "parse",
            "type": "Function",
            "class": "ComboBox.RemoteDataSource",
            "module": "combobox",
            "namespace": "ComboBox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 292,
            "description": "默认 false. 用户输入为空时是否发请求",
            "itemtype": "attribute",
            "name": "allowEmpty",
            "type": "Boolean",
            "default": "false",
            "class": "ComboBox.RemoteDataSource",
            "module": "combobox",
            "namespace": "ComboBox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 298,
            "description": "默认 false. 是否缓存服务器端数据",
            "itemtype": "attribute",
            "name": "cache",
            "type": "Boolean",
            "default": "false",
            "class": "ComboBox.RemoteDataSource",
            "module": "combobox",
            "namespace": "ComboBox"
        },
        {
            "file": "src/api/combobox.js",
            "line": 304,
            "description": "传递给 IO 的其他参数",
            "itemtype": "attribute",
            "name": "xhrCfg",
            "type": "Object",
            "class": "ComboBox.RemoteDataSource",
            "module": "combobox",
            "namespace": "ComboBox"
        },
        {
            "file": "src/api/cookie.js",
            "line": 16,
            "description": "获取cookie值",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "cookie的名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Cookie",
            "module": "cookie"
        },
        {
            "file": "src/api/cookie.js",
            "line": 24,
            "description": "置空cookie值，并立刻过期",
            "itemtype": "method",
            "name": "remove",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "cookie的名称",
                    "type": "String"
                },
                {
                    "name": "domain",
                    "description": "域",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "路径",
                    "type": "String"
                },
                {
                    "name": "secure",
                    "description": "安全标志",
                    "type": "Boolean"
                }
            ],
            "class": "Cookie",
            "module": "cookie"
        },
        {
            "file": "src/api/cookie.js",
            "line": 34,
            "description": "设置cookie值",
            "itemtype": "method",
            "name": "set",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "cookie的名称",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "cookie的值",
                    "type": "String"
                },
                {
                    "name": "expires",
                    "description": "失效时间. number 类型时单位为天，不设置表示生效时间为本次浏览器进程",
                    "type": "Number|Date"
                },
                {
                    "name": "domain",
                    "description": "域",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "路径",
                    "type": "String"
                },
                {
                    "name": "secure",
                    "description": "安全标志",
                    "type": "Boolean"
                }
            ],
            "class": "Cookie",
            "module": "cookie"
        },
        {
            "file": "src/api/date-picker.js",
            "line": 14,
            "description": "一个过滤函数，用于判断日期是否可以被选择（出发select事件），返回true说明当前循环中的日期不可用，返回false说明当前循环中的日期可用\n\n- current {GregorianCalendar} 时间对象，在当前日历页要显示出来的日期对应的日历对象\n- value {GregorianCalendar} 时间对象，当前被选中的日期的GregorianCalendar时间对象。初始化Date.Picker时默认是代码运行当前时刻的GregorianCalendar时间对象，但选择日期后会被选中的日期的GregorianCalendar时间对象\n\n```\ndisabledDate: function (current, value) {\n\tvar date = new Date();\n\treturn current.getDayOfMonth() < date.getDay();  //表示在当前日期之前的日期都不能被选择\n}\n```",
            "itemtype": "attribute",
            "name": "disabledDate",
            "type": "Function",
            "class": "DatePicker",
            "module": "date-picker"
        },
        {
            "file": "src/api/date-picker.js",
            "line": 32,
            "description": "是否显示每一行日期所在一年中的第几周(weekOfYear)的数字形式.显示为true，反之为false",
            "itemtype": "attribute",
            "name": "showWeekNumber",
            "type": "Boolean",
            "default": "true",
            "class": "DatePicker",
            "module": "date-picker"
        },
        {
            "file": "src/api/date-picker.js",
            "line": 38,
            "description": "是否显示今天.显示为true，反之为false。需要和 showClear 一起设置相同才生效",
            "itemtype": "attribute",
            "name": "showToday",
            "type": "Boolean",
            "default": "true",
            "class": "DatePicker",
            "module": "date-picker"
        },
        {
            "file": "src/api/date-picker.js",
            "line": 44,
            "description": "指定每个日期单元的渲染方式，返回的 html 字符串将渲染在对应的日期单元上面。函数接受两个参数\n\n- current {GregorianCalendar} 时间对象，在当前日历页要显示出来的日期对应的日历对象\n- value {GregorianCalendar} 时间对象，当前被选中的日期的GregorianCalendar时间对象。默认是代码运行当前时刻的GregorianCalendar时间对象",
            "itemtype": "attribute",
            "name": "dateRender",
            "type": "Function",
            "class": "DatePicker",
            "module": "date-picker"
        },
        {
            "file": "src/api/date-picker.js",
            "line": 53,
            "description": "locale 信息",
            "itemtype": "attribute",
            "name": "locale",
            "type": "Object",
            "class": "DatePicker",
            "module": "date-picker"
        },
        {
            "file": "src/api/date-picker.js",
            "line": 58,
            "description": "是否显示清除按钮，默认 true。需要和 showToday 一起设置相同才生效",
            "itemtype": "attribute",
            "name": "showClear",
            "type": "Boolean",
            "class": "DatePicker",
            "module": "date-picker"
        },
        {
            "file": "src/api/date-picker.js",
            "line": 63,
            "description": "当选择时触发的事件\n\n- e {CustomEventObject} 自定义事件对象\n- e.value {GregorianCalendar} 时间对象",
            "itemtype": "event",
            "name": "select",
            "example": [
                "\n```\npicker.on('select', function (e) {\n    var value = e.value;\n    if (value) {\n        result.html(DateFormat.getDateInstance(DateFormat.Style.FULL).format(value));\n    } else {\n        result.html('null');\n    }\n});\n```"
            ],
            "class": "DatePicker",
            "module": "date-picker"
        },
        {
            "file": "src/api/date-picker.js",
            "line": 102,
            "description": "当失去焦点是触发的事件\n\n- e {CustomEventObject} 自定义事件对象\n- e.value {GregorianCalendar} 时间对象",
            "itemtype": "event",
            "name": "blur",
            "example": [
                "\n```\npicker.on('blur', function (e) {\n    picker.hide();\n});\n```"
            ],
            "class": "DatePicker.Popup",
            "module": "date-picker",
            "namespace": "DatePicker"
        },
        {
            "file": "src/api/dd.js",
            "line": 28,
            "description": "将要进行拖放的节点",
            "itemtype": "attribute",
            "name": "node",
            "type": "String|HTMLElement",
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 33,
            "description": "可拖动对象在的组。（设置后只和本组的droppable对象交互），默认值为true, 可以和所有组的 droppable 都交互。 若不需要和任何droppable 交互，为了性能，请设置 groups 为 false. 例如： {‘x’:1,’y’:1} 表示属于 x 和 y 组",
            "itemtype": "attribute",
            "name": "groups",
            "type": "Object",
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 38,
            "description": "作为鼠标在其上按下时触发节点拖放的钩子. 字符串时表示选择器字符串. 如果不设置, 则整个 node 作为触发钩子.\n#### handlers 的每个元素 DOM 节点必须位于配置项 node DOM 子树中.",
            "itemtype": "attribute",
            "name": "handlers",
            "type": "HTMLElement[]|Function[]|String[]",
            "default": "配置中的 node 设置的节点",
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 46,
            "description": "默认 false。关联元素是否随鼠标移动。（例如：resize 功能完全不需要关联元素移动）",
            "itemtype": "attribute",
            "name": "move",
            "type": "Boolean",
            "default": "false",
            "example": [
                "\nDraggable 默认实例化后仅表示会根据鼠标拖放触发 drag() 事件, 并不会导致节点移动， 通过以下设置来使得节点跟随鼠标移动：\n\n设置 move 为 true.\n```\nnew Draggable({\n    node:\"#d\",\n    move:true\n});\n```"
            ],
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 62,
            "description": "枚举值, 默认值 “point”, 和 Droppable 关联, 决定何时和可放对象开始交互(触发相应事件), 可取值 “point”,”intersect”,”strict”\n\n- 在 “point” 模式下, 鼠标进入Droppable对象区域, 即开始和可放对象交互.\n- 在 “intersect” 模式下, 只要Draggable对象和Droppable对象有交集, 即开始和可放对象交互.\n- 在 “strict” 模式下, 只有拖动对象完全位于可放对象内, 才开始和可放对象交互",
            "itemtype": "attribute",
            "name": "mode",
            "type": "String",
            "default": "'point'",
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 73,
            "description": "等于 \"point\"",
            "itemtype": "attribute",
            "name": "POINT",
            "type": "{String}",
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 79,
            "description": "等于 \"intersect\"",
            "itemtype": "attribute",
            "name": "INTERSECT",
            "type": "{String}",
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 85,
            "description": "等于 \"strict\"",
            "itemtype": "attribute",
            "name": "STRICT",
            "type": "{String}",
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 91,
            "description": "是否禁用或启用拖放功能",
            "itemtype": "attribute",
            "name": "disabled",
            "type": "Boolean",
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 97,
            "description": "只读。表示配置项中 node 代表的节点.",
            "itemtype": "attribute",
            "name": "dragNode",
            "type": "KISSY.Node",
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 103,
            "description": "当可拖放对象开始被用户拖放时触发.",
            "itemtype": "event",
            "name": "dragstart",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 110,
            "description": "当可拖放对象拖放过程中触发.",
            "itemtype": "event",
            "name": "drag",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "pageX",
                            "description": "当前鼠标的绝对横坐标.",
                            "type": "Number"
                        },
                        {
                            "name": "pageY",
                            "description": "当前鼠标的绝对纵坐标.",
                            "type": "Number"
                        },
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 119,
            "description": "当用户鼠标弹起放弃拖放时触发.",
            "itemtype": "event",
            "name": "dragend",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 126,
            "description": "当前 Draggable 对象达到一个 Droppable 对象时触发, 可简单理解成 mouseenter.",
            "itemtype": "event",
            "name": "dragenter",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "当前交互的Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 134,
            "description": "当前 Draggable 对象在一个 Droppable 实例上移动时触发, 可简单理解成 mouseover.",
            "itemtype": "event",
            "name": "dragover",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "当前交互的Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 142,
            "description": "当前 Draggable 对象离开一个 Droppable 实例上移动时触发, 可简单理解成 mouseleave. 相当于 html5 dd API targetNode 的 dragleave 事件的概念.",
            "itemtype": "event",
            "name": "dragexit",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "当前交互的Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 150,
            "description": "当前 Draggable 对象被放置在一个 Droppable 实例时触发. 相当于 html5 dd API targetNode 的 drop 事件的概念.",
            "itemtype": "event",
            "name": "dragdrophit",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "当前交互的Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 158,
            "description": "当用户鼠标弹起但是没有放置当前 Draggable 对象到一个 Droppable 对象时触发.",
            "itemtype": "event",
            "name": "dragdropmiss",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.Draggable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 187,
            "description": "可与拖动对象交互的节点.",
            "itemtype": "attribute",
            "name": "node",
            "type": "String | HTMLElement",
            "class": "DD.Droppable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 192,
            "description": "可与拖动对象交互的节点. 例如： {‘x’:1,’y’:1} 表示属于 x 和 y 组.",
            "itemtype": "attribute",
            "name": "groups",
            "type": "Object",
            "class": "DD.Droppable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 198,
            "description": "当一个 Draggable 对象根据其 Draggable.mode 配置达到和当前 Droppable 实例交互条件时触发.\n一般即鼠标进入当前 Droppable 对象代表节点的区域, 可简单理解成 mouseenter. 相当于 html5 dd API targetNode 的 dragenter 事件的概念.",
            "itemtype": "event",
            "name": "dropenter",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "当前交互的 Draggable 对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "自身, 当前Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.Droppable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 207,
            "description": "当一个 Draggable 在当前 Droppable 实例上移动时触发, 可简单理解成 mouseover. 相当于 html5 dd API targetNode 的 dragover 事件的概念.",
            "itemtype": "event",
            "name": "dropover",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "当前交互的 Draggable 对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "自身, 当前Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.Droppable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 215,
            "description": "当一个 Draggable 离开当前 Droppable 实例时触发, 可简单理解成 mouseleave. 相当于 html5 dd API targetNode 的 dragleave 事件的概念.",
            "itemtype": "event",
            "name": "dropexit",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "当前交互的 Draggable 对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "自身, 当前Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.Droppable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 223,
            "description": "当一个 Draggable 被放置在当前 Droppable 实例时触发. 相当于 html5 dd API targetNode 的 drop 事件的概念.",
            "itemtype": "event",
            "name": "drophit",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "当前交互的 Draggable 对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "自身, 当前Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.Droppable",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 254,
            "description": "从Draggable的dragstart事件冒泡过来，在 DDM 上触发",
            "itemtype": "event",
            "name": "dragstart",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.DDM",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 261,
            "description": "从Draggable的drag事件冒泡过来，在 DDM 上触发",
            "itemtype": "event",
            "name": "drag",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "pageX",
                            "description": "当前鼠标的绝对横坐标.",
                            "type": "Number"
                        },
                        {
                            "name": "pageY",
                            "description": "当前鼠标的绝对纵坐标.",
                            "type": "Number"
                        },
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.DDM",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 270,
            "description": "从Draggable的dragend事件冒泡过来，在 DDM 上触发",
            "itemtype": "event",
            "name": "dragend",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.DDM",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 277,
            "description": "从Draggable的dragenter事件冒泡过来，在 DDM 上触发",
            "itemtype": "event",
            "name": "dragenter",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "当前交互的Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.DDM",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 285,
            "description": "从Draggable的dragover事件冒泡过来，在 DDM 上触发",
            "itemtype": "event",
            "name": "dragover",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "当前交互的Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.DDM",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 293,
            "description": "从Draggable的dragexit事件冒泡过来，在 DDM 上触发",
            "itemtype": "event",
            "name": "dragexit",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "当前交互的Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.DDM",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 301,
            "description": "从Draggable的dragdrophit事件冒泡过来，在 DDM 上触发",
            "itemtype": "event",
            "name": "dragdrophit",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "当前交互的Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.DDM",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 309,
            "description": "从Draggable的dragdropmiss事件冒泡过来，在 DDM 上触发",
            "itemtype": "event",
            "name": "dragdropmiss",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "自身, 当前拖放对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.DDM",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 316,
            "description": "从Droppable的dropenter事件冒泡过来，在 DDM 上触发",
            "itemtype": "event",
            "name": "dropenter",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "当前交互的 Draggable 对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "自身, 当前Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.DDM",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 324,
            "description": "从Droppable的dropover事件冒泡过来，在 DDM 上触发",
            "itemtype": "event",
            "name": "dropover",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "当前交互的 Draggable 对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "自身, 当前Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.DDM",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 332,
            "description": "从Droppable的dropexit事件冒泡过来，在 DDM 上触发",
            "itemtype": "event",
            "name": "dropexit",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "当前交互的 Draggable 对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "自身, 当前Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.DDM",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 340,
            "description": "从Droppable的drophit事件冒泡过来，在 DDM 上触发",
            "itemtype": "event",
            "name": "drophit",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drag",
                            "description": "当前交互的 Draggable 对象.",
                            "type": "Object"
                        },
                        {
                            "name": "drop",
                            "description": "自身, 当前Droppable对象.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DD.DDM",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 369,
            "description": "用于委托的容器节点, 所有 Draggable 节点都在其内",
            "itemtype": "attribute",
            "name": "container",
            "type": "String | HTMLElement",
            "class": "DD.DraggableDelegate",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 374,
            "description": "用来获取容器内的 Draggable 节点, 格式为 tag 或 tag.cls 或 .cls",
            "itemtype": "attribute",
            "name": "selector",
            "type": "String",
            "class": "DD.DraggableDelegate",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 379,
            "description": "数组每个元素是选择器字符串, 格式为 tag 或 tag.cls 或 .cls, 作为鼠标在其上按下时触发节点拖放的钩子. 如果不设置, 则整个可拖放节点都作为触发钩子. 其中可拖放节点通过 selector 从容器 container 中取得",
            "itemtype": "attribute",
            "name": "handlers",
            "type": "Array",
            "class": "DD.DraggableDelegate",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 385,
            "description": "当前正在拖动的被委托的容器内子节点, 在应用 DD.Proxy 时表示委托节点",
            "itemtype": "attribute",
            "name": "node",
            "type": "KISSY.Node",
            "class": "DD.DraggableDelegate",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 390,
            "description": "当前正在拖动的被委托的容器内子节点",
            "itemtype": "attribute",
            "name": "dragNode",
            "type": "KISSY.Node",
            "class": "DD.DraggableDelegate",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 404,
            "description": "用于委托的容器节点, 所有 Draggable 节点都在其内",
            "itemtype": "attribute",
            "name": "container",
            "type": "String | HTMLElement",
            "class": "DD.DroppableDelegate",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 409,
            "description": "用来获取容器内的 Draggable 节点, 格式为 tag 或 tag.cls 或 .cls",
            "itemtype": "attribute",
            "name": "selector",
            "type": "String",
            "class": "DD.DroppableDelegate",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dd.js",
            "line": 414,
            "description": "当前正在拖动的被委托的容器内子节点, 在应用 DD.Proxy 时表示委托节点",
            "itemtype": "attribute",
            "name": "node",
            "type": "KISSY.Node",
            "class": "DD.DroppableDelegate",
            "module": "dd",
            "namespace": "DD"
        },
        {
            "file": "src/api/dom.js",
            "line": 12,
            "description": "获取符合选择器的所有元素",
            "itemtype": "method",
            "name": "query",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "context",
                    "description": "选择器参考上下文",
                    "type": "String|HTMLCollection|Array<HTMLElement>",
                    "optional": true,
                    "optdefault": "document"
                }
            ],
            "return": {
                "description": "符合选择器字符串的 dom 节点数组",
                "type": "Array"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 21,
            "description": "获取符合选择器的第一个元素. 相当于调用 query(selector,context)[0]",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "context",
                    "description": "选择器参考上下文",
                    "type": "String|HTMLCollection|Array<HTMLElement>",
                    "optional": true,
                    "optdefault": "document"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素",
                "type": "Object"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 30,
            "description": "获取符合选择器以及过滤参数的所有元素",
            "itemtype": "method",
            "name": "filter",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "filter",
                    "description": "过滤选择器或函数\n- 类型 string 时, 格式为 tag.cls , 其他格式需要引入模块 sizzle\n- 类型 function 时, 传入参数当前 dom 节点, 返回 true 表示保留",
                    "type": "String|Function"
                },
                {
                    "name": "context",
                    "description": "选择器参考上下文",
                    "type": "String|HTMLCollection|Array<HTMLElement>",
                    "optional": true,
                    "optdefault": "document"
                }
            ],
            "return": {
                "description": "符合选择器字符串的 dom 节点数组",
                "type": "Array"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 42,
            "description": "判断根据选择器获取的所有元素是否都符合过滤条件",
            "itemtype": "method",
            "name": "test",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "filter",
                    "description": "过滤选择器或函数,详见[DOM.filter](#method_filter)",
                    "type": "String|Function"
                },
                {
                    "name": "context",
                    "description": "选择器参考上下文",
                    "type": "String|HTMLCollection|Array<HTMLElement>",
                    "optional": true,
                    "optdefault": "document"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 52,
            "description": "获取符合选择器的第一个元素的克隆元素",
            "itemtype": "method",
            "name": "clone",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "deep",
                    "description": "是否深度克隆（克隆节点的子孙节点）",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "withDataAndEvent",
                    "description": "节点是否具备源节点的[dom.data](#method_data)属性以及[事件](#5.0/api/modules/event.html)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "deepWithDataAndEvent",
                    "description": "子孙节点是否具备源节点对应子孙节点的[dom.data](#method_data)属性以及[事件](#module_event)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素的克隆元素\n__Note__\n普通对象和普通数组请用 `KISSY.clone`",
                "type": "HTMLElement"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 65,
            "description": "判断符合选择器的所有元素中是否有某个元素含有特定 class",
            "itemtype": "method",
            "name": "hasClass",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "value",
                    "description": "样式类 class, 多个用空格分隔, 表示同时包含多个样式类",
                    "type": "String"
                }
            ],
            "return": {
                "description": "是否符合选择器的元素中存在某个元素含有特定样式类 value",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 74,
            "description": "给符合选择器的所有元素添加指定 class",
            "itemtype": "method",
            "name": "addClass",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "value",
                    "description": "样式类 class, 多个用空格分隔",
                    "type": "String"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 82,
            "description": "给符合选择器的所有元素添加指定 class",
            "itemtype": "method",
            "name": "removeClass",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "value",
                    "description": "样式类 class, 多个用空格分隔",
                    "type": "String"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 90,
            "description": "将符合选择器的所有元素的老 class 替换为新 class",
            "itemtype": "method",
            "name": "replaceClass",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "oldClassName",
                    "description": "样式类 class, 多个用空格分隔 , 需要删除的样式类",
                    "type": "String"
                },
                {
                    "name": "newClassName",
                    "description": "样式类 class, 多个用空格分隔 , 需要添加的样式类",
                    "type": "String"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 99,
            "description": "操作符合选择器的所有元素, 如果存在值为 classNames 的 class, 则移除掉, 反之添加",
            "itemtype": "method",
            "name": "toggleClass",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "classNames",
                    "description": "样式类 class, 多个用空格分隔 , 需要 toggle 的样式类",
                    "type": "String"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 107,
            "description": "移除符合选择器的所有元素的指定属性",
            "itemtype": "method",
            "name": "removeAttr",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "属性名称",
                    "type": "String"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 115,
            "description": "获取符合选择器的第一个元素的属性值",
            "itemtype": "method",
            "name": "attr",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "属性名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "对应属性名的属性值"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 124,
            "description": "给符合选择器的所有元素设置属性值",
            "itemtype": "method",
            "name": "attr",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "属性名称",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "属性值"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 133,
            "description": "给符合选择器的所有元素设置属性值",
            "itemtype": "method",
            "name": "attr",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "kv",
                    "description": "属性名与属性值的键值对",
                    "type": "Object"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 141,
            "description": "判断符合选择器的所有元素中是否有某个元素含有特定属性",
            "itemtype": "method",
            "name": "hasAttr",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "attrName",
                    "description": "属性名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 150,
            "description": "获取符合选择器的第一个元素的对应 property 值",
            "itemtype": "method",
            "name": "prop",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "property 名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "对应 property 的值\n\n__Note__\n- 对于不存在的 property , 该方法返回 undefined\n- 注意区别该方法与 dom.attr, 也即区别 [DOM property 与 attribute](http://javascript.info/tutorial/attributes-and-custom-properties)\n- 请使用 [dom.data](#method_data) 方法来处理自定义属性, 而不要使用 dom.prop 方法, 否则在 ie<9 下会有内存泄露\n- prop 方法可以改变 DOM 元素的状态而不改变其对应的序列化 html 属性 ( IE <9 除外)\n- 例如设置 input 或 button 的 disabled property 或者 checkbox 的 checked property . 最常见的情况即是用 prop 来设置 disabled 以及 checked 而不是 dom.attr . 而 dom.val 方法用来设置和读取 value property"
            },
            "example": [
                "\n```\nvar c=DOM.create(\"<input type='checkbox' checked='checked'/>\");\nDOM.attr(c,\"checked\") // => \"checked\"\nDOM.prop(c,\"checked\") // => true\nDOM.attr(c,\"nodeName\") // => null\nDOM.prop(c,\"nodeName\").toLowerCase() // => input\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 175,
            "description": "给符合选择器的所有元素设置 property 值",
            "itemtype": "method",
            "name": "prop",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "property 名称",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "property值"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 184,
            "description": "给符合选择器的所有元素设置 property 值",
            "itemtype": "method",
            "name": "prop",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "kv",
                    "description": "property 名与 property 值的键值对",
                    "type": "Object"
                }
            ],
            "example": [
                "\n__selectionStart/End 兼容__\n\n__在 ie 下对于 selectionStart/End 做了兼容处理，[demo](/5.0/examples/dom/selection-start.html)__"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 196,
            "description": "判断符合选择器的第一个元素是否含有特定 property 属性",
            "itemtype": "method",
            "name": "hasProp",
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "property 名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 204,
            "description": "获取符合选择器的第一个元素所的 value 值",
            "itemtype": "method",
            "name": "val",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "return": {
                "description": "获取符合选择器的第一个元素所的 value 值. 无值时, 返回空字符串."
            },
            "example": [
                "\n```\nrequire([\"dom\"],function(DOM){\n        // 获取 id 是 J_username 的元素的 value 值\n        DOM.val(\"#J_username\");\n});\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 219,
            "description": "给符合选择器的所有元素设置 value 值",
            "itemtype": "method",
            "name": "val",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "value",
                    "description": "将要设置的 value 值",
                    "type": "String"
                }
            ],
            "example": [
                "\n```\nrequire([\"dom\"],function(DOM){\n        // 将 id 是 J_username 的元素的 value 值设置成“张三”\n        DOM.val(\"#J_username\",\"张三\");\n});\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 234,
            "description": "获取符合选择器的第一个元素所包含的文本值",
            "itemtype": "method",
            "name": "text",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "return": {
                "description": "获取符合选择器的第一个元素所包含的文本值. 无值时, 返回空字符串."
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 242,
            "description": "给符合选择器的所有元素设置文本值.",
            "itemtype": "method",
            "name": "text",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "value",
                    "description": "将要设置的文本值\n\n__相当于 ie 下调用 innerText 以及其他浏览器下调用 textContent__",
                    "type": "String"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 252,
            "description": "获取符合选择器的第一个元素的样式值",
            "itemtype": "method",
            "name": "css",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "css 样式属性名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 261,
            "description": "给符合选择器的所有元素设置样式值",
            "itemtype": "method",
            "name": "css",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "css 样式属性名",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "将要设置的样式值",
                    "type": "String"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 270,
            "description": "给符合选择器的所有元素设置样式值",
            "itemtype": "method",
            "name": "css",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "kv",
                    "description": "样式名与样式值的键值对",
                    "type": "Object"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 278,
            "description": "获取符合选择器的第一个元素 style 属性中 name 的值",
            "itemtype": "method",
            "name": "style",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "style属性名",
                    "type": "String"
                }
            ],
            "return": {
                "description": "指定元素 style 属性中, name 的值\n__Note__\n\n请注意 style() 和 css() 在 获取元素样式值上的区别 :\n-前者获取的是元素style属性中相应的样式值, 是个字面量;\n-后者是获取元素真实渲染到页面上的样式值, 是个计算值.",
                "type": "String"
            },
            "example": [
                "\n```\nrequire(['util', 'dom'], function(Util, DOM){\n    var tag = Util.guid(\"float\");\n    DOM.addStyleSheet(\".\" + tag + \" {float:left}\")\n\n    var d = DOM.create(\"<div class='\" + tag + \"' style='float:right'><\" + \"/div>\")\n    DOM.append(d, document.body);\n    console.log(DOM.css(d, \"float\"));     // \"right\"\n    console.log(DOM.style(d, \"float\"));   // \"right\"\n\n    DOM.css(d, \"float\", \"\");\n\n    console.log(DOM.css(d, \"float\"));     // \"left\"\n    console.log(DOM.style(d, \"float\"));   // \"\"\n})\n\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 310,
            "description": "给符合选择器的所有元素, 给其 style 属性中名为 name 的样式设置值为 value.",
            "itemtype": "method",
            "name": "style",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "style属性名",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "将要设置的样式值",
                    "type": "String"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 319,
            "description": "给符合选择器的所有元素, 给其 style 属性中名为 name 的样式设置值为 value.",
            "itemtype": "method",
            "name": "style",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "kv",
                    "description": "样式名与样式值的键值对",
                    "type": "Object"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 327,
            "description": "获取符合选择器的第一个元素的宽度值",
            "itemtype": "method",
            "name": "width",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素的宽度值\n__Note__\n- 该方法获取的是元素的真实宽度, 不包含 padding, border, margin. 且始终返回像素值\n- 注意: 该方法与 [innerWidth()](#method_innerWidth) 和 [outerWidth()](#method_outerWidth) 的区别.",
                "type": "Number"
            },
            "example": [
                "\n```\n<div style=\"width: 100px;\">\n    <div id=\"test\" style=\"width: 80%; height: 20px\"></div>\n</div>\n<script>\n    var elem = S.get('#test');\n\n    DOM.style(elem, 'width'); // 返回 80%\n    DOM.css(elem, 'width'); // 返回 80px\n    DOM.css(elem, 'height'); // 返回 20px\n\n    DOM.width(elem); // 返回 80\n    DOM.height(elem); // 返回 20\n</script>\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 354,
            "description": "获取符合选择器的第一个元素的宽度值",
            "itemtype": "method",
            "name": "width",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "value",
                    "description": "宽度值",
                    "type": "String"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 362,
            "description": "获取符合选择器的第一个元素的宽度值",
            "itemtype": "method",
            "name": "height",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素的高度值",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 370,
            "description": "获取符合选择器的第一个元素的高度值",
            "itemtype": "method",
            "name": "height",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "value",
                    "description": "高度值",
                    "type": "String"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 378,
            "description": "获取符合选择器的第一个元素的宽度值, 注意: 该值包含 padding",
            "itemtype": "method",
            "name": "innerWidth",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 386,
            "description": "获取符合选择器的第一个元素的高度值, 注意: 该值包含 padding",
            "itemtype": "method",
            "name": "innerHeight",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 394,
            "description": "获取符合选择器的第一个元素的宽度值, 注意: 值除了包含元素本身宽度和 padding 外, 还包含 border或margin",
            "itemtype": "method",
            "name": "outerWidth",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "includeMargin",
                    "description": "是否包含 margin, 默认仅包含 border",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素的宽度值",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 403,
            "description": "获取符合选择器的第一个元素的高度值, 注意: 值除了包含元素本身宽度和 padding 外, 还包含 border或margin",
            "itemtype": "method",
            "name": "outerHeight",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "includeMargin",
                    "description": "是否包含 margin, 默认仅包含 border",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素的高度值",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 412,
            "description": "将 cssText 字符串作为内联样式表内容添加到文档中",
            "itemtype": "method",
            "name": "addStyleSheet",
            "static": 1,
            "params": [
                {
                    "name": "cssText",
                    "description": "样式内容",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "内联样式表所在 style 节点的 id",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 420,
            "description": "显示符合选择器的所有元素",
            "itemtype": "method",
            "name": "show",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 427,
            "description": "隐藏符合选择器的所有元素",
            "itemtype": "method",
            "name": "hide",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 434,
            "description": "将符合选择器的所有元素切换显示/隐藏两个状态",
            "itemtype": "method",
            "name": "toggle",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 441,
            "description": "获取符合选择器的第一个元素相对页面文档左上角的偏移值",
            "itemtype": "method",
            "name": "offset",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "return": {
                "description": "相对页面文档左上角的偏移值,包括两个属性\n- left {Number} 相对页面文档左上角的横坐标\n- top {Number} 相对页面文档左上角的纵坐标",
                "type": "Object"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 451,
            "description": "设置符合选择器的第一个元素相对页面文档左上角的偏移值",
            "itemtype": "method",
            "name": "offset",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "value",
                    "description": "相对页面文档左上角的偏移值,包含left和top两个属性",
                    "type": "Object"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 459,
            "description": "获取窗口或元素的 scrollTop 值",
            "itemtype": "method",
            "name": "scrollTop",
            "static": 1,
            "params": [
                {
                    "name": "node",
                    "description": "某个 iframe 的 contentWindow 或当前 window 或某个节点",
                    "type": "Window|HTMLElement"
                }
            ],
            "return": {
                "description": "窗口或元素的 scrollTop 值",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 467,
            "description": "设置窗口 scrollTop 值",
            "itemtype": "method",
            "name": "scrollTop",
            "static": 1,
            "params": [
                {
                    "name": "num",
                    "description": "设置的值",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 475,
            "description": "设置窗口或元素的 scrollTop 值",
            "itemtype": "method",
            "name": "scrollTop",
            "static": 1,
            "params": [
                {
                    "name": "node",
                    "description": "某个 iframe 的 contentWindow 或当前 window 或某个节点",
                    "type": "Window|HTMLElement"
                },
                {
                    "name": "num",
                    "description": "设置的值",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 484,
            "description": "获取窗口或元素的 scrollLeft 值",
            "itemtype": "method",
            "name": "scrollLeft",
            "static": 1,
            "params": [
                {
                    "name": "node",
                    "description": "某个 iframe 的 contentWindow 或当前 window 或某个节点",
                    "type": "Window|HTMLElement"
                }
            ],
            "return": {
                "description": "窗口或元素的 scrollLeft 值",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 492,
            "description": "设置窗口 scrollLeft 值",
            "itemtype": "method",
            "name": "scrollLeft",
            "static": 1,
            "params": [
                {
                    "name": "num",
                    "description": "设置的值",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 500,
            "description": "设置窗口或元素的 scrollLeft 值",
            "itemtype": "method",
            "name": "scrollLeft",
            "static": 1,
            "params": [
                {
                    "name": "node",
                    "description": "某个 iframe 的 contentWindow 或当前 window 或某个节点",
                    "type": "Window|HTMLElement"
                },
                {
                    "name": "num",
                    "description": "设置的值",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 509,
            "description": "获取页面文档 document 的总高度",
            "itemtype": "method",
            "name": "docHeight",
            "static": 1,
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 516,
            "description": "获取页面文档 document 的总宽度",
            "itemtype": "method",
            "name": "docWidth",
            "static": 1,
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 523,
            "description": "获取当前可视区域(viewport)的高度值",
            "itemtype": "method",
            "name": "viewpointHeight",
            "static": 1,
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 530,
            "description": "获取当前可视区域(viewport)的宽度值",
            "itemtype": "method",
            "name": "viewpointWidth",
            "static": 1,
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 537,
            "description": "使当前选择器匹配的第一个元素出现在指定容器可视区域内",
            "itemtype": "method",
            "name": "scrollIntoView",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "container",
                    "description": "指定容器",
                    "type": "Window|HTMLElement",
                    "optional": true,
                    "optdefault": "window"
                },
                {
                    "name": "top",
                    "description": "是否强制元素的上边界与容器的上边界对齐, 左边界和左边界对齐",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "hsroll",
                    "description": "是否允许容器左右滚动以保证元素显示在其可视区域",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 547,
            "description": "获取元素在另一批元素的位置信息",
            "itemtype": "method",
            "name": "index",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "refer",
                    "description": "参考节点\n- 如果 refer 不填，则为匹配 selector 的第一个元素在其兄弟节点的下标位置\n- 如果 refer 为选择器字符串，则为为匹配 selector 的第一个元素在匹配 refer 的所有元素中的位置下标\n- 如果 refer 为 dom 元素或 KISSY Node，则为 refer 在匹配 selector 的元素列表中的位置",
                    "type": "String|HTMLElement|KISSY.Node",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 560,
            "description": "获取符合选择器的第一个元素的祖先元素",
            "itemtype": "method",
            "name": "parent",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "filter",
                    "description": "数组表示会返回所有符合 filter 的祖先元素，否则只会返回第一个符合条件的祖先元素。 整数以及数组外的例子参见 [dom.filter](#method_filter) 的相应参数.详见下面例子解释",
                    "type": "Number|string|function|string[]|function[]"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素的祖先元素",
                "type": "HTMLElement"
            },
            "example": [
                "\n```\nvar elem = S.get('#id');\n\n// 返回 elem.parentNode\nDOM.parent(elem);\n\n// 返回 elem.parentNode.parentNode\nDOM.parent(elem, 2);\n\n// 寻找 elem 的祖先节点, 返回第一个拥有 container class 值的祖先\nDOM.parent(elem, '.container');\n\n// 寻找 elem 的祖先节点, 返回所有拥有 container class 值的祖先\nDOM.parent(elem, ['.container']);\n\n// 寻找 elem 的祖先节点, 返回第一个 tagName 为 ul 的祖先\nDOM.parent(elem, 'ul');\n\n// 寻找 elem 的祖先节点, 返回第一个 rel 属性为 data 值的祖先\nDOM.parent(elem, function(p) {\n    return DOM.attr(p, 'rel') == 'data';\n});\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 593,
            "description": "获取符合选择器的第一个元素的下一个同级节点",
            "itemtype": "method",
            "name": "next",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "filter",
                    "description": "过滤条件, 格式参见 [dom.filter](#method_filter) 的相应参数",
                    "type": "String|function"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素的下一个同级节点",
                "type": "HTMLElement"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 602,
            "description": "获取符合选择器的第一个元素的上一个同级节点",
            "itemtype": "method",
            "name": "prev",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "filter",
                    "description": "过滤条件, 格式参见 [dom.filter](#method_filter) 的相应参数",
                    "type": "String|function"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素的上一个同级节点",
                "type": "HTMLElement"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 611,
            "description": "获取符合选择器的第一个元素的第一个子节点",
            "itemtype": "method",
            "name": "first",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "filter",
                    "description": "过滤条件, 格式参见 [dom.filter](#method_filter) 的相应参数",
                    "type": "String|function"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素的第一个子节点",
                "type": "HTMLElement"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 620,
            "description": "获取符合选择器的第一个元素的最后一个子节点",
            "itemtype": "method",
            "name": "last",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "filter",
                    "description": "过滤条件, 格式参见 [dom.filter](#method_filter) 的相应参数",
                    "type": "String|function"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素的最后一个子节点",
                "type": "HTMLElement"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 629,
            "description": "获取符合选择器的第一个元素的相应同级节点",
            "itemtype": "method",
            "name": "siblings",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "filter",
                    "description": "过滤条件, 格式参见 [dom.filter](#method_filter) 的相应参数",
                    "type": "String|function"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素的相应同级节点",
                "type": "Array<HTMLElement>"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 638,
            "description": "获取符合选择器的所有非文字节点的子节点",
            "itemtype": "method",
            "name": "children",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "filter",
                    "description": "过滤条件, 格式参见 [dom.filter](#method_filter) 的相应参数",
                    "type": "String|function"
                }
            ],
            "return": {
                "description": "符合选择器的所有非文字节点的子节点",
                "type": "Array<HTMLElement>"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 647,
            "description": "判断某一容器(container)是否包含另一(contained)节点.",
            "itemtype": "method",
            "name": "contains",
            "static": 1,
            "params": [
                {
                    "name": "container",
                    "description": "容器节点\n- 字符串表示 css3 选择器 获取匹配的第一个元素\n- ArrayList<HTMLElement> : 取列表第一个元素",
                    "type": "String|HTMLElement|ArrayList<HTMLElement>|HTMLDcoument|TextNode"
                },
                {
                    "name": "contained",
                    "description": "检测节点\n- 字符串表示 css3 选择器 获取匹配的第一个元素\n- ArrayList<HTMLElement> : 取列表第一个元素",
                    "type": "String|HTMLElement|ArrayList<HTMLElement>|HTMLDcoument|TextNode"
                }
            ],
            "return": {
                "description": "container 是否包含 contained 节点.两个元素如果相等, 则返回 false",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 660,
            "description": "创建 dom 节点",
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
                {
                    "name": "html",
                    "description": "dom 节点的 html",
                    "type": "String"
                },
                {
                    "name": "props",
                    "description": "属性键值对象",
                    "type": "Object"
                },
                {
                    "name": "ownerDoc",
                    "description": "节点所属文档",
                    "type": "HTMLDocument"
                }
            ],
            "return": {
                "description": "创建出的 dom 节点或碎片列表",
                "type": "HTMLFragment|HTMLElement"
            },
            "example": [
                "\n```\n// 等价 document.createElement('div')\nDOM.create('<div>');\nDOM.create('<div />');\nDOM.create('<div></div>');\n\n// 等价 document.createTextNode('text')\nDOM.create('text');\n\n// 创建时, 同时添加属性值\nDOM.create('<a>', { href: 'hot.html', title: 'Hot Page' });\n\n// 新增属性有： val, css, html, text, data, width, height, offset\nDOM.create('<a>', { href: 'hot.html',\n                    title: 'Hot Page',\n                    css: {color: 'blue'},\n                    text: 'Test Link'\n          });\n\n// 直接内联属性\nDOM.create('<img src=\"logo.png\" alt=\"logo\" />');\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 693,
            "description": "获取符合选择器的第一个元素的 innerHTML",
            "itemtype": "method",
            "name": "html",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 701,
            "description": "给符合选择器的所有元素设置 innerHTML 值",
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "html",
                    "description": "将要设置的 html 值",
                    "type": "String"
                },
                {
                    "name": "loadScripts",
                    "description": "是否执行 html 中的内嵌脚本，默认 false\n__Note__\n\n内嵌脚本指 <script>xx</script> or <script src='yy'></script>",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 712,
            "description": "将符合选择器的所有元素从 DOM 中移除",
            "itemtype": "method",
            "name": "remove",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)\n__Note__\n\nDOM.remove 会清除当前节点以及其子孙节点上已经注册的事件",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 722,
            "description": "清除节点的所有子孙节点以及子孙节点上的事件和 data() 信息",
            "itemtype": "method",
            "name": "empty",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 729,
            "description": "将 newNode 插入到 refNode 之前",
            "itemtype": "method",
            "name": "insertBefore",
            "static": 1,
            "params": [
                {
                    "name": "newNode",
                    "description": "插入的节点. 字符串表示 css3 选择器, 获取匹配的第一个元素",
                    "type": "String|HTMLElement"
                },
                {
                    "name": "refNode",
                    "description": "参考节点. 字符串表示 css3 选择器, 获取匹配的第一个元素",
                    "type": "String|HTMLElement"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 737,
            "description": "将 newNode 插入到 refNode 之后",
            "itemtype": "method",
            "name": "insertAfter",
            "static": 1,
            "params": [
                {
                    "name": "newNode",
                    "description": "插入的节点. 字符串表示 css3 选择器, 获取匹配的第一个元素",
                    "type": "String|HTMLElement"
                },
                {
                    "name": "refNode",
                    "description": "参考节点. 字符串表示 css3 选择器, 获取匹配的第一个元素",
                    "type": "String|HTMLElement"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 745,
            "description": "将 node 追加到 parent 子节点最后",
            "itemtype": "method",
            "name": "append",
            "static": 1,
            "params": [
                {
                    "name": "node",
                    "description": "插入的节点. 字符串表示 css3 选择器 , 获取匹配的第一个元素",
                    "type": "String|HTMLElement"
                },
                {
                    "name": "parent",
                    "description": "参照父节点. 字符串表示 css3 选择器 , 获取匹配的第一个元素.",
                    "type": "String|HTMLElement"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 753,
            "description": "将 node 追加到 parent 子节点最前",
            "itemtype": "method",
            "name": "prepend",
            "static": 1,
            "params": [
                {
                    "name": "node",
                    "description": "插入的节点. 字符串表示 css3 选择器 , 获取匹配的第一个元素",
                    "type": "String|HTMLElement"
                },
                {
                    "name": "parent",
                    "description": "参照父节点. 字符串表示 css3 选择器 , 获取匹配的第一个元素.",
                    "type": "String|HTMLElement"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 761,
            "description": "将 node 节点（数组）替换为新的节点（数组） newNode",
            "itemtype": "method",
            "name": "replaceWith",
            "static": 1,
            "params": [
                {
                    "name": "nodes",
                    "description": "被替换的节点（数组）. 字符串表示 css3 选择器",
                    "type": "String|HTMLElement|HTMLElement[]"
                },
                {
                    "name": "newNodes",
                    "description": "新节点（数组）. 字符串表示 css3 选择器",
                    "type": "String|HTMLElement|HTMLElement[]"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 769,
            "description": "获取符合选择器的第一个元素的扩展属性(expando)",
            "itemtype": "method",
            "name": "data",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "扩展属性名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- 对应扩展属性名的属性值, 如果不存在返回 undefined\n- 如不指定扩展属性名, 则取得所有扩展属性键值对象 , 如果当前还没设置过扩展属性, 则返回空对象, 可以直接在该空对象上设置",
                "type": "Undefined|String"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 780,
            "description": "给符合选择器的所有元素的扩展属性(expando).设置扩展属性 name 为 value",
            "itemtype": "method",
            "name": "data",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "扩展属性名称",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "扩展属性值"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 789,
            "description": "给符合选择器的所有元素的扩展属性(expando).设置扩展属性 name 为 value",
            "itemtype": "method",
            "name": "data",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "kv",
                    "description": "扩展属性名与扩展属性值的键值对\n__Note__\n\n- embed, object, applet 这三个标签不能设置 expando\n- 如果判断是否设置了扩展属性, 请使用 dom.hasData\n- 该函数并不能读取 data-xx 伪属性，例如 <div data-x=\"y\"></div>",
                    "type": "Object"
                }
            ],
            "example": [
                "\n```\n\n// 设置所有 img 的名为 data-size 的 expando , 值为 400;\nDOM.data('img', 'data-size', 400);\n\n// 获取第一个 img 元素中, 名为 data-size 的 expando 值;\nDOM.data('img', 'data-size');\n\nvar p=DOM.create(\"<p>\");\n\nDOM.hasData(p); // => false\n\nvar store=DOM.data(p); // => store={}\n\nstore.x=\"y\"; // => 相当于 DOM.data(p,\"x\",\"y\");\n\nDOM.removeData(p,\"x\");\n\nDOM.data(p,\"x\"); // => undefined\n\nDOM.hasData(p,\"x\"); // => false\n\nDOM.hasData(p) // => false\n\nDOM.data(\"p\") // => 返回存储对象\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 829,
            "description": "将符合选择器的所有元素的对应扩展属性( expando )删除",
            "itemtype": "method",
            "name": "removeData",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "扩展属性名称. 如果指定 name, 则只删除名为 name 的 expando . 如果不指定 name, 则删除元素的整个 expando",
                    "type": "String"
                }
            ],
            "example": [
                "\n```\n\n// 删除 img 元素的名为 data-size 的 expando;\nDOM.removeData('img', 'data-size');\n\n// 删除 img 元素的 expando;\nDOM.removeData('img');\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 846,
            "description": "判断是否符合选择器的所有元素中的一个存在对应的扩展属性( expando )值",
            "itemtype": "method",
            "name": "hasData",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "name",
                    "description": "扩展属性名称.如果指定 name, 则判断是否存在指定的扩展属性值. 否则判断是否存在任意扩展属性值",
                    "type": "String"
                }
            ],
            "return": {
                "description": "是否具有扩展属性",
                "type": "Boolean"
            },
            "example": [
                "\n```\n\n// 给所有的段落节点设置扩展属性 ``x`` , 值为 ``y``\nDOM.data(\"p\",\"x\",\"y\");\n\nDOM.hasData(\"p\"); // => true , 设置过扩展属性\n\nDOM.hasData(\"p\",\"x\") // => true , 设置过扩展属性 ``x`` 的值\n\nDOM.hasData(\"p\",\"z\") // => false , 没有设置过扩展属性 ``z`` 的值\n\nDOM.removeData(\"p\",\"x\"); // => 删除扩展属性 ``x`` 的值\n\nDOM.hasData(\"p\",\"x\"); //=> false\n\nDOM.hasData(\"p\"); //=> false\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 873,
            "description": "使符合选择器的所有元素都不可以作为选择区域的开始",
            "itemtype": "method",
            "name": "unselectable",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)\n__Note__\n\n在 ie 下会引发该元素鼠标点击获取不到焦点, 在 firefox 下要得到同样的效果则需要阻止 mousedown 事件",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 883,
            "description": "获取符合选择器的所有子节点（包括文字节点）",
            "itemtype": "method",
            "name": "contents",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "filter",
                    "description": "过滤条件, 格式参见 [dom.filter](#method_filter) 的相应参数",
                    "type": "String|function"
                }
            ],
            "return": {
                "description": "获取符合选择器的所有子节点（包括文字节点）",
                "type": "Array<HTMLElement>"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 892,
            "description": "用 wrapperNode 分别包装符合 selector 的节点",
            "itemtype": "method",
            "name": "wrap",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "wrapperNode",
                    "description": "包装节点",
                    "type": "HTMLElement"
                }
            ],
            "example": [
                "\n```\n<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>\n```\n_after_\n```\nDOM.wrap(\".inner\",DOM.create('<div class=\"new\" />'));\n```\n_become_\n```\n<div class=\"container\">\n  <div class=\"new\">\n    <div class=\"inner\">Hello</div>\n  </div>\n  <div class=\"new\">\n    <div class=\"inner\">Goodbye</div>\n  </div>\n</div>\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 922,
            "description": "用 wrapperNode 包装所有符合 selector 的节点",
            "itemtype": "method",
            "name": "wrapAll",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "wrapperNode",
                    "description": "包装节点",
                    "type": "HTMLElement"
                }
            ],
            "example": [
                "\n```\n<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>\n```\n_after_\n```\nDOM.wrapAll(\".inner\",DOM.create('<div class=\"new\" />'));\n```\n_become_\n```\n<div class=\"container\">\n  <div class=\"new\">\n    <div class=\"inner\">Hello</div>\n    <div class=\"inner\">Goodbye</div>\n  </div>\n</div>\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 950,
            "description": "移除符合 selector 的节点的父节点",
            "itemtype": "method",
            "name": "unwrap",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "example": [
                "\n```\n<div class=\"container\">\n  <div class=\"new\">\n    <div class=\"inner\">Hello</div>\n  </div>\n  <div class=\"new\">\n    <div class=\"inner\">Goodbye</div>\n  </div>\n</div>\n```\n_after_\n```\nDOM.unwrap(\".inner\");\n```\n_become_\n```\n <div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 979,
            "description": "用 wrapperNode 分别包装符合 selector 的节点的子节点",
            "itemtype": "method",
            "name": "wrapInner",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "wrapperNode",
                    "description": "包装节点",
                    "type": "HTMLElement"
                }
            ],
            "example": [
                "\n```\n<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>\n```\n_after_\n```\nDOM.wrapInner(\".inner\",DOM.create('<div class=\"new\" />'));\n```\n_become_\n```\n<div class=\"container\">\n  <div class=\"inner\">\n    <div class=\"new\">Hello</div>\n  </div>\n  <div class=\"inner\">\n    <div class=\"new\">Goodbye</div>\n  </div>\n</div>\n```"
            ],
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 1009,
            "description": "获取符合选择器的第一个元素的小写 nodeName 值",
            "itemtype": "method",
            "name": "nodeName",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素的小写 nodeName 值",
                "type": "String"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/dom.js",
            "line": 1017,
            "description": "获取符合选择器的第一个元素的 outerHTML",
            "itemtype": "method",
            "name": "outerHTML",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                }
            ],
            "return": {
                "description": "符合选择器的第一个元素的 outerHTML",
                "type": "String"
            },
            "class": "Dom",
            "module": "dom"
        },
        {
            "file": "src/api/editor.js",
            "line": 45,
            "description": "初始化设置编辑器里的内容",
            "itemtype": "attribute",
            "name": "data",
            "type": "String",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 50,
            "description": "编辑器模式.取值 Editor.SOURCE_MODE 或 Editor.WYSIWYG_MODE",
            "itemtype": "attribute",
            "name": "mode",
            "type": "String",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 55,
            "description": "自定义样式表 url 数组",
            "itemtype": "attribute",
            "name": "customLink",
            "type": "String[]",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 60,
            "description": "自定义textarea的属性。\n\n例如可以指定全新产生 editor 所属 textarea 的 name 值\n```\nnew Editor({\n    textareaAttrs: {\n        name : 'myTextarea'\n    }\n});\n```",
            "itemtype": "attribute",
            "name": "textareaAttrs",
            "type": "Objec",
            "optional": 1,
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 75,
            "description": "默认 false. 是否监控编辑器输入框所在的 form 提交。 （ form 提交前自动将编辑内容同步到对应 textarea 中 ）",
            "itemtype": "attribute",
            "name": "attachForm",
            "default": "false",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 81,
            "description": "自定义样式字符串",
            "itemtype": "attribute",
            "name": "customStyle",
            "type": "String",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 86,
            "description": "编辑器源码模式",
            "itemtype": "attribute",
            "name": "SOURCE_MODE",
            "type": "KISSY.Node",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 91,
            "description": "编辑器可视化模式",
            "itemtype": "attribute",
            "name": "WYSIWYG_MODE",
            "type": "KISSY.Node",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 97,
            "description": "编辑器的 iframe.只读",
            "itemtype": "attribute",
            "name": "iframe",
            "type": "KISSY.Node",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 102,
            "description": "编辑器 iframe 的 window.只读.",
            "itemtype": "attribute",
            "name": "window",
            "type": "KISSY.Node",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 107,
            "description": "编辑器 iframe 的 document.只读.",
            "itemtype": "attribute",
            "name": "document",
            "type": "KISSY.Node",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 112,
            "description": "编辑器 iframe 的父节点.只读",
            "itemtype": "attribute",
            "name": "iframeWrapEl",
            "type": "KISSY.Node",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 117,
            "description": "编辑器的 toolbar 节点.只读.",
            "itemtype": "attribute",
            "name": "toolBarEl",
            "type": "KISSY.Node",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 122,
            "description": "编辑器的 statusbar 节点.只读.",
            "itemtype": "attribute",
            "name": "statusBarEl",
            "type": "KISSY.Node",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 128,
            "description": "编辑器 body 下的格式化后的 html 内容.可读写",
            "itemtype": "attribute",
            "name": "formatData",
            "type": "KISSY.Node",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 133,
            "description": "调用编辑器的响应命令功能",
            "itemtype": "method",
            "name": "execCommand",
            "params": [
                {
                    "name": "commandName",
                    "description": "命令名称，由各个插件提供",
                    "type": "String"
                },
                {
                    "name": "arg1",
                    "description": "对应命令所需要的参数"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 140,
            "description": "编辑器是否存在该命令",
            "itemtype": "method",
            "name": "hasCommand",
            "params": [
                {
                    "name": "commandName",
                    "description": "命令名称，由各个插件提供",
                    "type": "String"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 146,
            "description": "查询该命令对应的当前编辑值",
            "itemtype": "method",
            "name": "queryCommandValue",
            "params": [
                {
                    "name": "commandName",
                    "description": "命令名称，由各个插件提供",
                    "type": "String"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 152,
            "description": "同步编辑器内容到对应的 textarea",
            "itemtype": "method",
            "name": "sync",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 157,
            "description": "获取编辑器文档的完整 html（不仅仅是 body 内的内容）",
            "itemtype": "method",
            "name": "getDocHtml",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 162,
            "description": "使得编辑器获得焦点",
            "itemtype": "method",
            "name": "focus",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 167,
            "description": "使得编辑器失去焦点",
            "itemtype": "method",
            "name": "blur",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 172,
            "description": "添加自定义样式到编辑器文档中",
            "itemtype": "method",
            "name": "addCustomStyle",
            "params": [
                {
                    "name": "cssText",
                    "description": "自定义样式文本",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "产生的 style 标签 id，用于删除",
                    "type": "String"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 179,
            "description": "删除编辑器文档的自定义样式",
            "itemtype": "method",
            "name": "removeCustomStyle",
            "params": [
                {
                    "name": "id",
                    "description": "自定义样式产生的 style 标签的 id",
                    "type": "String"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 185,
            "description": "添加自定义样式表到编辑器文档中",
            "itemtype": "method",
            "name": "addCustomLink",
            "params": [
                {
                    "name": "url",
                    "description": "自定义样式表的地址",
                    "type": "String"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 191,
            "description": "删除编辑器文档的自定义样式表",
            "itemtype": "method",
            "name": "removeCustomLink",
            "params": [
                {
                    "name": "url",
                    "description": "自定义样式表的地址",
                    "type": "String"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 197,
            "description": "注册函数到编辑器文档 ready 队列（编辑器文档 ready 后触发）\n#### 该函数在编辑器生存周期内可能会运行多次（每次切换源码模式再切换回可视化模式都会因为编辑器文档重建而触发）",
            "itemtype": "method",
            "name": "docReady",
            "params": [
                {
                    "name": "fn",
                    "description": "编辑器文档 ready 后触发",
                    "type": "Function"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 204,
            "description": "往编辑器中插入元素",
            "itemtype": "method",
            "name": "insertElement",
            "params": [
                {
                    "name": "element",
                    "description": "待插入的元素节点。（需从编辑器文档中创建）\n### 如果要兼容 firefox 浏览器，需要调用 focus 后延迟 50ms 调用该函数：\n```\neditor.focus();\nsetTimeout(function(){\n    editor.insertElement(new KISSY.Node('<span>haha</span>'),\n    null,editor.get('document')[0]);\n},50);\n```",
                    "type": "KISSY.Node"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 218,
            "description": "往编辑器中插入 html 串",
            "itemtype": "method",
            "name": "insertHtml",
            "params": [
                {
                    "name": "html",
                    "description": "待插入的 html 字符串.\n### 如果要兼容 firefox 浏览器，需要调用 focus 后延迟 50ms 调用该函数：\n```\neditor.focus();\nsetTimeout(function(){\n    editor.insertHtml('<span>haha</span>');\n},50);\n```",
                    "type": "String"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 231,
            "description": "为编辑器工具栏增加一个下拉菜单按钮. 一般用于插件编写.",
            "itemtype": "method",
            "name": "addSelect",
            "params": [
                {
                    "name": "id",
                    "description": "按钮 id",
                    "type": "String"
                },
                {
                    "name": "cfg",
                    "description": "select配置，详见[Select](/5.0/api/classes/Select.html)",
                    "type": "Object"
                }
            ],
            "example": [
                "\n```\neditor.addSelect(\"plugin2\", {\n    children:[\n        {\n            content:\"1\",\n            value:\"11\"\n        },\n        {\n            content:\"2\",\n            value:\"22\"\n        }\n    ],\n    listeners:{\n        click:function () {\n            alert('i am running')\n        }\n    }\n});\n```"
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 258,
            "description": "从已有的textarea元素生成editor",
            "itemtype": "method",
            "name": "decorate",
            "static": 1,
            "params": [
                {
                    "name": "textarea",
                    "description": "已有的textarea元素",
                    "type": "String|HTMLElement"
                },
                {
                    "name": "cfg",
                    "description": "编辑器的配置对象，配置键值意义和Editor构造器的一样",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    require(['editor'], function(Editor){\n        var myEditorFromTextarea = Editor.decorate('#my-textarea',{\n            focused : true,\n            attachForm: true\n        })\n    })"
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 274,
            "description": "获取选中的html字符串",
            "itemtype": "method",
            "name": "getSelectedHtml",
            "return": {
                "description": "要获取的html",
                "type": "String"
            },
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 280,
            "description": "获得编辑器里面的内容",
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "format",
                    "description": "是否格式化，内部使用",
                    "type": "Boolean"
                },
                {
                    "name": "mode",
                    "description": "模式，内部使用",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "编辑器里的html内容",
                "type": "String"
            },
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 288,
            "description": "设置编辑器里的内容",
            "itemtype": "method",
            "name": "setData",
            "params": [
                {
                    "name": "data",
                    "description": "要设置的内容",
                    "type": "String"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 294,
            "description": "当用户黏贴文本触发，可返回值用来修改用户的黏贴内容",
            "itemtype": "event",
            "name": "paste",
            "params": [
                {
                    "name": "e.html",
                    "description": "用户的黏贴内容",
                    "type": "String"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 300,
            "description": "当编辑区域获得焦点时触发",
            "itemtype": "event",
            "name": "focus",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 305,
            "description": "当编辑区域失去焦点时触发",
            "itemtype": "event",
            "name": "blur",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 310,
            "description": "当切换到可视化模式后触发",
            "itemtype": "event",
            "name": "wysiwygMode",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 315,
            "description": "当切换到源码模式后触发",
            "itemtype": "event",
            "name": "sourceMode",
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 320,
            "description": "当用户光标路径变化后触发",
            "itemtype": "event",
            "name": "selectionChange",
            "params": [
                {
                    "name": "e.selection",
                    "description": "当前的选区对象",
                    "type": "Editor.Selection"
                },
                {
                    "name": "e.path",
                    "description": "当前的光标路径",
                    "type": "Editor.ElementPath"
                },
                {
                    "name": "e.element",
                    "description": "光标开始处所在的非文字节点元素",
                    "type": "KISSY.Node"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/editor.js",
            "line": 328,
            "description": "当弹出插件窗口事触发",
            "itemtype": "event",
            "name": "dialogShow",
            "params": [
                {
                    "name": "e.dialog",
                    "description": "窗口对象实例",
                    "type": "Overlay.Dialog"
                },
                {
                    "name": "e.dialogName",
                    "description": "窗口标志名称",
                    "type": "String"
                }
            ],
            "class": "Editor",
            "module": "editor"
        },
        {
            "file": "src/api/event-custom.js",
            "line": 38,
            "description": "触发绑定 type 类型的事件处理器, 并给触发的事件处理器的事件对象参数中混入数据 eventData",
            "itemtype": "method",
            "name": "fire",
            "params": [
                {
                    "name": "type",
                    "description": "要触发的自定义事件名称",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "要混入触发事件对象的数据对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "如果其中一个事件处理器返回 false , 则返回 false, 否则返回最后一个事件处理器的返回值",
                "type": "Boolean"
            },
            "class": "CustomEvent.Target",
            "module": "event-custom",
            "namespace": "CustomEvent"
        },
        {
            "file": "src/api/event-custom.js",
            "line": 46,
            "description": "配置自定义事件的一些特有信息",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "type",
                    "description": "要触发的自定义事件名称",
                    "type": "String"
                },
                {
                    "name": "cfg",
                    "description": "事件的具体配置对象",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bubbles",
                            "description": "类型 boolean. 是否支持冒泡。 默认 true",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "defaultFn",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "CustomEvent.Target",
            "module": "event-custom",
            "namespace": "CustomEvent"
        },
        {
            "file": "src/api/event-custom.js",
            "line": 55,
            "description": "添加冒泡事件源对象",
            "itemtype": "method",
            "name": "addTarget",
            "params": [
                {
                    "name": "target",
                    "description": "事件往上冒泡的事件源",
                    "type": "Object"
                }
            ],
            "example": [
                "\n```\nrequire(['util', 'event/custom'], function(Util, CustomEvent) {\n    function Custom(id){\n        this.id = id;\n        this.publish(\"run\",{\n            bubbles:1\n        });\n    }\n\n    Util.augment(Custom, CustomEvent.Target);\n\n    var c1 = new Custom(\"c1\");\n\n    var c2 = new Custom(\"c1\");\n\n    c1.addTarget(c2);\n\n    c2.on(\"run\",function(e){\n        S.log(e.target.id +\" fires event run\"); // => c1 fires event run\n    });\n\n    c1.fire(\"run\");\n});\n```"
            ],
            "class": "CustomEvent.Target",
            "module": "event-custom",
            "namespace": "CustomEvent"
        },
        {
            "file": "src/api/event-custom.js",
            "line": 86,
            "description": "删除冒泡事件源对象",
            "itemtype": "method",
            "name": "removeTarget",
            "params": [
                {
                    "name": "target",
                    "description": "事件往上冒泡的事件源",
                    "type": "Object"
                }
            ],
            "class": "CustomEvent.Target",
            "module": "event-custom",
            "namespace": "CustomEvent"
        },
        {
            "file": "src/api/event-custom.js",
            "line": 92,
            "description": "为相应事件添加事件处理器",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventType",
                    "description": "\n- 当为String时 包含一个或多个事件名称的字符串, 多个事件名以空格分开。 事件可以通过加点来表示分组，例如 \"click.one\" , \"click.two\"\n- 当为Object时，类似这样：\n```\n{\n    'click':{\n        fn:function(){\n        },\n        filter: '' // delegate,\n        once:true // 绑定一次\n    },\n    'mouseenter':function(){}\n}\n```",
                    "type": "String|Object"
                },
                {
                    "name": "fn",
                    "description": "当事件触发时的回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "回调函数的 this 值. 如果不指定默认为绑定事件的当前元素",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "CustomEvent.Target",
            "module": "event-custom",
            "namespace": "CustomEvent"
        },
        {
            "file": "src/api/event-custom.js",
            "line": 113,
            "description": "解除绑定的事件处理器",
            "itemtype": "method",
            "name": "detach",
            "params": [
                {
                    "name": "eventType",
                    "description": "",
                    "type": "String|Object"
                },
                {
                    "name": "fn",
                    "description": "当事件触发时的回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "回调函数的 this 值. 如果不指定默认为绑定事件的当前元素",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "CustomEvent.Target",
            "module": "event-custom",
            "namespace": "CustomEvent"
        },
        {
            "file": "src/api/event-dom.js",
            "line": 31,
            "description": "为符合匹配的 dom 节点的相应事件添加事件处理器",
            "itemtype": "method",
            "name": "on",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "eventType",
                    "description": "",
                    "type": "String|Object"
                },
                {
                    "name": "fn",
                    "description": "当事件触发时的回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "回调函数的 this 值. 如果不指定默认为绑定事件的当前元素\n\n__Note__\n\non 方法是给文档添加行为的主要方式. 所有的事件类型, 例如 focus , mouseover , resize 都是有效的事件类型\n\nwindow 的 beforeunload 和 error 事件使用了不标准的方式, 该方法不支持, 请直接在 window 对象上注册事件处理器\n\n当一个节点的某个事件触发时, 绑定该事件的所有处理器都会被调用.如果有多个事件处理器, 则他们的执行顺序和绑定的顺序保持一致, 当所有的事件处理器执行完毕后, 事件才继续向上传播",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "DomEvent",
            "module": "event-dom"
        },
        {
            "file": "src/api/event-dom.js",
            "line": 49,
            "description": "为符合匹配的 dom 节点的相应事件添加事件处理器, 并在该节点的子孙节点中匹配 filter 的节点上触发事件时调用",
            "itemtype": "method",
            "name": "delegate",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "eventType",
                    "description": "包含一个或多个事件名称的字符串, 多个事件名以空格分开。 事件可以通过加点来表示分组，例如 \"click.one\" , \"click.two\"",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "可参见 `dom.filter()` 的 filter 参数",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "当事件触发时的回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "回调函数的 this 值. 如果不指定默认为绑定事件的当前元素",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n__Note1__\n\n该方法是 on 方法的增强. 当 on 方法被调用时, 符合选择器的元素被绑定事件处理器, 而后面添加的元素则没有, 即他们需要另外一次绑定, 例如\n```\n<body>\n  <div class=\"clickme\">\n    Click here\n  </div>\n</body>\n```\n绑定一个 click 事件的事件触发器：\n```\nDomEvent.on('.clickme','click', function() {\n  // Bound handler called.\n});\n```\n当该元素被点击时, 调用对应的事件处理器. 但是如果新加入一个元素：\n\n`Node.all('body').append('<div class=\"clickme\">Another target</div>');`\n\n新元素匹配选择器 clickme ,但是他如果不再次 on , 则在他上面的点击不会有任何效果.\ndelegate 方法提供了解决方法, 如果这样调用：\n```\nDomEvent.delegate(document,'click','.clickme',function(){\n   // Bound handler called.\n});\n```\n这样的话如果今后又添加了一个元素\n```\nNode.all('body').append('<div class=\"clickme\">Another target</div>');\n```\n在新元素上点击仍然会调用之前的事件处理器.\n\n可以使用 undelegate 来移除之前的绑定:\n```\nfunction d(){\n}\n\nDomEvent.delegate(document,'click','.clickme',d);\n\nDomEvent.undelegate(document,'click','.clickme',d);\n```\n\n__Note2__\n\n- 不能在 object , embed , applet 元素上注册事件\n- 事件处理器回调函数中 this 指向 scope (没指定指向绑定事件的元素), 传入的参数为 event , event.target 指向事件触发源, event.currentTarget 指向当前事件处理器调用所在的匹配 filter 的元素\n- 可以使用 stopPropagation() 来停止事件的向上冒泡, 这样就不会在同样符合 filter 条件的祖先节点上调用事件处理器\n- 同样可以对 mouseenter , mouseleave 进行委托\n- 因为 delegate 是在事件冒泡到代理元素后才开始处理的，那么通过 on 注册到代理元素的子节点的事件处理器已经被触发， 而无法被 delegate 绑定的事件处理器阻止 ( stopPropagation )，但 delegate 事件处理器可以阻止绑定到同一元素但是匹配元素在当前事件处理器之上的 delegate 事件处理器"
            ],
            "class": "DomEvent",
            "module": "event-dom"
        },
        {
            "file": "src/api/event-dom.js",
            "line": 111,
            "description": "从符合匹配的 dom 节点中移去相应事件的事件处理器",
            "itemtype": "method",
            "name": "detach",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "eventType",
                    "description": "包含一个或多个事件名称的字符串, 多个事件名以空格分开。 事件可以通过加点来表示分组，例如 \"click.one\" , \"click.two\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "fn",
                    "description": "当事件触发时的回调函数",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "scope",
                    "description": "回调函数的 this 值. 如果不指定默认为绑定事件的当前元素\n\n__Note__\n\n- 用 on 绑定的事件处理器可以用 detach 解除绑定. 最简单的情况 detach(elem) 解除该元素上的所有绑定\n```\nDomEvent.detach('#foo');\n```\n- 上面的代码解除了 foo 元素上所有事件的事件处理器, 我们也可以解除某一个事件的全部事件处理器:\n```\nDomEvent.detach('#foo','click');\n```\n- 当时如果程序对同一事件指定了不同的事件处理器, 这时就需要后面两个参数了\n```\nvar handler = function() {\n  alert('The quick brown fox jumps over the lazy dog.');\n};\nDomEvent.on('#foo','click', handler);\nDomEvent.detach('#foo','click', handler);\n```\n- 通过指定第三个参数, 我们可以保证该事件的其他事件处理器不受影响, 注意下面的代码则不会生效：\n\t```\n\tvar handler = function() {\n\t  alert('The quick brown fox jumps over the lazy dog.');\n\t};\n\tvar obj={x:1};\n\tDomEvent.on('#foo','click', handler,obj);\n\n\tDomEvent.detach('#foo','click', function() {\n\t  alert('The quick brown fox jumps over the lazy dog.');\n\t},obj);\n\n\tDomEvent.detach('#foo','click', handler,{x:1});\n\n\t//虽然后面的两个 detach 参数从字面上来看完全一样, 但是由于是不同的对象, 所有仍然不会生效. 如果需要解除特定的事件处理器, 我们需要同一个对象( 函数 )引用, 而不是恰好字面上相同的不同对象\n\t```\n- DomEvent.detach 支持 deep ，递归移除子节点事件\n```\nDomEvent.detach(document.body,{\n    'click':{\n        deep:true\n    }\n});\nDomEvent.detach(document.body,{\n    // 全部事件\n    '':{\n        deep:true\n    }\n});\n```",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "DomEvent",
            "module": "event-dom"
        },
        {
            "file": "src/api/event-dom.js",
            "line": 170,
            "description": "为符合匹配的 dom 节点的相应事件去除事件处理器",
            "itemtype": "method",
            "name": "undelegate",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "eventType",
                    "description": "包含一个或多个事件名称的字符串, 多个事件名以空格分开。 事件可以通过加点来表示分组，例如 \"click.one\" , \"click.two\"",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "可参见 `dom.filter()` 的 filter 参数",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "当事件触发时的回调函数",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "回调函数的 this 值. 如果不指定默认为绑定事件的当前元素\n__Note__\n和 DomEvent.detach 一样, 如果移除特定的委托事件处理器必须保证参数和调用 delegate 时保持一致.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "DomEvent",
            "module": "event-dom"
        },
        {
            "file": "src/api/event-dom.js",
            "line": 183,
            "description": "执行符合匹配的 dom 节点的相应事件的事件处理器（并冒泡）和默认行为",
            "itemtype": "method",
            "name": "fire",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "eventType",
                    "description": "包含一个或多个事件名称的字符串, 多个事件名以空格分开。 事件可以通过加点来表示分组，例如 \"click.one\" , \"click.two\"",
                    "type": "String"
                },
                {
                    "name": "domEvent",
                    "description": "模拟原生事件的一些属性值信息",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "如果其中一个事件处理器返回 false , 则返回 false, 否则返回最后一个事件处理器的返回值\n\n__Note__\n\n用 Event.on 绑定的事件处理器可以被用户触发的原生事件调用. 但是这些事件处理器也可以使用 fire 手动调用. 调用 fire() 和用户触发导致的处理器调用调用是一样的顺序\n```\nDomEvent.on('#foo','click',function(){\n    alert(DOM.text(this));\n});\n\nDomEvent.fire('#foo','click');\n```",
                "type": "Boolean"
            },
            "class": "DomEvent",
            "module": "event-dom"
        },
        {
            "file": "src/api/event-dom.js",
            "line": 204,
            "description": "执行符合匹配的 dom 节点的相应事件的事件处理器",
            "itemtype": "method",
            "name": "fireHandler",
            "static": 1,
            "params": [
                {
                    "name": "selector",
                    "description": "字符串表示[css3选择器](http://www.w3.org/TR/css3-selectors/)",
                    "type": "String|HTMLCollection|Array<HTMLElement>"
                },
                {
                    "name": "eventType",
                    "description": "包含一个或多个事件名称的字符串, 多个事件名以空格分开。 事件可以通过加点来表示分组，例如 \"click.one\" , \"click.two\"",
                    "type": "String"
                },
                {
                    "name": "domEvent",
                    "description": "模拟原生事件的一些属性值信息",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "如果其中一个事件处理器返回 false , 则返回 false, 否则返回最后一个事件处理器的返回值\n\n__Note__\n\nfireHandler 和 fire 的区别在于:\n- fire 会冒泡以及执行对应事件的默认行为\n- fireHandler 只会执行当前节点的处理函数",
                "type": "Boolean"
            },
            "class": "DomEvent",
            "module": "event-dom"
        },
        {
            "file": "src/api/event-dom.js",
            "line": 221,
            "description": "原生只有 ie 支持 focusin 事件，而 kissy 对这一事件进行了 [兼容性处理](http://yiminghe.iteye.com/blog/813255)\n但一个元素获得焦点或者其子孙元素获得焦点时， focusin 会在该元素上触发（没被子孙元素阻止）。这就是和 focus 事件的区别之处 : 你可以在父元素上监控子元素的 focus 事件，即 focusin 事件支持冒泡.\n\n这个事件常常和 focusout 一起使用",
            "itemtype": "event",
            "name": "focusin",
            "class": "DomEvent",
            "module": "event-dom"
        },
        {
            "file": "src/api/event-dom.js",
            "line": 229,
            "description": "原生只有 ie 支持 focusout 事件，而 kissy 对这一事件进行了 [兼容性处理](http://yiminghe.iteye.com/blog/813255)\n但一个元素获得焦点或者其子孙元素获得焦点时， focusout 会在该元素上触发（没被子孙元素阻止）。这就是和 focus 事件的区别之处 : 你可以在父元素上监控子元素的 focus 事件，即 focusout 事件支持冒泡.\n\n这个事件常常和 focusin 一起使用",
            "itemtype": "event",
            "name": "focusout",
            "class": "DomEvent",
            "module": "event-dom"
        },
        {
            "file": "src/api/event-dom.js",
            "line": 237,
            "description": "目前除了 ie67 外都原生支持 hashchange 事件，kissy 对 ie67 也模拟兼容了该事件.\n\n当浏览器的 hash 值发生变化时会触发此事件，常常被用来实现单页面应用[存在广泛争议](http://danwebb.net/2011/5/28/it-is-about-the-hashbangs)\n\n当用户点击后退与前进进行浏览器导航时会引起 hash 变化\n\n此事件只能在当前 window 上注册，注册到其他类型元素上无效！ hash 值推荐为 !/xx/ 形式, 前面用 !/ 后面用 / 包起来，否则 ie67 可能有诡异现象",
            "itemtype": "event",
            "name": "hashchange",
            "example": [
                "\n```\nrequire(['node', 'event/dom'], function($, DomEvent){\n    $(window).on(\"hashchange\",function(){\n        // location.hash -> 当前 hash 值\n    });\n})\n\n```"
            ],
            "class": "DomEvent",
            "module": "event-dom"
        },
        {
            "file": "src/api/event-dom.js",
            "line": 258,
            "description": "当input元素的值改变时触发",
            "itemtype": "event",
            "name": "input",
            "class": "DomEvent",
            "module": "event-dom"
        },
        {
            "file": "src/api/feature.js",
            "line": 19,
            "description": "判断当前宿主环境是否支持手势事件\n\n  ```\n  Features.isDeviceMotionSupported();\n  ```",
            "itemtype": "method",
            "name": "isDeviceMotionSupported",
            "static": 1,
            "return": {
                "description": "当前宿主环境是否支持手势事件",
                "type": "Boolean"
            },
            "class": "Feature",
            "module": "feature"
        },
        {
            "file": "src/api/feature.js",
            "line": 31,
            "description": "判断当前宿主环境是否支持ie8的Pointer事件",
            "itemtype": "method",
            "name": "isMsPointerSupported",
            "static": 1,
            "return": {
                "description": "当前宿主环境是否支持ie8的Pointer事件",
                "type": "Boolean"
            },
            "class": "Feature",
            "module": "feature"
        },
        {
            "file": "src/api/feature.js",
            "line": 38,
            "description": "判断当前宿主环境是否支持触屏事件",
            "itemtype": "method",
            "name": "isTouchEventSupported",
            "static": 1,
            "return": {
                "description": "当前宿主环境是否支持触屏事件",
                "type": "Boolean"
            },
            "class": "Feature",
            "module": "feature"
        },
        {
            "file": "src/api/feature.js",
            "line": 45,
            "description": "判断当前环境是否支持hashChange事件",
            "itemtype": "method",
            "name": "isHashChangeSupported",
            "static": 1,
            "return": {
                "description": "当前环境是否支持hashChange事件",
                "type": "Boolean"
            },
            "class": "Feature",
            "module": "feature"
        },
        {
            "file": "src/api/feature.js",
            "line": 52,
            "description": "判断当前环境是否支持Transition动画",
            "itemtype": "method",
            "name": "isTransitionSupported",
            "static": 1,
            "return": {
                "description": "当前环境是否支持Transition动画",
                "type": "Boolean"
            },
            "class": "Feature",
            "module": "feature"
        },
        {
            "file": "src/api/feature.js",
            "line": 59,
            "description": "判断当前环境是否支持Transform动画",
            "itemtype": "method",
            "name": "isTransformSupported",
            "static": 1,
            "return": {
                "description": "当前环境是否支持Transform动画",
                "type": "Boolean"
            },
            "class": "Feature",
            "module": "feature"
        },
        {
            "file": "src/api/feature.js",
            "line": 66,
            "description": "判断当前环境是否支持ClassList",
            "itemtype": "method",
            "name": "isClassListSupported",
            "static": 1,
            "return": {
                "description": "当前环境是否支持ClassList",
                "type": "Boolean"
            },
            "class": "Feature",
            "module": "feature"
        },
        {
            "file": "src/api/feature.js",
            "line": 73,
            "description": "判断当前环境是否支持QuerySelector方法",
            "itemtype": "method",
            "name": "isQuerySelectorSupported",
            "static": 1,
            "return": {
                "description": "当前环境是否支持QuerySelector方法",
                "type": "Boolean"
            },
            "class": "Feature",
            "module": "feature"
        },
        {
            "file": "src/api/feature.js",
            "line": 80,
            "description": "得到Transition属性的前缀",
            "itemtype": "method",
            "name": "getTransitionPrefix",
            "static": 1,
            "return": {
                "description": "Transition属性的前缀",
                "type": "Boolean"
            },
            "class": "Feature",
            "module": "feature"
        },
        {
            "file": "src/api/feature.js",
            "line": 87,
            "description": "得到Transform属性的前缀",
            "itemtype": "method",
            "name": "getTransformPrefix",
            "static": 1,
            "return": {
                "description": "Transform属性的前缀",
                "type": "Boolean"
            },
            "class": "Feature",
            "module": "feature"
        },
        {
            "file": "src/api/filter-menu.js",
            "line": 64,
            "description": "是否允许输入多个， 默认为false",
            "itemtype": "attribute",
            "name": "allowMultiple",
            "type": "Boolean",
            "default": "false",
            "class": "FilterMenu",
            "module": "filter-menu"
        },
        {
            "file": "src/api/filter-menu.js",
            "line": 70,
            "description": "placeholder 内容",
            "itemtype": "attribute",
            "name": "placeholder",
            "type": "String",
            "class": "FilterMenu",
            "module": "filter-menu"
        },
        {
            "file": "src/api/filter-menu.js",
            "line": 75,
            "description": "过滤的字符串",
            "itemtype": "attribute",
            "name": "filterStr",
            "type": "String",
            "class": "FilterMenu",
            "module": "filter-menu"
        },
        {
            "file": "src/api/filter-menu.js",
            "line": 80,
            "description": "根据所给字符串，过滤出响应的项\n\n可以重写此方法，进行自定义，不自定义则是简单的内容 indexOf 查找",
            "itemtype": "method",
            "name": "filterItems",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "需要过滤的字符串",
                    "type": "String"
                }
            ],
            "class": "FilterMenu",
            "module": "filter-menu"
        },
        {
            "file": "src/api/filter-menu.js",
            "line": 89,
            "description": "重置用户的输入以及过滤结果",
            "itemtype": "method",
            "name": "reset",
            "static": 1,
            "class": "FilterMenu",
            "module": "filter-menu"
        },
        {
            "file": "src/api/gregorian-calendar-format.js",
            "line": 15,
            "description": "日期时间格式对象，形式如下：\n\nStyle.FULL: yyyy年M月d日 EEEE ahh时mm分ss秒 GMTZ\n\nStyle.LONG: yyyy年M月d日 ahh时mm分ss秒\n\nStyle.MEDIUM: yyyy-M-d H:mm:ss    \n\nStyle.SHORT: yy-M-d ah:mm",
            "itemtype": "attribute",
            "name": "Style",
            "type": "Object",
            "class": "GregorianCalendarFormat",
            "module": "gregorian-calendar-format"
        },
        {
            "file": "src/api/gregorian-calendar-format.js",
            "line": 30,
            "description": "格式化传入的日历中的时间",
            "itemtype": "method",
            "name": "format",
            "params": [
                {
                    "name": "calender",
                    "description": "要格式化时间的公历对象",
                    "type": "GregorianCalendar"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n```\n//GregorianCalendar是另一个Class\nvar gregorianCalendar = new GregorianCalendar();\ngregorianCalendar.setTime(new Date());\nvar df = DateTimeFormat.getDateTimeInstance(Style.FULL, Style.FULL);\ndf.format(gregorianCalendar);  //例如现在的：2014年8月14日 星期四 下午05时23分36秒 GMT+0800\n\nvar df2 = DateTimeFormat.getDateTimeInstance(Style.FULL, Style.SHORT);\ndf2.format(gregorianCalendar); //例如现在的：2014年8月14日 星期四 下午5:23\n\nvar df3 = DateTimeFormat.getDateInstance(Style.FULL);\ndf3.format(gregorianCalendar); //例如现在的：2014年8月14日 星期四\n```"
            ],
            "class": "GregorianCalendarFormat",
            "module": "gregorian-calendar-format"
        },
        {
            "file": "src/api/gregorian-calendar-format.js",
            "line": 51,
            "description": "解析时间字符串，转换成对应的公历对象",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "dateStr",
                    "description": "要解析的时间字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "GregorianCalendar"
            },
            "example": [
                "\n```\nvar df = DateTimeFormat.getDateTimeInstance(Style.FULL, Style.FULL);\nvar str = '2013年7月11日 星期四 下午12时31分19秒 GMT+0800';\nvar cal = df.parse(str);\n```"
            ],
            "class": "GregorianCalendarFormat",
            "module": "gregorian-calendar-format"
        },
        {
            "file": "src/api/gregorian-calendar-format.js",
            "line": 64,
            "description": "获取当前日期和时间在给定区域和时差下的默认格式化的 DateTimeFormat 对象",
            "itemtype": "method",
            "name": "getInstance",
            "static": 1,
            "params": [
                {
                    "name": "locale",
                    "description": "时区",
                    "type": "Object"
                },
                {
                    "name": "timeZoneOffset",
                    "description": "时区时间偏移",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n```\n//相当于\ngetDateTimeInstance(DateTimeStyle.SHORT, DateTimeStyle.SHORT, locale, timeZoneOffset)\nformat后得到的字符串形如： 14-8-14 下午5:44\n```"
            ],
            "class": "GregorianCalendarFormat",
            "module": "gregorian-calendar-format"
        },
        {
            "file": "src/api/gregorian-calendar-format.js",
            "line": 79,
            "description": "获取当前日期在给定区域和时差及格式下的 DateTimeFormat 对象",
            "itemtype": "method",
            "name": "getDateInstance",
            "static": 1,
            "params": [
                {
                    "name": "dateStyle",
                    "description": "日期格式,枚举型 DateTimeFormat.Style",
                    "type": "String"
                },
                {
                    "name": "locale",
                    "description": "时区",
                    "type": "Object"
                },
                {
                    "name": "timeZoneOffset",
                    "description": "时区时间偏移",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "GregorianCalendarFormat",
            "module": "gregorian-calendar-format"
        },
        {
            "file": "src/api/gregorian-calendar-format.js",
            "line": 89,
            "description": "获取当前日期和时间在给定区域和时差及格式下的DateTimeFormat对象",
            "itemtype": "method",
            "name": "getDateTimeInstance",
            "static": 1,
            "params": [
                {
                    "name": "dateStyle",
                    "description": "日期格式,枚举型 DateTimeFormat.Style",
                    "type": "String"
                },
                {
                    "name": "timeStyle",
                    "description": "时间格式，枚举型 DateTimeFormat.Style",
                    "type": "String"
                },
                {
                    "name": "locale",
                    "description": "时区",
                    "type": "Object"
                },
                {
                    "name": "timeZoneOffset",
                    "description": "时区时间偏移",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "GregorianCalendarFormat",
            "module": "gregorian-calendar-format"
        },
        {
            "file": "src/api/gregorian-calendar-format.js",
            "line": 100,
            "description": "获取当前时间在给定区域和时差及格式下的DateTimeFormat对象",
            "itemtype": "method",
            "name": "getTimeInstance",
            "static": 1,
            "params": [
                {
                    "name": "timeStyle",
                    "description": "时间格式，枚举型 DateTimeFormat.Style",
                    "type": "String"
                },
                {
                    "name": "locale",
                    "description": "时区",
                    "type": "Object"
                },
                {
                    "name": "timeZoneOffset",
                    "description": "时区时间偏移",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "GregorianCalendarFormat",
            "module": "gregorian-calendar-format"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 23,
            "description": "常量，星期日",
            "itemtype": "attribute",
            "name": "SUNDAY",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 29,
            "description": "常量，星期一",
            "itemtype": "attribute",
            "name": "MONDAY",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 35,
            "description": "常量，星期二",
            "itemtype": "attribute",
            "name": "TUESDAY",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 41,
            "description": "常量，星期三",
            "itemtype": "attribute",
            "name": "WEDNESDAY",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 47,
            "description": "常量，星期四",
            "itemtype": "attribute",
            "name": "THURSDAY",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 53,
            "description": "常量，星期五",
            "itemtype": "attribute",
            "name": "FRIDAY",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 59,
            "description": "常量，星期六",
            "itemtype": "attribute",
            "name": "SATURDAY",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 65,
            "description": "常量，一月",
            "itemtype": "attribute",
            "name": "JANUARY",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 71,
            "description": "常量，二月",
            "itemtype": "attribute",
            "name": "FEBRUARY",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 77,
            "description": "常量，三月",
            "itemtype": "attribute",
            "name": "MARCH",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 83,
            "description": "常量，四月",
            "itemtype": "attribute",
            "name": "APRIL",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 89,
            "description": "常量，五月",
            "itemtype": "attribute",
            "name": "MAY",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 95,
            "description": "常量，六月",
            "itemtype": "attribute",
            "name": "JUNE",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 101,
            "description": "常量，七月",
            "itemtype": "attribute",
            "name": "JULY",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 107,
            "description": "常量，八月",
            "itemtype": "attribute",
            "name": "AUGUST",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 113,
            "description": "常量，九月",
            "itemtype": "attribute",
            "name": "SEPTEMBER",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 119,
            "description": "常量，十月",
            "itemtype": "attribute",
            "name": "OCTOBER",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 125,
            "description": "常量，十一月",
            "itemtype": "attribute",
            "name": "NOVEMBER",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 131,
            "description": "常量，十二月",
            "itemtype": "attribute",
            "name": "DECEMBER",
            "final": 1,
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 137,
            "description": "判断当前的年份是否是闰年",
            "itemtype": "method",
            "name": "isLeapYear",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 144,
            "description": "返回毫秒形式的当前日历的时间",
            "itemtype": "method",
            "name": "getTime",
            "return": {
                "description": "时间的毫秒形式",
                "type": "Number"
            },
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 150,
            "description": "通过所给的毫秒形式的值设置当前日历的时间",
            "itemtype": "method",
            "name": "setTime",
            "params": [
                {
                    "name": "time",
                    "description": "要设置的时间的毫秒形式",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 156,
            "description": "获得传入的field对应的值",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "field",
                    "description": "要获得的域的名字",
                    "type": "String"
                }
            ],
            "return": {
                "description": "对应域的值",
                "type": "Number"
            },
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 163,
            "description": "获得当前的年份",
            "itemtype": "method",
            "name": "getYear",
            "return": {
                "description": "当前年份的值",
                "type": "Number"
            },
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 169,
            "description": "获得当前的月份",
            "itemtype": "method",
            "name": "getMonth",
            "return": {
                "description": "当前月份的值",
                "type": "Number"
            },
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 175,
            "description": "获得当前的月份中的哪一天",
            "itemtype": "method",
            "name": "getDayOfMonth",
            "return": {
                "description": "第几天",
                "type": "Number"
            },
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 181,
            "description": "获得当前的天中的哪一小时",
            "itemtype": "method",
            "name": "getHourOfDay",
            "return": {
                "description": "哪一小时",
                "type": "Number"
            },
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 187,
            "description": "获得当前的分钟域的值",
            "itemtype": "method",
            "name": "getMinutes",
            "return": {
                "description": "对应的值",
                "type": "Number"
            },
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 193,
            "description": "获得当前的秒位的值，不是整体时间的秒值",
            "itemtype": "method",
            "name": "getMilliseconds",
            "return": {
                "description": "当前的毫秒值",
                "type": "Number"
            },
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 204,
            "description": "当前周是当前年中的第几周",
            "itemtype": "method",
            "name": "getWeekOfMonth",
            "return": {
                "description": "第几周",
                "type": "Number"
            },
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 210,
            "description": "当前天是当前周中的第几天",
            "itemtype": "method",
            "name": "getDayOfWeek",
            "return": {
                "description": "第几天",
                "type": "Number"
            },
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 216,
            "description": "当前周是这个月中这一周的第几天",
            "itemtype": "method",
            "name": "getDayOfWeekInMonth",
            "return": {
                "description": "第几天",
                "type": "Number"
            },
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 222,
            "description": "设置对应日历域的值",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "field",
                    "description": "要设置的域",
                    "type": "String"
                },
                {
                    "name": "v",
                    "description": "对应域要设置的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 229,
            "description": "设置日历的年份.",
            "itemtype": "method",
            "name": "setYear",
            "params": [
                {
                    "name": "v",
                    "description": "要设置的年份",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 235,
            "description": "设置日历的月份",
            "itemtype": "method",
            "name": "setMonth",
            "params": [
                {
                    "name": "v",
                    "description": "要设置的月份",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 241,
            "description": "设置日历当前月中的某一天",
            "itemtype": "method",
            "name": "setDayOfMonth",
            "params": [
                {
                    "name": "v",
                    "description": "要设置的天",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 247,
            "description": "设置当前的天中的哪一小时",
            "itemtype": "method",
            "name": "setHourOfDay",
            "params": [
                {
                    "name": "v",
                    "description": "要设置的小时",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 253,
            "description": "设置分钟域的值",
            "itemtype": "method",
            "name": "setMinutes",
            "params": [
                {
                    "name": "v",
                    "description": "要设置的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 259,
            "description": "设置秒位的值",
            "itemtype": "method",
            "name": "setSeconds",
            "params": [
                {
                    "name": "v",
                    "description": "要设置的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 265,
            "description": "设置毫秒位的值",
            "itemtype": "method",
            "name": "setMilliseconds",
            "params": [
                {
                    "name": "v",
                    "description": "要设置的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 271,
            "description": "设置为当前年的第几周",
            "itemtype": "method",
            "name": "setWeekOfYear",
            "params": [
                {
                    "name": "v",
                    "description": "要设置的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 277,
            "description": "设置为当前月的第几周",
            "itemtype": "method",
            "name": "setWeekOfMonth",
            "params": [
                {
                    "name": "v",
                    "description": "要设置的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 283,
            "description": "设置为当前年中的第几天",
            "itemtype": "method",
            "name": "setDayOfYear",
            "params": [
                {
                    "name": "v",
                    "description": "要设置的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 289,
            "description": "设置为当前周中的第几天",
            "itemtype": "method",
            "name": "setDayOfWeek",
            "params": [
                {
                    "name": "v",
                    "description": "要设置的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 295,
            "description": "设置为当前月的当前周的第几天",
            "itemtype": "method",
            "name": "setDayOfWeekInMonth",
            "params": [
                {
                    "name": "v",
                    "description": "要设置的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 301,
            "description": "增加对应日历域的值",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "field",
                    "description": "要增加的域",
                    "type": "String"
                },
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 308,
            "description": "增加日历的年份",
            "itemtype": "method",
            "name": "addYear",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值。例如现在是2014年，dateGregorian.getYear() 返回2014，dateGregorian.addYear(2)则变成 2016",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 314,
            "description": "增加日历的月份",
            "itemtype": "method",
            "name": "addMonth",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 320,
            "description": "增加日历当前月中的某一天",
            "itemtype": "method",
            "name": "addDayOfMonth",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 326,
            "description": "增加当前的天中的哪一小时",
            "itemtype": "method",
            "name": "addHourOfDay",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "example": [
                "\n```\nvar date = new DateGregorian();\ndate.setTime(+new Date());\nvar df = DateFormat.getInstance();\ndf.format(date);  //14-8-14 下午7:24\ndate.getHourOfDay()  // 19\ndate.addHourOfDay(2);\ndf.format(date);  //14-8-14 下午9:24 \ndate.getHourOfDay()  // 21  在原基础加了两个小时\n```"
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 343,
            "description": "增加分钟域的值",
            "itemtype": "method",
            "name": "addMinutes",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 349,
            "description": "增加秒位的值",
            "itemtype": "method",
            "name": "addSeconds",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 355,
            "description": "增加毫秒位的值",
            "itemtype": "method",
            "name": "addMilliseconds",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 361,
            "description": "增加为当前年的第几周",
            "itemtype": "method",
            "name": "addWeekOfYear",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 367,
            "description": "增加为当前月的第几周",
            "itemtype": "method",
            "name": "addWeekOfMonth",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 373,
            "description": "增加为当前年中的第几天",
            "itemtype": "method",
            "name": "addDayOfYear",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 379,
            "description": "增加为当前周中的第几天",
            "itemtype": "method",
            "name": "addDayOfWeek",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 385,
            "description": "增加为当前月的当前周的第几天",
            "itemtype": "method",
            "name": "addDayOfWeekInMonth",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 391,
            "description": "增加对应日历域的值",
            "itemtype": "method",
            "name": "roll",
            "params": [
                {
                    "name": "field",
                    "description": "要增加的域",
                    "type": "String"
                },
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 398,
            "description": "增加日历的年份",
            "itemtype": "method",
            "name": "rollYear",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 404,
            "description": "增加日历的月份",
            "itemtype": "method",
            "name": "rollMonth",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 410,
            "description": "增加日历当前月中的某一天",
            "itemtype": "method",
            "name": "rollDayOfMonth",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 416,
            "description": "增加当前的天中的哪一小时",
            "itemtype": "method",
            "name": "rollHourOfDay",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 422,
            "description": "增加分钟域的值",
            "itemtype": "method",
            "name": "rollMinutes",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 428,
            "description": "增加秒位的值",
            "itemtype": "method",
            "name": "rollSeconds",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 434,
            "description": "增加毫秒位的值",
            "itemtype": "method",
            "name": "rollMilliseconds",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 440,
            "description": "增加为当前年的第几周",
            "itemtype": "method",
            "name": "rollWeekOfYear",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 446,
            "description": "增加为当前月的第几周",
            "itemtype": "method",
            "name": "rollWeekOfMonth",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 452,
            "description": "增加为当前年中的第几天",
            "itemtype": "method",
            "name": "rollDayOfYear",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 458,
            "description": "增加为当前周中的第几天",
            "itemtype": "method",
            "name": "rollDayOfWeek",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/gregorian-calendar.js",
            "line": 464,
            "description": "增加为当前月的当前周的第几天",
            "itemtype": "method",
            "name": "rollDayOfWeekInMonth",
            "params": [
                {
                    "name": "v",
                    "description": "对应域要增加的值",
                    "type": "Number"
                }
            ],
            "class": "GregorianCalendar",
            "module": "gregorian-calendar"
        },
        {
            "file": "src/api/io.js",
            "line": 76,
            "description": "本次请求发送的地址",
            "itemtype": "attribute",
            "name": "url",
            "type": "String",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 81,
            "description": "该设置和dataType一起确定定当前发送给服务器的 Accept 头，默认包括：\n```\n{\n    xml: \"application/xml, text/xml\",\n    html: \"text/html\",\n    text: \"text/plain\",\n    json: \"application/json, text/javascript\"\n}\n```",
            "itemtype": "attribute",
            "name": "accepts",
            "type": "Object",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 94,
            "description": "期望能够从服务器返回的数据类型.如果没有指定，kissy 将尽量从返回的`mimeType | Content-type`相应头中推导出来 (‘text/xml’ 将推导出 xml , ‘text/json’ 将推导出 json)\n默认支持的类型（该类型的响应信息会作为第一个参数传到 success complete 回调中）有:\n- \"xml\" : 返回响应信息代表的 xml 文档.\n- \"text\" : 返回响应信息串\n- \"html\" : 同 \"text\"\n- \"script\" : 将响应信息作为脚本执行。\n- \"json\" : 返回响应信息代表的 json 对象.\n- \"jsonp\" : 返回 jsonp 的响应信息代表的 json 对象.",
            "itemtype": "attribute",
            "name": "dataType",
            "type": "String",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 106,
            "description": "当 data 为对象时是否用 param() 序列化. 例如当需要传送一个 xml 或 formdata 到服务器时就不需要 param data， 并且最好同时设置 contentType 为合适的值",
            "itemtype": "attribute",
            "name": "processData",
            "type": "Boolean",
            "default": "true",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 112,
            "description": "本次 xhr 请求是否异步发送，如果你需要同步发送，设置该配置为 false,注意同步请求在完成前会锁死浏览器",
            "itemtype": "attribute",
            "name": "async",
            "type": "Boolean",
            "default": "true",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 118,
            "description": "dataType 为 script 或 jsonp 时默认 false，其他默认为 true. false 时则会自动给请求 url 加上时间戳",
            "itemtype": "attribute",
            "name": "cache",
            "type": "Boolean",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 123,
            "description": "设置 false 则不设置 Content-type 头 (例如传输 formdata 时需要设置 false).注意：\"application/x-www-form-urlencoded\"时的数据总是以 utf-8 的编码传往服务器端",
            "itemtype": "attribute",
            "name": "contentType",
            "type": "String",
            "default": "\"application/x-www-form-urlencoded\"",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 129,
            "description": "设置回调函数中的 this 值,默认为当前配置项.例如可以把一个 dom 节点作为 complete 回调函数的上下文",
            "itemtype": "attribute",
            "name": "context",
            "type": "Object",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 134,
            "description": "默认同域请求为 false,不同域间为 true。设置该值为 true，则强制 script 以及 jsonp 请求通过 script 节点发送，用于服务器重定向到其他域脚本的场景",
            "itemtype": "attribute",
            "name": "crossDomain",
            "type": "Boolean",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 139,
            "description": "如果为 Object 类型则会通过 param() 格式化为字符串\n注意:data 不能为嵌套 object 等复杂类型，例如: 不能是`{data : [{x : 1}]}`,可以为{data : [1]}",
            "itemtype": "attribute",
            "name": "data",
            "type": "Object|String",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 145,
            "description": "表示序列化 data 时是否给数组值对应的键名加 []",
            "itemtype": "attribute",
            "name": "serializeArray",
            "type": "Boolean",
            "default": "true",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 151,
            "description": "请求失败时的回调函数.这个函数接受 2 个参数:\n- textStatus 表示错误信息，包括 “timeout” , “error” , “abort” 等\n- io 表示这次请求代表的 io 实例",
            "itemtype": "attribute",
            "name": "error",
            "type": "Function",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 158,
            "description": "请求成功时的回调函数.该函数传入三个参数:\n- data : 根据 dataType 格式化服务器响应信息的响应对象\n- textStatus : 描述成功的状态，一般是 “success”\n- io : 本次请求的 io 实例.",
            "itemtype": "attribute",
            "name": "success",
            "type": "Function",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 166,
            "description": "请求完成时(无论成功失败)的回调函数.该函数传入三个参数\n- data : 根据 dataType 格式化服务器响应信息的响应对象\n- textStatus : 描述成功的状态，一般是 “success”\n- io : 本次请求的 io 实例.",
            "itemtype": "attribute",
            "name": "complete",
            "type": "Function",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 174,
            "description": "设置这次请求 xhr 的请求头",
            "itemtype": "attribute",
            "name": "headers",
            "type": "Object",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 179,
            "description": "覆盖这次 jsonp 请求的 callback 函数名. 这个值可以取代请求 url 中 callback=? 的 callback.例如 {jsonp:’onJsonLoad’} 会导致 ‘onJsonLoad=?’ 发送给服务器端",
            "itemtype": "attribute",
            "name": "jsonp",
            "type": "String",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 184,
            "description": "覆盖这次 jsonp 请求 callback 函数对应的值 (callback={jsonpCallback}). 这个值将取代 kissy 默认生成的 UUID 值.\n当传入函数时，该函数需要返回字符串，每次请求都会调用该函数得到用于替换的字符串",
            "itemtype": "attribute",
            "name": "jsonpCallback",
            "type": "String|Function",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 190,
            "description": "跨平台设置 xhr 的 mimeType",
            "itemtype": "attribute",
            "name": "mimeType",
            "type": "String",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 195,
            "description": "对于需要验证的 http 请求设置密码",
            "itemtype": "attribute",
            "name": "password",
            "type": "String",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 200,
            "description": "对于需要验证的 http 请求设置用户名",
            "itemtype": "attribute",
            "name": "username",
            "type": "String",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 205,
            "description": "用于 dataType jsonp 和 script ，设定传输用的 script 节点的 charset 属性。只有当返回编码和当前页面编码不一致时使用",
            "itemtype": "attribute",
            "name": "scriptCharset",
            "type": "String",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 212,
            "description": "表示请求完成状态。可用于判断当前请求是否完成. 4 表示完成，否则表示正在进行中.(xhr 会有更多取值，jsonp script 只有 0(初始化) 1(发送中) 4(完成))",
            "itemtype": "attribute",
            "name": "readyState",
            "type": "Number",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 217,
            "description": "对这次请求设个超时时间，单位秒. 当超时后会触发 error 以及 complete 回调 , 状态字符串为 “timeout”.",
            "itemtype": "attribute",
            "name": "timeout",
            "type": "Number",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 222,
            "description": "可取值 “get” 或者 “post”",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 227,
            "description": "设置到原生 xhr 对象的键值对.例如为了在标准浏览器进行跨域请求时携带cookie你可以设置 withCredentials 为 true.\n```\nnew IO({\n    url:\"http://y.com/ping.php\",\n    xhrFields:{\n        withCredentials: true\n    }\n});\n```\n这样 x.com 发送请求 y.com 会携带 y.com 的 cookie 信息",
            "itemtype": "attribute",
            "name": "xhrFields",
            "type": "Object",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 241,
            "description": "字符串表示 css3 选择器\n- 如果 form 的 enctype 为 “multipart/form-data` 则会采用 iframe 的方式进行无刷新文件上传，\n- 否则将 form 内的输入域和值序列化后通过 xhr 发送到服务器",
            "itemtype": "attribute",
            "name": "form",
            "type": "String",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 248,
            "description": "发送请求前的拦截函数，传入参数 (xhrObject, config)\n例如可以通过该函数实现上传进度监控\n```\nvar xhr = new IO({\n    url:'./upload.php',\n    type:\"post\",\n    processData:false,\n    data:formData,\n    dataType:'json',\n    contentType:false,\n    beforeSend:function (xhr) {\n        // 上传监听 upload\n        xhr.getNativeXhr().upload.addEventListener('progress', function (ev) {\n            S.log({ 'loaded':ev.loaded, 'total':ev.total });\n        });\n    },\n    success:function (d) {\n        S.log(d);\n    }\n});\n```",
            "itemtype": "attribute",
            "name": "beforeSend",
            "type": "Function",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 273,
            "description": "设置跨域的具体方式和细节，包括以下配置\n- xdr.src {String} 完全跨域请求的 flash 发送程序地址。当完全跨域时,KISSY io 在ie 中将采用 flash 发请求，默认采用 KISSY 自带 flash 发请求，也可将 kissy 自带的 flash 部署到其他地方，在 src 中指定;在标准浏览器将采用原生机制\n- xdr.subDomain {Object} 跨子域时的一些请求配置，包括\n  - xdr.subDomain.proxy {String} 指定代理页面的地址。默认 “/sub_domain_proxy.html” . 例如 x.taobao.com 要发送请求给 y.taobao.com ，那么需要设置 x.taobao.com 的页面 document.domain=’taobao.com’ ，然后提供 y.taobao.com/sub_domain_proxy.html ，该页面内容为\n`<script>document.domain='taobao.com'</script>`然后 x.taobao.com 的页面就可以和 y.taobao.com 通信了",
            "itemtype": "attribute",
            "name": "xdr",
            "type": "Obect",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 282,
            "description": "响应状态码. xhr 会有更多取值。jsonp script 只有 200(成功) , 500(出错)",
            "itemtype": "attribute",
            "name": "status",
            "type": "Number",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 287,
            "description": "响应状态字符串. 最终同回调 complete 中的 textStatus 一致.",
            "itemtype": "attribute",
            "name": "statusText",
            "type": "String",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 292,
            "description": "返回响应对应的 text 和 xml(如果需要)",
            "itemtype": "attribute",
            "name": "responseText",
            "type": "String",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 297,
            "description": "实例的方法，返回响应对应的 text 和 xml（如果需要）.",
            "itemtype": "method",
            "name": "getResponseHeader",
            "params": [
                {
                    "name": "key",
                    "description": "响应头名",
                    "type": "String"
                }
            ],
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 303,
            "description": "实例的方法，获得内置原生的 io 实例",
            "itemtype": "method",
            "name": "getNativeXhr",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 308,
            "description": "实例的方法，如果当前请求还没完成（进行中状态）则中断当前的请求，否则什么也不做",
            "itemtype": "method",
            "name": "abort",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 313,
            "description": "实例的方法，听当前请求的成功和失败，并返回新的 promise 实例",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "success",
                    "description": "成功回调，参数只有一个，为数组 [data,textStatus,io]. 其中 data 为服务器返回数据， textStatus 为当前请求状态， io 为当前请求实例",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "失败回调，参数只有一个，为数组 [null,textStatus,io]",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "新的 promise 对象",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 321,
            "description": "静态方法。为所有的 ajax 请求(包括未来)设定默认配置",
            "itemtype": "method",
            "name": "setupConfig",
            "static": 1,
            "params": [
                {
                    "name": "cfg",
                    "description": "用来配置默认请求配置的键值对对象。其中的每个配置都是可选的,具体请参考IO的构造函数",
                    "type": "Object"
                }
            ],
            "example": [
                "\n设置默认的请求地址为 /xmlhttp/ ，并使用 POST 方式。那么接下来的请求都会往 /xmlhttp/ 发送请求\n```\nIO.setupConfig({\n    url:'/xmlhttp/',\n    type:'post'\n});\n\nIO({\n    data:{x:'mydata'}\n});\n```"
            ],
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 340,
            "description": "发送 http get 请求",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "请求地址",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "请求附带的参数",
                    "type": "Object|String"
                },
                {
                    "name": "callback",
                    "description": "请求成功后的回调",
                    "type": "Function"
                },
                {
                    "name": "dataType",
                    "description": "传到回调函数作为参数的数据类型",
                    "type": "String"
                }
            ],
            "return": {
                "description": "代表本次请求的 xhrObj",
                "type": "Object"
            },
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 351,
            "description": "发送 http post 请求",
            "itemtype": "method",
            "name": "post",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "请求地址",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "请求附带的参数",
                    "type": "Object|String"
                },
                {
                    "name": "callback",
                    "description": "请求成功后的回调",
                    "type": "Function"
                },
                {
                    "name": "dataType",
                    "description": "传到回调函数作为参数的数据类型",
                    "type": "String"
                }
            ],
            "return": {
                "description": "代表本次请求的 xhrObj",
                "type": "Object"
            },
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 362,
            "description": "发送 http get 请求，无视请求响应的 Content-type，将返回信息解析为 json 作为第一个参数调用 callback 回调",
            "itemtype": "method",
            "name": "getJson",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "请求地址",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "请求附带的参数",
                    "type": "Object|String"
                },
                {
                    "name": "callback",
                    "description": "请求成功后的回调",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "代表本次请求的 xhrObj",
                "type": "Object"
            },
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 372,
            "description": "发送 jsonp 请求，将返回 json 信息作为第一个参数调用 callback 回调",
            "itemtype": "method",
            "name": "jsonp",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "请求地址",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "请求附带的参数",
                    "type": "Object|String"
                },
                {
                    "name": "callback",
                    "description": "请求成功后的回调",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "代表本次请求的 xhrObj",
                "type": "Object"
            },
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 384,
            "description": "发送 jsonp 请求，将返回 json 信息作为第一个参数调用 callback 回调.",
            "itemtype": "method",
            "name": "upload",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "请求地址",
                    "type": "String"
                },
                {
                    "name": "form",
                    "description": "表单元素，字符串表示 css3 选择器\n### Note\n\n- form 参数代表的 form 节点中如果有 input type=’file’ 的节点会自动启用 iframe-upload 模式，否则收集 form 内 input 数据启用普通 xhr 模式.\n- form 参数用户文件上传时请设置 type:’post’.",
                    "type": "HTMLElement|string"
                }
            ],
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/io.js",
            "line": 396,
            "description": "序列化一系列表单元素为可提交的字符串",
            "itemtype": "method",
            "name": "serialize",
            "static": 1,
            "params": [
                {
                    "name": "elements",
                    "description": "代表表单元素(input form select ...)的集合，参数格式同query()",
                    "type": "string|Array<HTMLElement>|HTMLElement|KISSY.NodeList"
                }
            ],
            "return": {
                "description": "序列化后的字符串",
                "type": "String"
            },
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/api/json.js",
            "line": 10,
            "description": "将字符串解析为json对象",
            "itemtype": "method",
            "name": "parse",
            "static": 1,
            "params": [
                {
                    "name": "text",
                    "description": "字符串",
                    "type": "String"
                },
                {
                    "name": "reviver",
                    "description": "过滤器，可选",
                    "optional": true
                }
            ],
            "return": {
                "description": "解析之后返回传入数据的一个对象表示",
                "type": "Object"
            },
            "example": [
                "\n注意 json 字符串的格式，属性必须要双引号括起来\n```\nrequire(['json'],function(JSON){\n\tJSON.parse('{\"x\":1}'); // => ok\n\tJSON.parse(\"{'x':1}\"); // => exception : SyntaxError\n\tJSON.parse(\"{x:1}\"); // => exception : SyntaxError\n})\n\n```"
            ],
            "class": "Json",
            "module": "json"
        },
        {
            "file": "src/api/json.js",
            "line": 29,
            "description": "将json对象或者数组转化为字符串，序列化器",
            "itemtype": "method",
            "name": "stringify",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "要序列化的对象",
                    "type": "Object|Array"
                },
                {
                    "name": "replacer",
                    "description": "替换函数，可选",
                    "type": "Function|Array",
                    "optional": true
                },
                {
                    "name": "space",
                    "description": "缩进说明符，可选",
                    "type": "String|Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "返回JSON字符串",
                "type": "String"
            },
            "example": [
                "\n```\nJSON.stringify({\"x\":1}); // => '{\"x\":1}'\nJSON.stringify({x:1}); // => '{\"x\":1}'\nJSON.stringify({'x':1}); // => '{\"x\":1}'\n```"
            ],
            "class": "Json",
            "module": "json"
        },
        {
            "file": "src/api/logger-manager.js",
            "line": 46,
            "description": "生成一个log示例，将 str 作为输出的 log 的前缀。这个log示例有 .debug .info .warn .error 方法，通过这些方法来输出log。",
            "itemtype": "method",
            "name": "getLogger",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "log 的前缀",
                    "type": "String"
                }
            ],
            "return": {
                "description": "logger对象",
                "type": "Object"
            },
            "example": [
                "\n  ```\nvar logger = KISSY.getLogger('KISSY');\nlogger.debug(\"test\"); // => \"KISSY: test\";\n  ```\n__Note__\n可以在配置中设置logger的级别，以及是否显示，logger级别从低到高顺序是：debug < info < warn < error\n\n当一个 logger 同时被设置 includes 和 excludes 的时候，includes 优先。 includes 和 excludes 配置类型为 Array ，每个配置对象配置项有maxLevel,minLevel,logger，注意他们是 \"与\" 的逻辑关系。\n```\nLoggerManager.config({\n   includes: [\n       {\n           logger: /^xx\\//\n       }\n   ],\n   excludes: [\n       {\n           logger: /^xx\\//， //以xx/开头的不显示\n           maxLevel: 'info' //不显示 info 及 info 以下的 log\n       }\n   ]\n});\n  ```"
            ],
            "class": "LoggerManager",
            "module": "logger-manager"
        },
        {
            "file": "src/api/logger-manager.js",
            "line": 78,
            "description": "增加log配置，控制输出。",
            "itemtype": "method",
            "name": "config",
            "params": [
                {
                    "name": "cfg",
                    "description": "配置对象",
                    "type": "Object",
                    "props": [
                        {
                            "name": "includes",
                            "description": "哪些logger会输出，包括属性 logger , minLevel , maxLevel",
                            "type": "Array"
                        },
                        {
                            "name": "excludes",
                            "description": "哪些logger被排除输出，包括属性 logger , minLevel , maxLevel",
                            "type": "Array"
                        }
                    ]
                }
            ],
            "example": [
                "\n    \n    LoggerManager.config({\n        includes: [\n            {\n                logger: /^xx\\//\n            }\n        ],\n        excludes: [\n            {\n                logger: /^xx\\//， //以xx/开头的不显示\n                maxLevel: 'info' //不显示 info 及 info 以下的 log\n            }\n        ]\n    });"
            ],
            "class": "LoggerManager",
            "module": "logger-manager"
        },
        {
            "file": "src/api/menu.js",
            "line": 55,
            "description": "当前高亮的儿子菜单项.",
            "itemtype": "attribute",
            "name": "highlightedItem",
            "type": "Menu.Item",
            "example": [
                "\n```\n//Hint\n//隐藏当前菜单的子菜单只需要将该属性置 null 即可\nmenu.set(\"highlightedItem\",null);\n```"
            ],
            "class": "Menu",
            "module": "menu"
        },
        {
            "file": "src/api/menu.js",
            "line": 66,
            "description": "当子菜单项被点击后触发",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "当前被点击的菜单项",
                            "type": "Menu.Item"
                        }
                    ]
                }
            ],
            "class": "Menu",
            "module": "menu"
        },
        {
            "file": "src/api/menu.js",
            "line": 102,
            "description": "是否可以被选择，可以的话，单击会添加指定 class 到根节点.",
            "itemtype": "attribute",
            "name": "selectable",
            "type": "Boolean",
            "class": "Menu.Item",
            "module": "menu",
            "namespace": "Menu"
        },
        {
            "file": "src/api/menu.js",
            "line": 107,
            "description": "是否可以被多选，可以的话，单击会添加或删除根节点的指定 class",
            "itemtype": "attribute",
            "name": "checkable",
            "type": "Boolean",
            "class": "Menu.Item",
            "module": "menu",
            "namespace": "Menu"
        },
        {
            "file": "src/api/menu.js",
            "line": 111,
            "description": "可选，该菜单项的值",
            "itemtype": "attribute",
            "name": "value",
            "type": "Any",
            "optional": 1,
            "class": "Menu.Item",
            "module": "menu",
            "namespace": "Menu"
        },
        {
            "file": "src/api/menu.js",
            "line": 116,
            "description": "该菜单项的显示内容",
            "itemtype": "attribute",
            "name": "content",
            "type": "String",
            "class": "Menu.Item",
            "module": "menu",
            "namespace": "Menu"
        },
        {
            "file": "src/api/menu.js",
            "line": 121,
            "description": "当前菜单项是否被选中",
            "itemtype": "attribute",
            "name": "selected",
            "type": "Boolean",
            "class": "Menu.Item",
            "module": "menu",
            "namespace": "Menu"
        },
        {
            "file": "src/api/menu.js",
            "line": 126,
            "description": "当前菜单选是否被多选了",
            "itemtype": "attribute",
            "name": "checked",
            "type": "Boolean",
            "class": "Menu.Item",
            "module": "menu",
            "namespace": "Menu"
        },
        {
            "file": "src/api/menu.js",
            "line": 131,
            "description": "当前菜单项的显示内容",
            "itemtype": "attribute",
            "name": "content",
            "type": "String",
            "class": "Menu.Item",
            "module": "menu",
            "namespace": "Menu"
        },
        {
            "file": "src/api/menu.js",
            "line": 186,
            "description": "可选，默认 0.15，单位秒。鼠标掠过后多长时间显示子菜单.",
            "itemtype": "attribute",
            "name": "menuDelay",
            "type": "Number",
            "optional": 1,
            "default": "0.15",
            "class": "Menu.SubMenu",
            "module": "menu",
            "namespace": "Menu"
        },
        {
            "file": "src/api/menu.js",
            "line": 193,
            "description": "子菜单实例",
            "itemtype": "attribute",
            "name": "menu",
            "type": "Menu",
            "class": "Menu.SubMenu",
            "module": "menu",
            "namespace": "Menu"
        },
        {
            "file": "src/api/menu.js",
            "line": 198,
            "description": "可选，默认 false . 销毁该菜单项是否顺带销毁子菜单",
            "itemtype": "attribute",
            "name": "externalSubMenu",
            "type": "Boolean",
            "optional": 1,
            "default": "false",
            "class": "Menu.SubMenu",
            "module": "menu",
            "namespace": "Menu"
        },
        {
            "file": "src/api/menu.js",
            "line": 258,
            "description": "鼠标移出子菜单时子菜单是否自动隐藏\n\n#### 从已有元素实例 PopupMenu 对象时 , 元素节点标明类名 {prefixCls}popupmenu . prefixCls 为配置的类名前缀，默认为 ks- .\n\n若使用默认的类名前缀，使用前请加上初始样式\n```\n<style>\n    .ks-popupmenu {\n        position:absolute;\n        left:-9999px;\n        top:-9999px;\n    }\n</style>\n```",
            "itemtype": "attribute",
            "name": "autoHideOnMouseLeave",
            "type": "Boolean",
            "default": "false",
            "class": "Menu.PopupMenu",
            "module": "menu",
            "namespace": "Menu"
        },
        {
            "file": "src/api/menu.js",
            "line": 320,
            "description": "菜单项是否 checked，默认 true",
            "itemtype": "attribute",
            "name": "checked",
            "type": "Boolean",
            "default": "true",
            "class": "Menu.CheckItem",
            "module": "menu",
            "namespace": "Menu"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 39,
            "description": "可选，关联的下拉菜单实例/配置项，具体参考 [Menu](/5.0/api/classes/Menu.html) ，默认值:\n```\n{\n    xclass:'popupmenu'\n}\n\n```",
            "itemtype": "attribute",
            "name": "menu",
            "type": "Object",
            "optional": 1,
            "class": "MenuButton",
            "module": "menubutton"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 51,
            "description": "下拉菜单是否和按钮宽度一致。默认 true",
            "itemtype": "attribute",
            "name": "matchElWidth",
            "type": "Boolean",
            "default": "true",
            "class": "MenuButton",
            "module": "menubutton"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 57,
            "description": "点击下拉项是否自动收起下拉菜单",
            "itemtype": "attribute",
            "name": "collapseOnClick",
            "type": "Boolean",
            "default": "false",
            "class": "MenuButton",
            "module": "menubutton"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 63,
            "description": "下拉菜单是否弹出，设置值可控制下拉菜单弹出与否.",
            "itemtype": "attribute",
            "name": "collapsed",
            "type": "Boolean",
            "class": "MenuButton",
            "module": "menubutton"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 68,
            "description": "添加下拉菜单项",
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "item",
                    "description": "下拉菜单项",
                    "type": "Menu.Item"
                },
                {
                    "name": "index",
                    "description": "添加的位置，默认最后一个位置",
                    "type": "Number"
                }
            ],
            "class": "MenuButton",
            "module": "menubutton"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 75,
            "description": "删除指定下拉菜单项",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "item",
                    "description": "下拉菜单项",
                    "type": "Menu.Item"
                },
                {
                    "name": "index",
                    "description": "添加的位置，默认最后一个位置",
                    "type": "Number"
                }
            ],
            "class": "MenuButton",
            "module": "menubutton"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 82,
            "description": "删除所有下拉菜单项",
            "itemtype": "method",
            "name": "removeItems",
            "params": [
                {
                    "name": "destroy",
                    "description": "删除的同时是否销毁子菜单项。默认 false",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "MenuButton",
            "module": "menubutton"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 88,
            "description": "取得指定位置下拉菜单项",
            "itemtype": "method",
            "name": "getItemAt",
            "params": [
                {
                    "name": "index",
                    "description": "取得的位置",
                    "type": "Number"
                }
            ],
            "class": "MenuButton",
            "module": "menubutton"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 94,
            "description": "当子菜单项被点击后触发",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "e.target",
                    "description": "当前被点击的菜单项",
                    "type": "Menu.Item"
                }
            ],
            "class": "MenuButton",
            "module": "menubutton"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 163,
            "description": "可选，下拉框没有可选项时的默认显示内容.",
            "itemtype": "attribute",
            "name": "defaultCaption",
            "type": "String",
            "optional": 1,
            "class": "MenuButton.Select",
            "module": "menubutton",
            "namespace": "MenuButton"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 169,
            "description": "下拉框的当前值",
            "itemtype": "attribute",
            "name": "value",
            "type": "Any",
            "class": "MenuButton.Select",
            "module": "menubutton",
            "namespace": "MenuButton"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 174,
            "description": "下拉框没有可选项时的默认显示内容",
            "itemtype": "attribute",
            "name": "defaultCaption",
            "type": "String",
            "class": "MenuButton.Select",
            "module": "menubutton",
            "namespace": "MenuButton"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 179,
            "description": "直接把原生 select 元素替换成 Select",
            "itemtype": "method",
            "name": "decorate",
            "params": [
                {
                    "name": "element",
                    "description": "select元素",
                    "type": "HTMLElement|KISSY.Node"
                },
                {
                    "name": "cfg",
                    "description": "配置对象，作用于 Select",
                    "type": "Object",
                    "props": [
                        {
                            "name": "menuCfg",
                            "description": "下拉菜单配置对象，参照 [menu](/5.0/api/classes/Menu.html)",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Select"
            },
            "class": "MenuButton.Select",
            "module": "menubutton",
            "namespace": "MenuButton"
        },
        {
            "file": "src/api/menubutton.js",
            "line": 233,
            "description": "是否可以被选择，可以的话，单击会添加指定 class 到根节点",
            "itemtype": "attribute",
            "name": "selectable",
            "type": "Boolean",
            "default": "true",
            "class": "MenuButton.Option",
            "module": "menubutton",
            "namespace": "MenuButton"
        },
        {
            "file": "src/api/modulex.js",
            "line": 13,
            "description": "注册模块",
            "itemtype": "method",
            "name": "define",
            "static": 1,
            "example": [
                "\n\ndefine 函数可用 commonjs 规范或 kmd(kissy module defination) 规范来使用，kmd是类似amd的一种模块定义规范。如下：\n\n#### commonjs规范写法\n\n### `define([name], [deps], factory)`\n\n- name {String} 模块名称，可选\n- deps {Array} 模块依赖，可选\n- factory {Function|Object|String} 模块的主内容/逻辑。当为函数时，有三个参数 require,exports,module 。函数返回值就是注册的模块接口。\n\n示例1：\n```\n   define('learnkissy', ['node'], function(require, exports, module){\n       var $ = require('node');\n\n       module.exports = function(){\n           console.log('Hi, KISSY');\n       }\n   });\n```\n示例2：\n\n开发阶段不写上模块名称name和模块依赖deps，在发布到线上前在使用 [Kissy Mobule Compiler](https://github.com/daxingplay/kmc)  来生成模块名称和提取模块依赖。\n```\n   define(function(require, exports, module){\n       var $ = require('node');\n\n       module.exports = function(){\n           console.log('Hi, KISSY');\n       }\n   });\n```\n#### kmd规范写法，类似amd\n\n### `define([name], factory, [deps])`\n\n- name {String} 模块名称，可选\n- factory {Function|Object|String} 模块的主内容/逻辑。当为函数时，参数依次是模块依赖对象配置的模块接口。函数返回值就是注册的模块接口。\n- deps {Object} 模块依赖对象配置\n\n示例1：\n```\n   define('learnkissy', function($, Cookie){\n       return function(){\n           console.log('Hi, KISSY');\n       }\n   },{\n       requires : ['node', 'cookie']\n   });\n```\n"
            ],
            "class": "Modulex",
            "module": "modulex"
        },
        {
            "file": "src/api/modulex.js",
            "line": 72,
            "description": "设置或获取配置参数",
            "itemtype": "method",
            "name": "config",
            "static": 1,
            "params": [
                {
                    "name": "config",
                    "description": "配置参数",
                    "type": "Object",
                    "props": [
                        {
                            "name": "group",
                            "description": "所有包的默认组配置，group的介绍详见下面的Note:group介绍",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "base",
                            "description": "整个类库所在的基地址",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "comboMaxUrlLength",
                            "description": "Combo url 的最长长度，默认 1024",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1024"
                        },
                        {
                            "name": "comboPrefix",
                            "description": "Combo 前缀，默认 ”??”",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"??\""
                        },
                        {
                            "name": "comboSep",
                            "description": "Combo 分隔符，默认 ”,”",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\",\""
                        },
                        {
                            "name": "tag",
                            "description": "KISSY 内置模块请求的时间戳",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "combine",
                            "description": "是否开启自动 combo 模式，默认 false 不开启. 自动 combo 模式要求 use 前配置好依赖关系",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "packages",
                            "description": "以包名为键，包配置对象为值的键值对对象\n__Note__\n\n包配置对象包括：\n- group String类型 表示包所属的组名\n- filter {String} 文件名后缀，如 a.js -> a-debug.js\n- tag 类型字符串, 最好为时间戳, 用于刷新客户端本包的模块文件缓存\n- combine 类型Boolean, 如果总和 combine 设置为 true，但是单个包 combine 设置为 false，则该包内文件不进行自动 combo\n- 类型字符串, 表示包所在的 url 路径, 相对路径表示相对于当前页面路径.\n- path 作用同 base 配置\n- charset 类型字符串, 表示宝贝所有模块定义文件的编码格式, 默认 utf-8",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "modules",
                            "description": "以单个模块为键，单个模块配置对象为值的键值对对象\n__Note__\n\n单个模块配置对象包括：\n- requires 类型String,该模块的依赖模块名数组。当设置 combine 为 true 时需要配置，否则不建议配置.\n- alias {String|Array} 模块别名，当为数组时，合并数组中所有模块返回。\n- tag 类型 String，单个模块的时间戳。仅在 combine 为 false 时生效。 combine:true 时取对应包的 tag.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "filter",
                    "description": "文件名后缀，如 a.js -> a-debug.js",
                    "type": "String"
                }
            ],
            "example": [
                "\n* #### 总配置范例概览\n```\nrequire.config({\n   // 开启自动 combo 模式\n   combine:true,\n   // kissy 库内置模块的时间戳\n   tag:'2014',\n   // kissy 的基准路径\n   base:'http://x.com/a',\n   packages:{\n       x:{\n           // x 包的基准路径\n           base:'http://x.com/biz/',\n           // x 包的时间戳\n           tag:'x',\n           // 添加后缀-debug\n           filter:debug\n       },\n       y:{\n          // y 包的基准路径\n          base:'http://x.com/biz/',\n          // y 包不开启自动 combo\n          combine:false\n          // 不配置 tag，则取 kissy 内置模块的时间戳\n       }\n   },\n   modules:{\n       \"x/b1\":{\n           // \"x/b1\" 模块的依赖信息\n           requires:[\"x/b2\",\"x/b3\"]\n       },\n       \"y/b2\":{\n           // y/b2 模块单独的时间戳\n           tag:'234'\n       }\n   }\n});\n```\n\n* #### packages 范例: 包配置\n```\nrequire.config({\n   packages:{\n       // 包名\n       \"tc\": {\n           tag:\"20141015\", // 动态加载包内的模块js文件时,\n                           // 自动加上 ?t=20141015, 用于文件更新\n           base:\"../\", // 包对应路径, 相对路径指相对于当前页面路径\n           charset:\"gbk\" // 包里模块文件编码格式\n       }\n   }\n});\n```\n\n__Note : group组介绍概览__\n\n- #### 简单使用(如果想将多个包combo到一起，需要通过配置参数group来实现。例如，对于以下包进行combo：)\n```\nrequire.config({\n\tpackages:{\n\t\t\"pkg-a\": {\n\t\t    base: \"http://example.com/pkg-a\",\n\t\t    group: \"group1\",\n\t\t    combine: true,\n\t\t    tag: \"20120222\"\n\t\t},\n\t\t\"pkg-b\": {\n\t\t    base: \"http://example.com/pkg-b\",\n\t\t    group: \"group1\",\n\t\t    combine: true,\n\t\t    tag: \"20130303\"\n\t\t},\n\t\t\"pkg-c\": {\n\t\t    base: \"http://example.com/pkg-c\",\n\t\t    combine: true,\n\t\t    tag: \"20111111\"\n\t\t}\n\t}\n})\n```\n由于pkg-a和pkg-b的group设置为”group1”，则KISSY会对这两个包的模块进行combo。而pkg-c则单独combo。产生URL如下：\n```\nhttp://example.com/??pkg-a/mod1.js,pkg-a/mod2.js,pkg-b/mod1.js,...?t=-389697156.js\nhttp://example.com/pkg-c/??mod1.js,...?t=20111111.js\n```\n其中，时间戳?t=-389697156.js是根据pkg-a和pkg-b的时间戳tag来计算的。如果修改了其中一个包的时间戳，则combo后的时间戳也会变化。\n\n- #### 容错\n  极端情况下，即使要combo的包路径path没有统一的前缀，也没有关系，KISSY可以自动识别和容错，分别对两个包进行combo。例如：\n```\nrequire.config({\n\tpackages:{\n\t\t\"pkg-a\": {\n\t\t    base: \"http://example.com/pkg-a\",\n\t\t    group: \"group2\",\n\t\t    combine: true,\n\t\t    tag: \"20120222\"\n\t\t},\n\t\t\"test\": {\n\t\t    base: \"http://g.tbcdn.cn\",\n\t\t    group: \"group2\",\n\t\t    combine: true,\n\t\t    tag: \"20130303\"\n\t\t}\n\t}\n})\n```\ncombo后的URL如下：\n```\nhttp://example.com/pkg-a/??mod1.js,mod2.js,...\nhttp://g.tbcdn.cn/test/??mod1.js,...\n```\n"
            ],
            "class": "Modulex",
            "module": "modulex"
        },
        {
            "file": "src/api/modulex.js",
            "line": 221,
            "description": "设置或获取 KISSY 配置参数",
            "itemtype": "method",
            "name": "config",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "参数名称. 取值范围参见上面函数",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "参数值. 如果不设置则返回参数名称对应的参数值"
                }
            ],
            "return": {
                "description": "如果设置了参数值无返回。否则返回参数名称对应的参数值.",
                "type": "Any"
            },
            "class": "Modulex",
            "module": "modulex"
        },
        {
            "file": "src/api/modulex.js",
            "line": 230,
            "description": "动态加载目标地址的资源文件",
            "itemtype": "method",
            "name": "getScript",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "js/css 的资源地址",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "配置对象",
                    "type": "Object",
                    "props": [
                        {
                            "name": "charset",
                            "description": "资源文件的字符编码",
                            "type": "String"
                        },
                        {
                            "name": "success",
                            "description": "资源加载成功后回调函数",
                            "type": "Function"
                        },
                        {
                            "name": "error",
                            "description": "超时或发生错误时回调函数. 当资源文件为 css 文件时不支持",
                            "type": "Function"
                        },
                        {
                            "name": "timeout",
                            "description": "单位为秒, 默认无限大. 超时后触发 error 回调. 当资源文件为 css 文件是不支持",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "return": {
                "description": "创建的 link 节点或 script 节点",
                "type": "HTMLElement"
            },
            "class": "Modulex",
            "module": "modulex"
        },
        {
            "file": "src/api/modulex.js",
            "line": 243,
            "description": "引用模块",
            "itemtype": "method",
            "name": "require",
            "static": 1,
            "params": [
                {
                    "name": "modNames",
                    "description": "如 require(['dom', 'anim'])",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "回调对象，包括成功与失败回调配置",
                    "type": "Object",
                    "props": [
                        {
                            "name": "success",
                            "description": "当 modNames 中所有模块加载完毕后执行的函数",
                            "type": "Function"
                        },
                        {
                            "name": "error",
                            "description": "当前 require 失败时调用的函数，参数为失败的模块对象",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "example": [
                "\n示例1：\n\n```\nrequire(['depMod1','depMod2'],function(DepMod1,DepMod2){\n});\n\nrequire(['depMod1','depMod2'],{\n   success:function(DepMod1,DepMod2){\n   },\n   error:function(){\n       \n   }\n});\n```\n\n在define中异步引用模块 示例：\n   \n       define(function(require, exports, module){\n           exports.onClick = function(){\n               var modsArr = ['mod/a', 'mod/b'];\n               require(modsArr, function(A, B){\n                   //when mod/a , mod/b loaded...\n                   //your code here\n               });\n           }\n       });\n\n__Note__\n\n如果使用经过配置的包内的模块, 则这些包内模块不需要事先注册, 直接 require 即可, 如果模块名以 / 结尾, 则自动加后缀 index , 例如 require([\"mods/m1/\"]) 相当于 require([\"mods/m1/index\"]) , 即自动加载 m1 目录下的 index.js"
            ],
            "class": "Modulex",
            "module": "modulex"
        },
        {
            "file": "src/api/navigation-view.js",
            "line": 43,
            "description": "进入/离开视图的动画效果。如果是数组则是相对应的两个值，left -> right, top -> bottom，如果是字符串则是单个值，如'fade'可选择的动画效果有：none/slide-top/fade/dissolve/pop/flip-left/swap-left/cube-left/flow-left/turn",
            "itemtype": "attribute",
            "name": "animation",
            "type": "Array|String",
            "default": "['slide-right', 'slide-left']",
            "class": "NavigationView",
            "module": "navigation-view"
        },
        {
            "file": "src/api/navigation-view.js",
            "line": 49,
            "description": "正在加载时的内容",
            "itemtype": "attribute",
            "name": "loadingHtml",
            "type": "String",
            "class": "NavigationView",
            "module": "navigation-view"
        },
        {
            "file": "src/api/navigation-view.js",
            "line": 54,
            "description": "缓存的视图的最大数量，超过最大值则需要重新加载/渲染",
            "itemtype": "attribute",
            "name": "viewCacheSize",
            "type": "Number",
            "default": "10",
            "class": "NavigationView",
            "module": "navigation-view"
        },
        {
            "file": "src/api/navigation-view.js",
            "line": 60,
            "description": "是否能聚焦。聚焦时会在组件根节点添加class : {prefixCls}navigation-view-focused",
            "itemtype": "attribute",
            "name": "focusable",
            "type": "Boolean",
            "default": "false",
            "class": "NavigationView",
            "module": "navigation-view"
        },
        {
            "file": "src/api/navigation-view.js",
            "line": 66,
            "description": "是否允许在视图内选取文本",
            "itemtype": "attribute",
            "name": "allowTextSelection",
            "type": "Boolean",
            "default": "true",
            "class": "NavigationView",
            "module": "navigation-view"
        },
        {
            "file": "src/api/navigation-view.js",
            "line": 72,
            "description": "往视图堆栈添加一个视图。",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "config",
                    "description": "配置项。",
                    "type": "Object",
                    "props": [
                        {
                            "name": "xclass",
                            "description": "必选，视图类的xclass。将会顺序执行它的内部方法： createDom -> bindUI -> enter。",
                            "type": "String"
                        },
                        {
                            "name": "animation",
                            "description": "可选，进入/离开视图的动画效果。意义同初始化 NavigationView 的 animation 配置。",
                            "type": "Array|String"
                        },
                        {
                            "name": "title",
                            "description": "视图标题。可选，如果使用 navigation-view/bar 插件的话将出现在上面。",
                            "type": "String"
                        },
                        {
                            "name": "viewId",
                            "description": "可选，视图的唯一id。",
                            "type": "String"
                        },
                        {
                            "name": "content",
                            "description": "视图内容",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "NavigationView",
            "module": "navigation-view"
        },
        {
            "file": "src/api/navigation-view.js",
            "line": 83,
            "description": "替换当前视图的配置",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "config",
                    "description": "配置项，如 { animation : 'turn' }",
                    "type": "Object"
                }
            ],
            "class": "NavigationView",
            "module": "navigation-view"
        },
        {
            "file": "src/api/navigation-view.js",
            "line": 89,
            "description": "从视图堆栈里弹出当前视图，返回上一个视图。并自动调用当前视图类的内部方法leave，若手动调用了视图的destroy方法，则会随后进入其内部方法destructor。",
            "itemtype": "method",
            "name": "pop",
            "class": "NavigationView",
            "module": "navigation-view"
        },
        {
            "file": "src/api/node.js",
            "line": 28,
            "description": "根据选择器字符串得到节点列表",
            "itemtype": "method",
            "name": "all",
            "static": 1,
            "params": [
                {
                    "name": "html",
                    "description": "不同参数类型有不同意义，意义请参考Node构造函数说明",
                    "type": "String|HTMLElement|Text|Window|HTMLDocument|HTMLCollection|ArrayList<HTMLElement>|Node"
                },
                {
                    "name": "context",
                    "description": "选择器上下文",
                    "type": "HTMLElement|Document|Node"
                }
            ],
            "return": {
                "description": "返回相应的Node对象",
                "type": "Node"
            },
            "example": [
                "\n- 选择器上下文\n默认情况下是在文档根节点开始依据选择器字符串开始匹配元素查找. 但是一个上下文可以作为可选的第二个参数来限定查找范围, 例如在事件处理器 范围内进行查找匹配元素：\n```\n$('div.foo').on(\"click\",function() {\n  $('span', this).addClass('bar');\n});\n```\n当对 span 的选择限定在 this 中时, 只有位于点击元素内的 span 节点会被设置格外的 class.也可以通过 $(this).all(\"span\") 来实现限定搜索范围\n- 使用原生 DOM 节点\n```\n$('div.foo').on(\"click\",function() {\n  $(this).slideUp();\n});\n```"
            ],
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 52,
            "description": "返回匹配的第一个Node对象",
            "itemtype": "method",
            "name": "one",
            "static": 1,
            "params": [
                {
                    "name": "arg..",
                    "description": "如果参数为选择字符串, 找不到则返回 null,其他情况参考[Node.all](#method_all)说明"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 60,
            "description": "得到当前节点列表内符合选择器字符串的子孙节点列表",
            "itemtype": "method",
            "name": "all",
            "params": [
                {
                    "name": "selector",
                    "description": "选择器字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "example": [
                "\n查看[demo](/5.0/examples/node/instance_all.html)"
            ],
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 69,
            "description": "得到当前节点列表内符合选择器字符串的子孙节点列表的第一个Node对象",
            "itemtype": "method",
            "name": "one",
            "params": [
                {
                    "name": "selector",
                    "description": "选择器字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回null或者Node对象",
                "type": "Null|Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 76,
            "description": "得到该 Node 对象包含的原生节点数组",
            "itemtype": "method",
            "name": "getDOMNodes",
            "return": {
                "description": "返回该 Node 对象包含的原生节点数组",
                "type": "Array<HTMLElement>"
            },
            "example": [
                "\n```\n<p id='p1'>1</p><p id='p2'>2</p>\n\n<script>\n\trequire([\"node\"],function($){\n\t\tvar pdiv = $(\"p\"),\n\t\t    all=pdiv.getDOMNodes(); // => all == [document.getElementById(\"p1\"),document.getElementById(\"p2\")]\n\n\t})\n</script>\n```"
            ],
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 94,
            "description": "得到该 NodeList 对象包含的第一个原生节点",
            "itemtype": "method",
            "name": "getDOMNode",
            "return": {
                "description": "返回该 Node 对象包含的第一个原生节点",
                "type": "Array<HTMLElement>"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 100,
            "description": "得到上一次 Node.one() / Node.all() 操作前的 Node 对象,引入该方法是为了更好的进行链式调用",
            "itemtype": "method",
            "name": "end",
            "example": [
                "\n```\n<div class='d1'>\n    d1\n</div>\n\n<div class='d2'>\n    d2\n</div>\n\n<script>\n    require(['node'], function ($) {\n        $(\"body\").all(\".d1\").css(\"color\", \"red\").end().all(\".d2\").css(\"color\", \"green\");\n\n    });\n</script>\n```"
            ],
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 122,
            "description": "比较当前节点列表和 others 代表的节点列表是否完全相同",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "others",
                    "description": "要比较的目标节点列表",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 129,
            "description": "返回包含合并选择器字符串匹配的元素和当前节点列表元素的新 NodeList 对象",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "html",
                    "description": "参数意义同Node.all",
                    "type": "String|HTMLElement|Text|Window|HTMLDocument|HTMLCollection|ArrayList<HTMLElement>|Node"
                },
                {
                    "name": "context",
                    "description": "",
                    "optional": true
                }
            ],
            "example": [
                "\n```\n<p>1</p><div>2</div>\n\n<script>\n    var pdiv = $(\"p\");\n    var all=pdiv.add(\"div\");  //  pdiv will not change\n    all.css(\"color\",\"red\"); // => 1,2 都为红字\n</script>\n```"
            ],
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 146,
            "description": "获取包含当前节点列表 index 位置处的单个原生节点的新 Node 对象",
            "itemtype": "method",
            "name": "item",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "null 或者包含一个原生节点的 NodeList 对象",
                "type": "Null|Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 153,
            "description": "获取包含当前节点列表选定范围内原生节点的新 Node 对象,调用该方法并不会改变当前 Node 实例",
            "itemtype": "method",
            "name": "slice",
            "params": [
                {
                    "name": "start",
                    "description": "范围开始位置",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "范围结束位置，忽略的话结束坐标为当前列表末尾",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 161,
            "description": "得到/设置当前节点列表第一个节点的滚动条的垂直位置",
            "itemtype": "method",
            "name": "scrollTop",
            "params": [
                {
                    "name": "value",
                    "description": "\n- 当忽略value不填，则是“获取”\n- 当value为数值，则是“设置”",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "自身this"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 170,
            "description": "得到/设置当前节点列表第一个节点的滚动条的横向位置",
            "itemtype": "method",
            "name": "scrollLeft",
            "params": [
                {
                    "name": "value",
                    "description": "\n- 当忽略value不填，则是“获取”\n- 当value为数值，则是“设置”",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "自身this"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 179,
            "description": "得到/设置当前节点列表第一个节点的计算高度，不含margin/padding/border",
            "itemtype": "method",
            "name": "height",
            "params": [
                {
                    "name": "value",
                    "description": "\n- 当忽略value不填，则是“获取”\n- 当value为数值，则是“设置”",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "自身this"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 188,
            "description": "得到/设置当前节点列表第一个节点的计算宽度，不含margin/padding/border",
            "itemtype": "method",
            "name": "width",
            "params": [
                {
                    "name": "value",
                    "description": "\n- 当忽略value不填，则是“获取”\n- 当value为数值，则是“设置”",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "自身this"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 197,
            "description": "将 cssText 字符串作为内联样式表内容添加到节点所属的文档中",
            "itemtype": "method",
            "name": "addStyleSheet",
            "params": [
                {
                    "name": "cssText",
                    "description": "样式内容",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "内联样式表所在 style 节点的 id",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 204,
            "description": "将参数内容插入到当前节点列表中的每个元素的末尾.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "content",
                    "description": "将要插入的内容",
                    "type": "HTMLElement|string|Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "example": [
                "\n```\n<h2>Greetings</h2>\n<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>\n```\n```\nrequire([\"node\"],function($){\n    $('.inner').append('<p>Test</p>');\n});\n\n```\n内层的每个 div 元素都得到了新内容\n```\n<h2>Greetings</h2>\n<div class=\"container\">\n  <div class=\"inner\">\n    Hello\n    <p>Test</p>\n  </div>\n  <div class=\"inner\">\n    Goodbye\n    <p>Test</p>\n  </div>\n</div>\n```\n### Note\n\n当把页面上已有的元素添加到目标容器中，若目标容器有多个，则只有第一个被添加进去的是参数节点，其他的都是参数节点的克隆节点"
            ],
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 242,
            "description": "将当前节点列表中的每个元素插入到容器列表的每个元素的最后一个子节点后面,功能与append已有，只是参数意义不同",
            "itemtype": "method",
            "name": "appendTo",
            "params": [
                {
                    "name": "content",
                    "description": "将要插入的内容\n- HTMLElement|Node: 已有或新创建的节点\n- string: 选择器字符串, 查找已有的容器节点",
                    "type": "HTMLElement|string|Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 251,
            "description": "将参数内容插入到当前节点列表中的每个元素的开头.",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "content",
                    "description": "将要插入的内容",
                    "type": "HTMLElement|string|Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 258,
            "description": "将当前节点列表中的每个元素插入到容器列表的每个元素的最后一个子节点开头,功能与prependTo已有，只是参数意义不同",
            "itemtype": "method",
            "name": "prependTo",
            "params": [
                {
                    "name": "content",
                    "description": "将要插入的内容\n- HTMLElement|Node: 已有或新创建的节点\n- string: 选择器字符串, 查找已有的容器节点",
                    "type": "HTMLElement|string|Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 267,
            "description": "将当前列表中的每个元素插入到目标元素之前",
            "itemtype": "method",
            "name": "insertBefore",
            "params": [
                {
                    "name": "target",
                    "description": "目标元素\n- HTMLElement|Node: 已有或新创建的节点\n- string: 选择器字符串, 查找已有的容器节点",
                    "type": "HTMLElement|string|Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 276,
            "description": "将当前列表中的每个元素插入到目标元素后面",
            "itemtype": "method",
            "name": "insertAfter",
            "params": [
                {
                    "name": "target",
                    "description": "目标元素\n- HTMLElement|Node: 已有或新创建的节点\n- string: 选择器字符串, 查找已有的容器节点",
                    "type": "HTMLElement|string|Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 285,
            "description": "将参数内容插入到当前列表中每个元素之前,功能和insertBefore一样，只是参数意义不同",
            "itemtype": "method",
            "name": "before",
            "params": [
                {
                    "name": "content",
                    "description": "将要插入的元素\n- HTMLElement|Node: 已有或新创建的节点\n- string: 选择器字符串, 查找已有的容器节点",
                    "type": "HTMLElement|string|Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 294,
            "description": "将参数内容插入到当前列表中每个元素后面,功能和insertAfter一样，只是参数意义不同",
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "content",
                    "description": "将要插入的元素\n- HTMLElement|Node: 已有或新创建的节点\n- string: 选择器字符串, 查找已有的容器节点",
                    "type": "HTMLElement|string|Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 303,
            "description": "在当前节点列表上开始动画",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "arg...",
                    "description": "参数参考[Anim的构造函数](/5.0/api/classes/Anim.html)"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 310,
            "description": "停止当前节点列表的动画, end, clearQueue, queueName, 涵义同 Anim.stop().",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "args..",
                    "description": "参考[Anim.stop](/5.0/api/classes/Anim.html#method_stop)",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 317,
            "description": "暂停当前节点列表的动画",
            "itemtype": "method",
            "name": "pause",
            "params": [
                {
                    "name": "queueName",
                    "description": "涵义同 [Anim.pause](/5.0/api/classes/Anim.html#method_pause)",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 324,
            "description": "继续当前节点列表的动画",
            "itemtype": "method",
            "name": "resume",
            "params": [
                {
                    "name": "queueName",
                    "description": "涵义同 [Anim.pause](/5.0/api/classes/Anim.html#method_pause)",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 331,
            "description": "判断当前 Node 对象是否在动画中, Node对象列表 中只要有一个 Node对象 在动画, 就会返回 true 值",
            "itemtype": "method",
            "name": "isRunning",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 337,
            "description": "判断当前 Node 对象是否在暂停中, Node对象列表 中只要有一个 Node对象 在暂停, 就会返回 true 值",
            "itemtype": "method",
            "name": "isPaused",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 343,
            "description": "当前节点列表元素以动画效果显示",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "speed",
                    "description": "单位秒, 动画持续时间, 不设置无动画",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "每个动画结束后回调函数",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 351,
            "description": "当前节点列表元素以动画效果隐藏",
            "itemtype": "method",
            "name": "hide",
            "params": [
                {
                    "name": "speed",
                    "description": "单位秒, 动画持续时间, 不设置无动画",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "每个动画结束后回调函数",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 359,
            "description": "当前节点列表元素为显示时动画效果隐藏, 否则动画效果显示",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "speed",
                    "description": "单位秒, 动画持续时间, 不设置无动画",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "每个动画结束后回调函数",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 367,
            "description": "当前节点列表元素以渐隐效果显示",
            "itemtype": "method",
            "name": "fadeIn",
            "params": [
                {
                    "name": "speed",
                    "description": "单位秒, 动画持续时间, 不设置无动画",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "每个动画结束后回调函数",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "easing",
                    "description": "动画平滑函数,同[Anim](/5.0/api/classes/Anim.html)",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 376,
            "description": "当前节点列表元素以渐隐效果隐藏",
            "itemtype": "method",
            "name": "fadeOut",
            "params": [
                {
                    "name": "speed",
                    "description": "单位秒, 动画持续时间, 不设置无动画",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "每个动画结束后回调函数",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "easing",
                    "description": "动画平滑函数,同[Anim](/5.0/api/classes/Anim.html)",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 385,
            "description": "当前节点列表元素为显示时, 切换显示或隐藏, 且动画效果为渐隐",
            "itemtype": "method",
            "name": "fadeToggle",
            "params": [
                {
                    "name": "speed",
                    "description": "单位秒, 动画持续时间, 不设置无动画",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "每个动画结束后回调函数",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "easing",
                    "description": "动画平滑函数,同[Anim](/5.0/api/classes/Anim.html)",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 394,
            "description": "当前节点列表元素从上到下滑动显示",
            "itemtype": "method",
            "name": "slideDown",
            "params": [
                {
                    "name": "speed",
                    "description": "单位秒, 动画持续时间, 不设置无动画",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "每个动画结束后回调函数",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "easing",
                    "description": "动画平滑函数,同[Anim](/5.0/api/classes/Anim.html)",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 403,
            "description": "当前节点列表元素从上到下滑动隐藏",
            "itemtype": "method",
            "name": "slideUp",
            "params": [
                {
                    "name": "speed",
                    "description": "单位秒, 动画持续时间, 不设置无动画",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "每个动画结束后回调函数",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "easing",
                    "description": "动画平滑函数,同[Anim](/5.0/api/classes/Anim.html)",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/node.js",
            "line": 412,
            "description": "当前节点列表元素为显示时, 切换显示或隐藏, 且动画效果为滑动展开折叠",
            "itemtype": "method",
            "name": "slideToggle",
            "params": [
                {
                    "name": "speed",
                    "description": "单位秒, 动画持续时间, 不设置无动画",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "每个动画结束后回调函数",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "easing",
                    "description": "动画平滑函数,同[Anim](/5.0/api/classes/Anim.html)",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Node",
            "module": "node"
        },
        {
            "file": "src/api/overlay.js",
            "line": 28,
            "description": "可选, 显示或隐藏时的特效支持, 对象包含以下配置:\n- effect.target {String|KISSY.Node} 可选,动画的参考元素\n- effect.effect {String} 可取值 ‘fade’(渐隐显示), ‘slide’(滑动显示)\n- effect.easing {String}  同 [Anim](/5.0/api/classes/Anim.html) 的 easing 参数配置\n- effect.duration {Number} 可选, 动画持续时间, 以秒为单位.例如：\n```\n{\n    target:'',        // {String|KISSY.Node} - 可选，动画的参考元素\n    effect:'none',    // {String} - 可选, 默认为'none', 'none'(无特效), 'fade'(渐隐显示), 'slide'(滑动显示).\n    easing:'',        // {String} - 可选, 同 KISSY.Anim 的 easing 参数配置.\n    duration:3        // {Number} - 可选, 动画持续时间, 以秒为单位.\n}\n```",
            "itemtype": "attribute",
            "name": "effect",
            "class": "Overlay",
            "module": "overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 45,
            "description": "对话框右上角是否包括关闭按钮",
            "itemtype": "attribute",
            "name": "closable",
            "type": "Boolean",
            "class": "Overlay",
            "module": "overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 50,
            "description": "点击关闭按钮的动作。默认 “hide” 隐藏，也可设置 “destroy” 销毁该组件",
            "itemtype": "attribute",
            "name": "closeAction",
            "type": "String",
            "class": "Overlay",
            "module": "overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 55,
            "description": "mask的相关配置：\n- 当为Boolean时，表示组件显示时是否使用遮罩层盖住页面其他元素\n- 当为Object时，有如下配置：\n    - mask.closeOnClick {Boolean} 可选. 点击遮罩层是否关闭 overlay. (具体隐藏或销毁依赖 closeAction)\n    - mask.effect {String} 可选. 遮罩层显示隐藏效果. (取值 ‘fade’,’slide’)\n    - mask.duration {Number} 可选. 效果持续时间. 单位秒",
            "itemtype": "attribute",
            "name": "mask",
            "type": "Boolean|Object",
            "class": "Overlay",
            "module": "overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 65,
            "description": "可选, 动画持续时间, 以秒为单位.",
            "itemtype": "attribute",
            "name": "duration",
            "type": "Number",
            "optional": 1,
            "class": "Overlay",
            "module": "overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 71,
            "description": "遮罩层节点",
            "itemtype": "attribute",
            "name": "maskNode",
            "type": "{KISSY.Node}",
            "class": "Overlay",
            "module": "overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 77,
            "description": "生成一个加载盖住当前组件内容",
            "itemtype": "method",
            "name": "loading",
            "class": "Overlay",
            "module": "overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 82,
            "description": "隐藏生成的加载层",
            "itemtype": "method",
            "name": "unloading",
            "class": "Overlay",
            "module": "overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 114,
            "description": "默认 true. escape 键是否触发 close 动作",
            "itemtype": "attribute",
            "name": "escapeToClose",
            "type": "Boolean",
            "default": "true",
            "class": "Overlay.Dialog",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 120,
            "description": "组件的标题内联样式",
            "itemtype": "attribute",
            "name": "headerStyle",
            "type": "Object",
            "class": "Overlay.Dialog",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 125,
            "description": "组件体的内联样式.",
            "itemtype": "attribute",
            "name": "bodyStyle",
            "type": "Object",
            "class": "Overlay.Dialog",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 130,
            "description": "组件的底部内联样式",
            "itemtype": "attribute",
            "name": "footerStyle",
            "type": "Object",
            "class": "Overlay.Dialog",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 135,
            "description": "只读, 组件的头部节点",
            "itemtype": "attribute",
            "name": "header",
            "type": "KISSY.Node",
            "readonly": "",
            "class": "Overlay.Dialog",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 141,
            "description": "只读, 组件的体部节点",
            "itemtype": "attribute",
            "name": "body",
            "type": "KISSY.Node",
            "readonly": "",
            "class": "Overlay.Dialog",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 147,
            "description": "只读, 组件的底部节点",
            "itemtype": "attribute",
            "name": "footer",
            "type": "KISSY.Node",
            "readonly": "",
            "class": "Overlay.Dialog",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 153,
            "description": "可读写. 组件的标题 html.",
            "itemtype": "attribute",
            "name": "headerContent",
            "type": "String",
            "class": "Overlay.Dialog",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 158,
            "description": "可读写. 组件的体html.",
            "itemtype": "attribute",
            "name": "bodyContent",
            "type": "String",
            "class": "Overlay.Dialog",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 163,
            "description": "可读写. 组件的底部 html.",
            "itemtype": "attribute",
            "name": "footerContent",
            "type": "String",
            "class": "Overlay.Dialog",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 208,
            "description": "触点集合，即当鼠标点击或hover在这些元素时则会出发弹出框显示。",
            "itemtype": "attribute",
            "name": "trigger",
            "type": "String|HTMLElement[]|KISSY.NodeList",
            "class": "Overlay.Popup",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 213,
            "description": "可选, 默认为 ‘click’, 触发类型, 可选 ‘click’, ‘mouse’.",
            "itemtype": "attribute",
            "name": "triggerType",
            "type": "String",
            "default": "\"click\"",
            "class": "Overlay.Popup",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 219,
            "description": "单位秒. 可选, triggerType 为 mouse 时, Popup 显示的延迟时间, 默认为 0.1.",
            "itemtype": "attribute",
            "name": "mouseDelay",
            "type": "Number",
            "default": "0.1",
            "class": "Overlay.Popup",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 225,
            "description": "可选, triggerType 为 click 时, Popup 是否有toggle功能，默认为false，不开启",
            "itemtype": "attribute",
            "name": "toggle",
            "type": "Boolean",
            "default": "false",
            "class": "Overlay.Popup",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 231,
            "description": "当前的 trigger 节点",
            "itemtype": "attribute",
            "name": "currentTrigger",
            "type": "KISSY.Node",
            "class": "Overlay.Popup",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/overlay.js",
            "line": 236,
            "description": "当 currentTrigger 改变后触发",
            "itemtype": "event",
            "name": "afterCurrentTriggerChange",
            "params": [
                {
                    "name": "ev.newVal",
                    "description": "新的 trigger 元素",
                    "type": "KISSY.Node"
                }
            ],
            "class": "Overlay.Popup",
            "module": "overlay",
            "namespace": "Overlay"
        },
        {
            "file": "src/api/path.js",
            "line": 16,
            "description": "获取域名中的文件名",
            "itemtype": "method",
            "name": "basename",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "路径字符串",
                    "type": "String"
                },
                {
                    "name": "ext",
                    "description": "需要过滤的扩展名，比如`.html`",
                    "type": "String"
                }
            ],
            "return": {
                "description": "返回结果字符串",
                "type": "String"
            },
            "example": [
                "\n```\nPath.basename('http://www.taobao.com/index.html','.html');//=> index\n```"
            ],
            "class": "Path",
            "module": "path"
        },
        {
            "file": "src/api/path.js",
            "line": 29,
            "description": "返回path所指的文件所在的目录路径",
            "itemtype": "method",
            "name": "dirname",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "路径字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n```\nPath.dirname('/home/bachi/daily/index.html');//=>/home/bachi/daily\n```"
            ],
            "class": "Path",
            "module": "path"
        },
        {
            "file": "src/api/path.js",
            "line": 41,
            "description": "获取路径所指文件的扩展名，比如`.html`",
            "itemtype": "method",
            "name": "extname",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "路径字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n```\nPath.extname('/home/bachi/daily/index.html');//=> .html\n```"
            ],
            "class": "Path",
            "module": "path"
        },
        {
            "file": "src/api/path.js",
            "line": 53,
            "description": "将path中的无关内容清理掉，返回直接的路径信息",
            "itemtype": "method",
            "name": "normalize",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "路径字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n```\nPath.normalize('x/y/../z'); // => x/z/\nPath.normalize('x/y/z/../'); // => x/y/\n```"
            ],
            "class": "Path",
            "module": "path"
        },
        {
            "file": "src/api/path.js",
            "line": 66,
            "description": "计算相对路径",
            "itemtype": "method",
            "name": "relative",
            "static": 1,
            "params": [
                {
                    "name": "from",
                    "description": "要比较的源地址",
                    "type": "String"
                },
                {
                    "name": "to",
                    "description": "要比较的目标地址",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n```\nPath.relative('x/','x/y/z'); // => 'y/z'\nPath.relative('x/t/z','x/'); // => '../../'\n```"
            ],
            "class": "Path",
            "module": "path"
        },
        {
            "file": "src/api/path.js",
            "line": 80,
            "description": "得到绝对地址，算法逻辑参照 [NodeJS](http://nodejs.org/api/path.html#path_path_resolve_from_to)",
            "itemtype": "method",
            "name": "resolve",
            "static": 1,
            "example": [
                "\n```\nPath.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\n// => 'wwwroot/static_files/gif/image.gif'\n\nPath.resolve('/foo/bar', '/tmp/file/')\n// =>   '/tmp/file'\n```"
            ],
            "class": "Path",
            "module": "path"
        },
        {
            "file": "src/api/promise.js",
            "line": 24,
            "description": "当前 promise 实例已完成时注册一个 callback, 如果 promise fail, 则这下一个事件循环中抛出错误。",
            "itemtype": "method",
            "name": "done",
            "params": [
                {
                    "name": "fulfilled",
                    "description": "该 promise 成功时的回调，参数为 defer resolve 时的 value",
                    "type": "Function"
                },
                {
                    "name": "rejected",
                    "description": "该 promise 失败时的回调，参数为 defer reject 时的 reason",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Promise",
            "module": "promise"
        },
        {
            "file": "src/api/promise.js",
            "line": 31,
            "description": "监听当前实例的成功和失败并返回新的 promise 实例",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "fulfilled",
                    "description": "该 promise 成功时的回调，参数为 defer resolve 时的 value",
                    "type": "Function"
                },
                {
                    "name": "rejected",
                    "description": "该 promise 失败时的回调，参数为 defer reject 时的 reason",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "一个新的 promise. 当前 promise 成功时新的 promise 也成功. 当前 promise 失败时新的 promise 也失败",
                "type": "Promise"
            },
            "class": "Promise",
            "module": "promise"
        },
        {
            "file": "src/api/promise.js",
            "line": 39,
            "description": "监听当前实例的失败并返回新的 promise 实例.相当于调用 this.then(null,rejected)",
            "itemtype": "method",
            "name": "fail",
            "params": [
                {
                    "name": "rejected",
                    "description": "该 promise 失败时的回调，参数为 defer reject 时的 reason",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "一个新的 promise. 当前 promise 成功时新的 promise 也成功. 当前 promise 失败时新的 promise 也失败",
                "type": "Promise"
            },
            "class": "Promise",
            "module": "promise"
        },
        {
            "file": "src/api/promise.js",
            "line": 46,
            "description": "监听当前实例的成功和失败并返回新的 promise 实例",
            "itemtype": "method",
            "name": "fin",
            "params": [
                {
                    "name": "callback",
                    "description": "该 promise 成功或失败时的回调， 成功时参数为 defer resolve 时的 value 和 true. 失败时参数为 defer reject 时的 reason 和 false",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "一个新的 promise. 当前 promise 成功时新的 promise 也成功. 当前 promise 失败时新的 promise 也失败",
                "type": "Promise"
            },
            "class": "Promise",
            "module": "promise"
        },
        {
            "file": "src/api/promise.js",
            "line": 53,
            "description": "返回当前 promise 是否成功了",
            "itemtype": "method",
            "name": "isResolved",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Promise",
            "module": "promise"
        },
        {
            "file": "src/api/promise.js",
            "line": 59,
            "description": "返回当前 promise 是否失败了",
            "itemtype": "method",
            "name": "isRejected",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Promise",
            "module": "promise"
        },
        {
            "file": "src/api/promise.js",
            "line": 65,
            "description": "返回参数 promise 是否成功了",
            "itemtype": "method",
            "name": "isResolved",
            "params": [
                {
                    "name": "promise",
                    "description": "需要查询的promise实例",
                    "type": "Promise"
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Promise",
            "module": "promise"
        },
        {
            "file": "src/api/promise.js",
            "line": 73,
            "description": "返回参数 promise 是否失败了",
            "itemtype": "method",
            "name": "isRejected",
            "params": [
                {
                    "name": "promise",
                    "description": "需要查询的promise实例",
                    "type": "Promise"
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Promise",
            "module": "promise"
        },
        {
            "file": "src/api/promise.js",
            "line": 81,
            "description": "返回参数 promise 是否是 promise",
            "itemtype": "method",
            "name": "isPromise",
            "params": [
                {
                    "name": "promise",
                    "description": "需要查询的对象",
                    "type": "Object"
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Promise",
            "module": "promise"
        },
        {
            "file": "src/api/promise.js",
            "line": 89,
            "description": "返回一个新的 promise",
            "itemtype": "method",
            "name": "when",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "监听的对象.如果 obj 为 promise 类型，相当于 obj.then(fulfilled, rejected);否则直接调用 fulfilled(obj)，并返回一个成功的 promise",
                    "type": "Object"
                },
                {
                    "name": "fulfilled",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "rejected",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Promise",
            "module": "promise"
        },
        {
            "file": "src/api/promise.js",
            "line": 99,
            "description": "返回一个新的 promise.当 objects 全部成功后新的 promise 成功，否以第一个 promise 的失败值为失败",
            "itemtype": "method",
            "name": "all",
            "static": 1,
            "params": [
                {
                    "name": "objects",
                    "description": "promise或普通对象数组",
                    "type": "Promise|Array<Object>"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Promise",
            "module": "promise"
        },
        {
            "file": "src/api/promise.js",
            "line": 118,
            "description": "用于外部监听成功失败的 promise 对象",
            "itemtype": "property",
            "name": "promise",
            "type": "Promise",
            "class": "Promise.Defer",
            "module": "promise",
            "namespace": "Promise"
        },
        {
            "file": "src/api/promise.js",
            "line": 123,
            "description": "使得内部的 promise 成功，并设置成功值为 value，\n如果 value 也是 promise，只有等 value 成功后改 defer 内部的 promise 才算成功",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "value",
                    "description": "任意值（ 包括 promise ）"
                }
            ],
            "class": "Promise.Defer",
            "module": "promise",
            "namespace": "Promise"
        },
        {
            "file": "src/api/promise.js",
            "line": 130,
            "description": "设置内部 promise 为失败状态，失败回调参数为 reason",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "reason",
                    "description": "设置给失败回调函数的参数"
                }
            ],
            "class": "Promise.Defer",
            "module": "promise",
            "namespace": "Promise"
        },
        {
            "file": "src/api/querystring.js",
            "line": 26,
            "description": "将一个JSON对象/数组转为querystring",
            "itemtype": "method",
            "name": "stringify",
            "params": [
                {
                    "name": "o",
                    "description": "JSON对象或数组",
                    "type": "Object|Array"
                },
                {
                    "name": "sep",
                    "description": "每一对键值之间的分隔符。默认为 '$'",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'&'"
                },
                {
                    "name": "eq",
                    "description": "key 与 value 之间的分隔符。默认为 '='",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'"
                },
                {
                    "name": "serializeArray",
                    "description": "如果含有数组，是否需要在数组key后加上 [] 标识。默认为true",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Querystring",
            "module": "querystring"
        },
        {
            "file": "src/api/querystring.js",
            "line": 36,
            "description": "将querystring转为JSON对象/数组",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "str",
                    "description": "querystring",
                    "type": "String"
                },
                {
                    "name": "sep",
                    "description": "每一对键值之间的分隔符。默认为 '$'",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'&'"
                },
                {
                    "name": "eq",
                    "description": "key 与 value 之间的分隔符。默认为 '='",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'"
                }
            ],
            "return": {
                "description": "JSON对象或数组",
                "type": "Object|Array"
            },
            "class": "Querystring",
            "module": "querystring"
        },
        {
            "file": "src/api/resizable.js",
            "line": 102,
            "description": "是否在 resize 的过程中保持 width/height 比例",
            "itemtype": "attribute",
            "name": "preserveRatio",
            "type": "Boolean",
            "class": "Resizable",
            "module": "resizable"
        },
        {
            "file": "src/api/resizable.js",
            "line": 107,
            "description": "默认为 [], 表示可拖动元素的哪些位置来进行缩放.\n可取下列值: “b”,”t”,”r”,”l”,”tr”,”tl”,”br”,”bl”． 其中, t,b,l,r 分别表示 top,bottom,left,right, 加上组合共八种取值, 可在上, 下, 左, 右以及左上, 左下, 右上, 右下进行拖动.",
            "itemtype": "attribute",
            "name": "handlers",
            "type": "String[]",
            "default": "[]",
            "class": "Resizable",
            "module": "resizable"
        },
        {
            "file": "src/api/resizable.js",
            "line": 114,
            "description": "默认为0, 表示拖动缩放的最大高度",
            "itemtype": "attribute",
            "name": "maxHeight",
            "type": "Number",
            "default": "0",
            "class": "Resizable",
            "module": "resizable"
        },
        {
            "file": "src/api/resizable.js",
            "line": 120,
            "description": "默认为0, 表示拖动缩放的最大宽度",
            "itemtype": "attribute",
            "name": "maxWidth",
            "type": "Number",
            "default": "0",
            "class": "Resizable",
            "module": "resizable"
        },
        {
            "file": "src/api/resizable.js",
            "line": 126,
            "description": "默认为0, 表示拖动缩放的最小高度",
            "itemtype": "attribute",
            "name": "minHeight",
            "type": "Number",
            "default": "0",
            "class": "Resizable",
            "module": "resizable"
        },
        {
            "file": "src/api/resizable.js",
            "line": 132,
            "description": "默认为0, 表示拖动缩放的最小宽度",
            "itemtype": "attribute",
            "name": "minWidth",
            "type": "Number",
            "default": "0",
            "class": "Resizable",
            "module": "resizable"
        },
        {
            "file": "src/api/resizable.js",
            "line": 138,
            "description": "将要进行缩放的节点",
            "itemtype": "attribute",
            "name": "node",
            "type": "String|HTMLElement|KISSY.Node",
            "class": "Resizable",
            "module": "resizable"
        },
        {
            "file": "src/api/resizable.js",
            "line": 144,
            "description": "销毁该组件, 取消元素上的缩放功能.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Resizable",
            "module": "resizable"
        },
        {
            "file": "src/api/resizable.js",
            "line": 149,
            "description": "开始拖放后触发",
            "itemtype": "event",
            "name": "resizeStart",
            "class": "Resizable",
            "module": "resizable"
        },
        {
            "file": "src/api/resizable.js",
            "line": 154,
            "description": "拖放中触发",
            "itemtype": "event",
            "name": "resize",
            "class": "Resizable",
            "module": "resizable"
        },
        {
            "file": "src/api/resizable.js",
            "line": 159,
            "description": "结束拖放后触发",
            "itemtype": "event",
            "name": "resizeEnd",
            "class": "Resizable",
            "module": "resizable"
        },
        {
            "file": "src/api/router.js",
            "line": 45,
            "description": "添加一个路由中间件",
            "itemtype": "method",
            "name": "use",
            "params": [
                {
                    "name": "prefix",
                    "description": "前缀，符合该前缀的路由则进入回调。默认为 '' ， 即默认都会进入回调",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "回调函数，具有两个参数：\n- request {Object} 请求信息对象\n\t- query {Object} querystring对象\n\t- backward {Boolean} 是否向后\n\t- replace {Boolean} 是否替换历史记录\n\t- forward {Boolean} 是否向后\n\t- path {String} 相对prefix的路径，不包含querystring\n\t- url {String} 相对prefix的路径，包含querystring\n\t- originalUrl {String} 初始路径\n- next {Function} 调用这个函数则会继续去匹配子路由并执行相关回调，否则停止匹配",
                    "type": "Function"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src/api/router.js",
            "line": 61,
            "description": "导航到具体路径",
            "itemtype": "method",
            "name": "navigate",
            "params": [
                {
                    "name": "path",
                    "description": "目标路径",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "当前导航路径的配置对象",
                    "type": "Object",
                    "props": [
                        {
                            "name": "replace",
                            "description": "是否替换当前的历史记录",
                            "type": "Boolean"
                        },
                        {
                            "name": "triggerRoute",
                            "description": "如果目标路径与页面当前路径一致时，是否仍然触发相应的动作（如利用get函数指定的回调），若为真则replace也自动设为真",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src/api/router.js",
            "line": 70,
            "description": "添加路由和对应的回调处理响应",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "routePath",
                    "description": "路由规则",
                    "type": "String|RegExp"
                },
                {
                    "name": "callback1",
                    "description": "第一个回调函数，接受三个参数 request,response,nextCallback ，如果调用 nextCallback 则进入传入的第二个回调函数",
                    "type": "Function"
                },
                {
                    "name": "callback2",
                    "description": "第二个回调函数，可选，是否执行决定于第一个回调函数",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "...",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src/api/router.js",
            "line": 79,
            "description": "判断一个url路径是否匹配已添加路由规则里面的任一规则",
            "itemtype": "method",
            "name": "matchRoute",
            "params": [
                {
                    "name": "path",
                    "description": "需要判断的url路径",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src/api/router.js",
            "line": 86,
            "description": "去除给定路由规则的回调函数或整个路由规则",
            "itemtype": "method",
            "name": "removeRoute",
            "params": [
                {
                    "name": "routePath",
                    "description": "路由规则",
                    "type": "String|RegExp"
                },
                {
                    "name": "callback",
                    "description": "需要去除的回调函数，可选。如果没有指定，则整个路由规则都会被去除",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src/api/router.js",
            "line": 93,
            "description": "清空所有路由规则及路由中间件",
            "itemtype": "method",
            "name": "clearRoutes",
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src/api/router.js",
            "line": 98,
            "description": "判断路由规则是否存在已添加的路由规则中",
            "itemtype": "method",
            "name": "hasRoute",
            "params": [
                {
                    "name": "routePath",
                    "description": "路由规则",
                    "type": "String|RegExp"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src/api/router.js",
            "line": 105,
            "description": "全局路由配置",
            "itemtype": "method",
            "name": "config",
            "params": [
                {
                    "name": "options",
                    "description": "配置对象",
                    "type": "Object",
                    "props": [
                        {
                            "name": "caseSensitive",
                            "description": "是否大小写敏感",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "strict",
                            "description": "是否严格要求路径末尾的反斜杠匹配",
                            "optional": true
                        },
                        {
                            "name": "urlRoot",
                            "description": "配置针对支持html5 history的浏览器的根路径",
                            "optional": true
                        },
                        {
                            "name": "useHash",
                            "description": "是否强制使用hash来处理路由即使在支持html5 histroy的浏览器下",
                            "optional": true
                        },
                        {
                            "name": "triggerRoute",
                            "description": "如果目标路径与页面当前路径一致时，是否仍然触发相应的动作（如利用get函数指定的回调），若为真则replace也自动设为真",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src/api/router.js",
            "line": 116,
            "description": "开启路由监听",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "路由成功开启后的回调",
                    "type": "Function"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src/api/router.js",
            "line": 122,
            "description": "停止路由监听",
            "itemtype": "method",
            "name": "stop",
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src/api/split-button.js",
            "line": 74,
            "description": "是否将菜单按钮和按钮对齐，默认 true",
            "itemtype": "attribute",
            "name": "alignWithEl",
            "type": "Boolean",
            "default": "true",
            "class": "SplitButton",
            "module": "split-button"
        },
        {
            "file": "src/api/split-button.js",
            "line": 80,
            "description": "菜单按钮组件",
            "itemtype": "attribute",
            "name": "menuButton",
            "type": "KISSY.MenuButton",
            "class": "SplitButton",
            "module": "split-button"
        },
        {
            "file": "src/api/split-button.js",
            "line": 85,
            "description": "按钮组件",
            "itemtype": "attribute",
            "name": "button",
            "type": "KISSY.Button",
            "class": "SplitButton",
            "module": "split-button"
        },
        {
            "file": "src/api/stylesheet.js",
            "line": 31,
            "description": "link 节点或选择器",
            "itemtype": "attribute",
            "name": "el",
            "type": "HTMLElement|String",
            "class": "StyleSheet",
            "module": "stylesheet"
        },
        {
            "file": "src/api/stylesheet.js",
            "line": 36,
            "description": "link 元素节点",
            "itemtype": "property",
            "name": "el",
            "type": "HTMLElement",
            "class": "StyleSheet",
            "module": "stylesheet"
        },
        {
            "file": "src/api/stylesheet.js",
            "line": 41,
            "description": "禁用当前 stylesheet 所在样式表的所有样式",
            "itemtype": "method",
            "name": "disable",
            "return": {
                "description": "当前实例"
            },
            "class": "StyleSheet",
            "module": "stylesheet"
        },
        {
            "file": "src/api/stylesheet.js",
            "line": 47,
            "description": "启用当前 stylesheet 所在样式表的所有样式",
            "itemtype": "method",
            "name": "enable",
            "return": {
                "description": "当前实例"
            },
            "class": "StyleSheet",
            "module": "stylesheet"
        },
        {
            "file": "src/api/stylesheet.js",
            "line": 53,
            "description": "当前样式表是否已经被启用",
            "itemtype": "method",
            "name": "isEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "StyleSheet",
            "module": "stylesheet"
        },
        {
            "file": "src/api/stylesheet.js",
            "line": 59,
            "description": "获取对应 selectorText 的样式定义文本.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "selectorText",
                    "description": "选择器字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n```\nrequire(['stylesheet'],function(StyleSheet){\n    // use stylesheet\n      <link id='existing'>\n        a {\n            color:red;\n        }\n      </link>\n \n    var stylesheet = new StyleSheet({\n        el: '#existing'\n    });\n\n    stylesheet.get('a'); // => color:red\n});"
            ],
            "class": "StyleSheet",
            "module": "stylesheet"
        },
        {
            "file": "src/api/stylesheet.js",
            "line": 82,
            "description": "设置对应 selectorText 的样式定义",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "selectorText",
                    "description": "选择器字符串",
                    "type": "String"
                },
                {
                    "name": "css",
                    "description": "样式键值对",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "当前实例"
            },
            "example": [
                "\n```\nrequire(['stylesheet'],function(StyleSheet){\n    // use stylesheet\n      <link id='existing'>\n        a {\n            color:red;\n        }\n      </link>\n      \n    var stylesheet = new StyleSheet({\n        el: '#existing'\n    });\n\n    stylesheet.set('a',{\n        color:'',\n        fontSize:'18px'\n    }).get('a'); // => font-size:18px;\n});"
            ],
            "class": "StyleSheet",
            "module": "stylesheet"
        },
        {
            "file": "src/api/swf.js",
            "line": 35,
            "description": "将要加到 flash 节点的属性键值对",
            "itemtype": "attribute",
            "name": "attrs",
            "type": "Object",
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 40,
            "description": "可选。插入 swf 所属的文档，默认当前文档",
            "itemtype": "attribute",
            "name": "document",
            "type": "HTMLDocument",
            "optional": 1,
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 46,
            "description": "可选。 在此元素前插入 swf",
            "itemtype": "attribute",
            "name": "elBefore",
            "type": "HTMLDocument",
            "optional": 1,
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 52,
            "description": "可选。版本低时显示的快速安装 swf ，默认为 kissy 自带地址.",
            "itemtype": "attribute",
            "name": "expressInstall",
            "type": "String",
            "optional": 1,
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 58,
            "description": "将要加到 flash 节点的 param 键值对. 注意其中属性 flashVars 的大小写",
            "itemtype": "attribute",
            "name": "params",
            "type": "Object",
            "optional": 1,
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 64,
            "description": "可选。在此元素内添加 swf。 若 render 与 swf 都不设置则插入到 body 节点中",
            "itemtype": "attribute",
            "name": "render",
            "type": "HTMLDocument",
            "optional": 1,
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 70,
            "description": "必选。 swf 元素的地址。",
            "itemtype": "attribute",
            "name": "src",
            "type": "String",
            "required": 1,
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 76,
            "description": "可选。最低 flash 版本要求，达不到要求显示 expressInstall。例如 9.1.234，默认 9.0",
            "itemtype": "attribute",
            "name": "version",
            "type": "String",
            "optional": 1,
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 82,
            "description": "swf 元素节点",
            "itemtype": "attribute",
            "name": "el",
            "type": "HTMLElement",
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 87,
            "description": "swf 元素 html",
            "itemtype": "attribute",
            "name": "html",
            "type": "String",
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 92,
            "description": "取值枚举自SWF实例的property status",
            "itemtype": "attribute",
            "name": "status",
            "type": "String",
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 97,
            "description": "状态，有三种取值：\n- NOT_INSTALLED 表示没有安装 flash 插件\n- SUCCESS 表示已成功插入 swf 元素\n- TOO_LOW 表示当前版本号低于配置的版本号",
            "itemtype": "property",
            "name": "status",
            "type": "String",
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 106,
            "description": "调用 swf 的方法",
            "itemtype": "method",
            "name": "callSWF",
            "params": [
                {
                    "name": "method",
                    "description": "方法名",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "参数列表",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "swf 方法返回值",
                "type": "Any"
            },
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 114,
            "description": "销毁 swf 元素",
            "itemtype": "method",
            "name": "destroy",
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 119,
            "description": "获取 flash 版本数组",
            "itemtype": "method",
            "name": "fpv",
            "static": 1,
            "params": [
                {
                    "name": "force=false",
                    "description": "是否强制不从缓存中读取，默认 false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "版本号数组，例如 ['9','1','252']",
                "type": "Array<String>"
            },
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 127,
            "description": "检查当前版本是否比提供的参数版本高",
            "itemtype": "method",
            "name": "fpvGTE",
            "params": [
                {
                    "name": "ver",
                    "description": "待比较的版本号，例如 “9.1.252”",
                    "type": "String"
                },
                {
                    "name": "force=false",
                    "description": "当前版本是否强制不从缓存中读取，默认 false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "当前版本是否比提供的参数版本高"
            },
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/swf.js",
            "line": 135,
            "description": "swf 元素的地址",
            "itemtype": "method",
            "name": "getSrc",
            "params": [
                {
                    "name": "swf",
                    "description": "swf 元素",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "swf 元素的地址属性",
                "type": "String"
            },
            "class": "SWF",
            "module": "swf"
        },
        {
            "file": "src/api/tabs.js",
            "line": 36,
            "description": "添加一个 tab 和 panel",
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "title",
                            "description": "tab 标题",
                            "type": "String"
                        },
                        {
                            "name": "content",
                            "description": "panel 内容",
                            "type": "String"
                        },
                        {
                            "name": "selected",
                            "description": "是否选中",
                            "type": "Boolean"
                        },
                        {
                            "name": "closable",
                            "description": "是否出现关闭按钮用于删除tab项",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "index",
                    "description": "要在什么位置添加tab 和 panel",
                    "type": "Number"
                }
            ],
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 47,
            "description": "移除指定位置的 item",
            "itemtype": "method",
            "name": "removeItemAt",
            "params": [
                {
                    "name": "index",
                    "description": "item 下标",
                    "type": "Number"
                },
                {
                    "name": "destroy",
                    "description": "是否销毁节点",
                    "type": "Boolean"
                }
            ],
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 54,
            "description": "移除 tab 所在位置的 item",
            "itemtype": "method",
            "name": "removeItemByTab",
            "params": [
                {
                    "name": "tab",
                    "description": "tab 实例",
                    "type": "Tabs.tab"
                },
                {
                    "name": "destroy",
                    "description": "是否销毁节点",
                    "type": "Boolean"
                }
            ],
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 61,
            "description": "移除 panel 所在位置的 item",
            "itemtype": "method",
            "name": "removeItemByPanel",
            "params": [
                {
                    "name": "panel",
                    "description": "panel 实例",
                    "type": "Tans.Panel"
                },
                {
                    "name": "destroy",
                    "description": "是否销毁节点",
                    "type": "Boolean"
                }
            ],
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 68,
            "description": "得到选中的 tab 实例",
            "itemtype": "method",
            "name": "getSelectedTab",
            "return": {
                "description": "",
                "type": "Tabs.Tab"
            },
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 74,
            "description": "得到选中的 panel 实例",
            "itemtype": "method",
            "name": "getSelectedPanel",
            "return": {
                "description": "",
                "type": "Tabs.Panel"
            },
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 80,
            "description": "得到所有 tab 实例数组",
            "itemtype": "method",
            "name": "getTabs",
            "return": {
                "description": "tab的实例组成的数组",
                "type": "Array"
            },
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 86,
            "description": "得到所有 panel 实例数组",
            "itemtype": "method",
            "name": "getPanels",
            "return": {
                "description": "",
                "type": "Array<Tabs.Panel>"
            },
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 92,
            "description": "设置某个 tab 实例为选中",
            "itemtype": "method",
            "name": "setSelectedTab",
            "params": [
                {
                    "name": "tab",
                    "description": "",
                    "type": "Tabs.Tab"
                }
            ],
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 98,
            "description": "设置某个 panel 实例为选中",
            "itemtype": "method",
            "name": "setSelectedPanel",
            "params": [
                {
                    "name": "panel",
                    "description": "",
                    "type": "Tans.Panel"
                }
            ],
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 104,
            "description": "选中 tab 改变前触发",
            "itemtype": "event",
            "name": "beforeSelectedTabChange",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "newVal",
                            "description": "新的 tab 实例",
                            "type": "Tabs.Tab"
                        }
                    ]
                }
            ],
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 111,
            "description": "选中 tab 改变后触发",
            "itemtype": "event",
            "name": "afterSelectedTabChange",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "newVal",
                            "description": "新的 tab 实例",
                            "type": "Tabs.Tab"
                        }
                    ]
                }
            ],
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 118,
            "description": "tab对象数组，可用于快速构建 tabs。单个对象包括 title:'', content:'', selected:false, closable:false",
            "itemtype": "attribute",
            "name": "items",
            "type": "Array",
            "example": [
                "\n\titems : [\n\t\t{\n\t\t\ttitle : 'title of test',\n\t\t\tcontent : 'test',\n\t\t\tselected : true,  //初始是否被选中\n\t\t\tclosable : true   //是否出现关闭按钮用于删除tab\n\t\t}\n\t]"
            ],
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 132,
            "description": "可取值'mouse'和'click'，表示怎样触发Tabs的切换",
            "itemtype": "attribute",
            "name": "changeType",
            "type": "String",
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 137,
            "description": "表示Tabs菜单相对Tabs内容的位置，可取值'top'/'right'/'bottom'/'left'，默认为'top'",
            "itemtype": "attribute",
            "name": "barOrientation",
            "type": "String",
            "default": "\"top\"",
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 143,
            "description": "是否延时渲染",
            "itemtype": "attribute",
            "name": "lazyRender",
            "type": "Boolean",
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 148,
            "description": "枚举值\"bottom\".表示Tabs菜单相对Tabs内容的位置",
            "itemtype": "attribute",
            "name": "Orientation.BOTTOM",
            "static": 1,
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 154,
            "description": "枚举值\"top\".表示Tabs菜单相对Tabs内容的位置",
            "itemtype": "attribute",
            "name": "Orientation.TOP",
            "static": 1,
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 160,
            "description": "枚举值\"left\".表示Tabs菜单相对Tabs内容的位置",
            "itemtype": "attribute",
            "name": "Orientation.LEFT",
            "static": 1,
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/tabs.js",
            "line": 166,
            "description": "枚举值\"right\".表示Tabs菜单相对Tabs内容的位置",
            "itemtype": "attribute",
            "name": "Orientation.RIGHT",
            "static": 1,
            "class": "Tabs",
            "module": "tabs"
        },
        {
            "file": "src/api/toolbar.js",
            "line": 127,
            "description": "点击工具栏按钮时触发",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "e",
                    "description": "触发事件对象",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "点击的按钮实例",
                            "type": "Control"
                        }
                    ]
                }
            ],
            "class": "Toolbar",
            "module": "toolbar"
        },
        {
            "file": "src/api/toolbar.js",
            "line": 134,
            "description": "当前高亮的项",
            "itemtype": "attribute",
            "name": "highlightedItem",
            "type": "Object",
            "class": "Toolbar",
            "module": "toolbar"
        },
        {
            "file": "src/api/toolbar.js",
            "line": 139,
            "description": "当前的扩展项",
            "itemtype": "attribute",
            "name": "expandedItem",
            "type": "Object",
            "class": "Toolbar",
            "module": "toolbar"
        },
        {
            "file": "src/api/tree.js",
            "line": 90,
            "description": "默认 true. 是否显示树的根节点",
            "itemtype": "attribute",
            "name": "showRootNode",
            "type": "Boolean",
            "default": "true",
            "class": "Tree",
            "module": "tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 96,
            "description": "当树节点被点击后触发",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "e.target",
                    "description": "当前被点击的树节点",
                    "type": "KISSY.Node"
                }
            ],
            "example": [
                "\n```\n//默认情况下，双击树节点的文字部分或单击扩展图标才会展开收缩其子节点， 如果你需要改变为：单击树节点的文字部分也展开收缩其子节点，可以监控 click() 事件\n\ntree.on(\"click\",function(e){\n    var node = e.target;\n    if(node.get(\"children\").length){\n        node.set(\"expanded\",!node.get(\"expanded\"));\n    }\n});\n```"
            ],
            "class": "Tree",
            "module": "tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 113,
            "description": "当树节点扩展后触发",
            "itemtype": "event",
            "name": "expand",
            "params": [
                {
                    "name": "e.target",
                    "description": "当前被扩展的树节点",
                    "type": "KISSY.Node"
                }
            ],
            "class": "Tree",
            "module": "tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 119,
            "description": "当树节点收缩后触发",
            "itemtype": "event",
            "name": "collapse",
            "params": [
                {
                    "name": "e.target",
                    "description": "当前被收缩的树节点",
                    "type": "KISSY.Node"
                }
            ],
            "class": "Tree",
            "module": "tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 161,
            "description": "节点内容",
            "itemtype": "attribute",
            "name": "content",
            "type": "String",
            "class": "Tree.Node",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 166,
            "description": "可选，是否固定采用叶子节点或目录节点样式类，不设置的话会动态根据是否具有儿子节点而变化",
            "itemtype": "attribute",
            "name": "isLeaf",
            "type": "Boolean",
            "class": "Tree.Node",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 171,
            "description": "该节点的儿子节点是否显示，设置后可相应展开收缩儿子节点",
            "itemtype": "attribute",
            "name": "expanded",
            "type": "Boolean",
            "class": "Tree.Node",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 176,
            "description": "节点提示内容",
            "itemtype": "attribute",
            "name": "tooltip",
            "type": "String",
            "class": "Tree.Node",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 181,
            "description": "扩展图标 dom 节点",
            "itemtype": "attribute",
            "name": "expandIconEl",
            "type": "KISSY.Node",
            "class": "Tree.Node",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 186,
            "description": "树节点图标 dom 节点",
            "itemtype": "attribute",
            "name": "iconEl",
            "type": "KISSY.Node",
            "class": "Tree.Node",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 191,
            "description": "该节点是否被选中",
            "itemtype": "attribute",
            "name": "selected",
            "type": "Boolean",
            "class": "Tree.Node",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 196,
            "description": "该节点所属的树对象",
            "itemtype": "attribute",
            "name": "tree",
            "type": "KISSY.Tree",
            "class": "Tree.Node",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 201,
            "description": "该节点所处所在树的深度，只读。",
            "itemtype": "attribute",
            "name": "depth",
            "type": "Number",
            "readonly": "",
            "class": "Tree.Node",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 207,
            "description": "把当前节点的子孙节点全部显示出来",
            "itemtype": "method",
            "name": "expandAll",
            "class": "Tree.Node",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 212,
            "description": "把当前节点的子孙节点全部收缩起来",
            "itemtype": "method",
            "name": "collapseAll",
            "class": "Tree.Node",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 217,
            "description": "把当前节点设置为当前树的选中节点",
            "itemtype": "method",
            "name": "select",
            "class": "Tree.Node",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 260,
            "description": "当前节点的多选状态，可取：\n- PARTIAL_CHECK 代表节点的部分选中状态（部分子孙节点选中）\n- CHECK 代表节点的全部选中状态（子孙节点和自身节点全部选中）\n- EMPTY 代表节点的空状态（子孙节点和自身节点全部不选中）",
            "itemtype": "attribute",
            "name": "checkState",
            "type": "String",
            "class": "Tree.CheckNode",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 304,
            "description": "当树节点扩展后触发",
            "itemtype": "event",
            "name": "expand",
            "params": [
                {
                    "name": "e.target",
                    "description": "当前被扩展的树节点",
                    "type": "KISSY.Node"
                }
            ],
            "class": "Tree.CheckTree",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 310,
            "description": "当树节点收缩后触发",
            "itemtype": "event",
            "name": "collapse",
            "params": [
                {
                    "name": "e.target",
                    "description": "当前被收缩的树节点",
                    "type": "KISSY.Node"
                }
            ],
            "class": "Tree.CheckTree",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 316,
            "description": "当树节点被点击后触发",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "e.target",
                    "description": "当前被点击的树节点",
                    "type": "KISSY.Node"
                }
            ],
            "example": [
                "\n```\n//默认情况下，双击树节点的文字部分或单击扩展图标才会展开收缩其子节点， 如果你需要改变为：单击树节点的文字部分也展开收缩其子节点，可以监控 click() 事件\n\ntree.on(\"click\",function(e){\n    var node = e.target;\n    if(node.get(\"children\").length){\n        node.set(\"expanded\",!node.get(\"expanded\"));\n    }\n});\n```"
            ],
            "class": "Tree.CheckTree",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 343,
            "description": "是否允许文本选择",
            "itemtype": "attribute",
            "name": "allowTextSelection",
            "type": "Boolean",
            "default": "true",
            "class": "Tree.Manager",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 349,
            "description": "是否能聚焦",
            "itemtype": "attribute",
            "name": "focusable",
            "type": "Boolean",
            "default": "true",
            "class": "Tree.Manager",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 355,
            "description": "是否支持手势事件",
            "itemtype": "attribute",
            "name": "handleGestureEvents",
            "type": "Boolean",
            "default": "true",
            "class": "Tree.Manager",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 361,
            "description": "是否显示树根节点",
            "itemtype": "attribute",
            "name": "showRootNode",
            "type": "Boolean",
            "default": "true",
            "class": "Tree.Manager",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/tree.js",
            "line": 367,
            "description": "当前被选择的树节点",
            "itemtype": "attribute",
            "name": "selectedItem",
            "type": "Tree.Node",
            "class": "Tree.Manager",
            "module": "tree",
            "namespace": "Tree"
        },
        {
            "file": "src/api/ua.js",
            "line": 28,
            "description": "trident 的版本号。IE 浏览器 8 系列以下都无法准确探测 Trident 内核的版本号。",
            "itemtype": "property",
            "name": "trident",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 35,
            "description": "webkit 的版本号",
            "itemtype": "property",
            "name": "webkit",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 42,
            "description": "gecko 的版本号",
            "itemtype": "property",
            "name": "gecko",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 49,
            "description": "presto 的版本号",
            "itemtype": "property",
            "name": "presto",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 56,
            "description": "chrome 的版本号",
            "itemtype": "property",
            "name": "chrome",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 63,
            "description": "safari 的版本号",
            "itemtype": "property",
            "name": "safari",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 70,
            "description": "firefox 的版本号",
            "itemtype": "property",
            "name": "firefox",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 77,
            "description": "ie 的版本号",
            "itemtype": "property",
            "name": "ie",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 84,
            "description": "opera 的版本号",
            "itemtype": "property",
            "name": "opera",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 91,
            "description": "mobile 的标志符。 若无法探测或非移动设备浏览器，将返回空字符串。",
            "itemtype": "property",
            "name": "mobile",
            "type": "String",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 98,
            "description": "core 的标志符。此标识符表示浏览器的内核标识。若浏览器内核不是 trident, webkit, gecko, presto 将返回空字符串。",
            "itemtype": "property",
            "name": "core",
            "type": "String",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 105,
            "description": "shell 的标志符。此标识符表示用户所用浏览器的外壳标识。\n此处的外壳表示广义的外壳，即 IE, Firefox, Chrome, Opera, Safari 等浏览器都属于外壳。可以利用此标识符直接识别浏览器类型。 可以首先使用 UA.shell 返回的标识符判断当前浏览器类型，若需浏览器具体版本信息，可以再通过 UA[UA.shell] 取出版本号。 * UA.core 返回字符串，目前支持 trident, webkit, gecko, presto 四大浏览器内核. * UA.shell 返回字符串，比如 firefox, opera, chrome, ie, safari * UA.mobile 返回字符串，目前支持 apple, nokia, android, opera mini/mobile 等设备/浏览器的探测.",
            "itemtype": "property",
            "name": "shell",
            "type": "String",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 113,
            "description": "操作系统标志符。例如 windows android ios linux",
            "itemtype": "property",
            "name": "os",
            "type": "String",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 120,
            "description": "ipad ios 版本号。例如 5.0",
            "itemtype": "property",
            "name": "ipad",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 127,
            "description": "iphone ios 版本号。例如 5.0",
            "itemtype": "property",
            "name": "iphone",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 134,
            "description": "ipod ios 版本号。例如 5.0",
            "itemtype": "property",
            "name": "ipod",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 141,
            "description": "ios 版本号。例如 5.0",
            "itemtype": "property",
            "name": "ios",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/ua.js",
            "line": 148,
            "description": "android版本号。例如 5.0",
            "itemtype": "property",
            "name": "android",
            "type": "Number",
            "static": 1,
            "class": "UA",
            "module": "ua"
        },
        {
            "file": "src/api/url.js",
            "line": 43,
            "description": "解析url字符串为url对象。url对象包括键值：auth,hash,host,hostname,href,path,pathname,port,protocol,query,search,slashes",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "url",
                    "description": "url字符串",
                    "type": "String"
                },
                {
                    "name": "parseQueryString",
                    "description": "是否将querystring转化为对象形式。默认为false",
                    "type": "Boolean"
                }
            ],
            "class": "Url",
            "module": "url"
        },
        {
            "file": "src/api/url.js",
            "line": 50,
            "description": "将url对象转为url字符串",
            "itemtype": "method",
            "name": "format",
            "params": [
                {
                    "name": "url",
                    "description": "从Url.parse得到的url对象",
                    "type": "String"
                },
                {
                    "name": "serializeArray",
                    "description": "如果url.search === undefined 且 url.query含数组的话，转化成的url字符串是否需要在数组key后加上 [] 标识。默认为true",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n\trequire(['url'], function(Url){\n\t\tvar websiteUrl = 'http://modulex.github.io/5.0/api/classes/Path.html?test=iamtestcontent&date=2014.09.10#method_resolve';\n\t\tvar urlDataObj = Url.parse(websiteUrl); \n\t\turlDataObj.search = undefined;\n\t\turlDataObj.query = {\n\t\t\tname : 'weekeight',\n\t\t\tlove : 'kissy',\n\t\t\tarr : [1,2,3]\n\t\t};\n\n\t\tvar newUrl = Url.format(urlDataObj);  //得到的newUrl是 http://modulex.github.io/5.0/api/classes/Path.html?name=weekeight&love=kissy&arr%5B%5D=1&arr%5B%5D=2&arr%5B%5D=3#method_resolve\n\t})"
            ],
            "class": "Url",
            "module": "url"
        },
        {
            "file": "src/api/url.js",
            "line": 70,
            "description": "得到绝对地址的url，算法逻辑参考[nodeJs](http://nodejs.org/api/path.html#path_path_resolve_from_to)",
            "itemtype": "method",
            "name": "resolve",
            "example": [
                "\n\trequire(['url'],function(Url){\n\t\tUrl.resolve('modulex.github.io/guides/','overlay/index.html'); //modulex.github.io/guides/overlay/index.html\n\t})"
            ],
            "class": "Url",
            "module": "url"
        },
        {
            "file": "src/api/util.js",
            "line": 12,
            "description": "将source自身或其prototype属性的成员复制到targetClass.prototype上",
            "itemtype": "method",
            "name": "augment",
            "static": 1,
            "params": [
                {
                    "name": "targetClass",
                    "description": "将要扩充的类",
                    "type": "Function"
                },
                {
                    "name": "source",
                    "description": "扩充来源函数或对象. 非函数对象时复制的就是 source 自身",
                    "type": "Function|Object"
                },
                {
                    "name": "overite",
                    "description": "是否覆盖 Class.prototype 同名属性",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "whitelist",
                    "description": "属性来源对象的属性白名单, 仅在名单中的属性进行复制",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "扩充后的类",
                "type": "Class"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 23,
            "description": "在页面id元素生效时立刻执行回调函数fn",
            "itemtype": "method",
            "name": "available",
            "static": 1,
            "params": [
                {
                    "name": "id",
                    "description": "页面元素id",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "回调函数，在id元素可用时立刻执行",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 31,
            "description": "创建一个新函数，该函数可以在固定的上下文以及传递部分固定参数放在用户参数前面给原函数并执行",
            "itemtype": "method",
            "name": "bind",
            "static": 1,
            "params": [
                {
                    "name": "fn",
                    "description": "需要固定上下文以及固定部分参数的函数",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "执行fn时的this值. 如果新函数用于构造器则该参数无用",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "需要给新函数固定的部分参数",
                    "type": "Any",
                    "optional": true
                }
            ],
            "return": {
                "description": "符合需求的新函数",
                "type": "Function"
            },
            "example": [
                " ### 改变运行上下文\nbind 最简单的用法是生成一个新的函数，无论它如何调用，都运行在一个固定的 this 值中.入门者常犯的错误时从一个对象获得一个方法引用， 然后在后面的调用中期望这个方法的this就是原来的对象(eg.g 把这个方法用在某个回调中). 如果没有特例，那么这个原始对象就丢失了. 但是如果从原方法中得到一个绑定原始对象的函数，这个问题就解决了！\n  ```\n  var x = 9;\n\tvar module = {\n\t\tx: 81,\n\t\tgetX: function() { return this.x; }\n\t};\n\n\tmodule.getX(); // 81\n\n\tvar getX = module.getX;\n\tgetX(); // 9, because in this case, \"this\" refers to the global object\n\n\t// create a new function with 'this' bound to module\n\tvar boundGetX = Util.bind(getX,module);\n\tboundGetX(); // 81\n  ```\n### Currying\nbind 的下一个简单用法是产生一个具备默认参数的函数. 这些参数跟在 context 后面，无论何时调用绑定函数， 当绑定函数调用目标函数时会把它们放在参数列表开头，然后才是传递给绑定函数的用户参数\n  ```\n  function list() {\n\t\treturn Array.prototype.slice.call(arguments);\n\t}\n\n\tvar list1 = list(1, 2, 3); // [1, 2, 3]\n\n\t//  Create a function with a preset leading argument\n\tvar leadingZeroList = Util.bind(list,undefined, 37);\n\n\tvar list2 = leadingZeroList(); // [37]\n\tvar list3 = leadingZeroList(1, 2, 3); // [37, 1, 2, 3]\n  ```"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 74,
            "description": "将fn缓存一段时间后再回调执行\n__Note:__\n\n- 此方法为了避免在 ms 段时间内, 执行 fn 多次. 常用于 resize , scroll , mousemove 等连续性事件中;\n- 当 ms 设置为 -1, 表示立即执行 fn, 即和直接调用 fn 一样;",
            "itemtype": "method",
            "name": "buffer",
            "static": 1,
            "params": [
                {
                    "name": "fn",
                    "description": "要缓存的函数",
                    "type": "Function"
                },
                {
                    "name": "ms=150",
                    "description": "要缓存多长时间后执行，默认是150ms",
                    "type": "Number"
                },
                {
                    "name": "context",
                    "description": "函数fn执行时的上下文环境，默认是this",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回缓存后的函数对象",
                "type": "Function"
            },
            "example": [
                "\n  ```\n  self.__onResize = Util.buffer(doResize, 100, this);\n  $(window).on(\"resize\", self.__onResize);\n  ```"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 93,
            "description": "创建一个普通对象或数组的深拷贝, 并且返回",
            "itemtype": "method",
            "name": "clone",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "待拷贝的对象或数组",
                    "type": "Object"
                },
                {
                    "name": "filter",
                    "description": "过滤函数，返回false则不拷贝该元素。传入参数为：\n- 待克隆值为数组, 参数同 [Util.filter()](/5.0/api/classes/Util.html#method_filter) , 上下文对象为全局 window\n- 待克隆值为普通对象, 参数为对象的每个键对应的值, 每个键, 当前对象.(PS:上下文对象为当前对象)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "拷贝后的新对象",
                "type": "Object"
            },
            "example": [
                "\n  ```\n  var a={x:{y:{z:1}}}\n  var b=Util.clone(a); // => b={x:y:{z:1}} , b!==a\n  var c=Util.clone(a,function(v,k){if(k==\"z\") return false;}) // => c={x:{y:{}}}\n  ```"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 110,
            "description": "遍历数组中的每一项, 执行指定方法.",
            "itemtype": "method",
            "name": "each",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "需要遍历的对象或数组",
                    "type": "Object"
                },
                {
                    "name": "fn",
                    "description": "执行时，接受三个参数：\n- 当 o 为数组时, 参数为当前数组单项值, 当前 index, 数组 o\n- 当 o 为对象时, 参数为当前值 (value), 当前键 (key), 对象 o",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "fn的上下文对象",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "window"
                }
            ],
            "example": [
                "\n  ```\nvar arr = [1, 2, 3, 4, 5],\nobj = {\n   'hi': 'kissy',\n   'bye': 'world'\n},\nsum = 0;\n\nUtil.each(arr, function(item) {\n   sum += item;\n});\nUtil.log(sum); // => 15\n\n\nUtil.each(obj, function(v,k) {\n   Util.log([v,k]);\n});\n  ```"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 140,
            "description": "判断str是否已suffix结尾",
            "itemtype": "method",
            "name": "endsWith",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "查找的字符串",
                    "type": "String"
                },
                {
                    "name": "suffix",
                    "description": "后缀字符创",
                    "type": "String"
                }
            ],
            "return": {
                "description": "str是否以suffix结尾",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 149,
            "description": "抛出错误异常\n__Note__\n\n- 只有在 debug 模式下并且载入 seed.js, 才会抛出异常. debug 模式的说明请参考 Config",
            "itemtype": "method",
            "name": "error",
            "static": 1,
            "params": [
                {
                    "name": "msg",
                    "description": "异常信息",
                    "type": "String"
                }
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 159,
            "description": "将字符串经过 html 转义得到适合在页面中显示的内容, 例如替换 < 为 &lt;\n__Note__\n\n- 此函数只会对以下符号进行 escape：`& > < ` / \" '`",
            "itemtype": "method",
            "name": "escapeHTML",
            "params": [
                {
                    "name": "str",
                    "description": "要显示在页面中的真实内容",
                    "type": "String"
                }
            ],
            "return": {
                "description": "经过 html 转义后的字符串",
                "type": "String"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 169,
            "description": "让子类 SubClass 继承父类 ParentClass",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "subClass",
                    "description": "将要继承的子类函数",
                    "type": "Function"
                },
                {
                    "name": "parentClass",
                    "description": "继承自的父类函数",
                    "type": "Function"
                },
                {
                    "name": "prototypeMembers",
                    "description": "需要添加/覆盖的原型成员",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "staticMembers",
                    "description": "需要添加/覆盖的静态成员",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "subClass  需要的子类函数",
                "type": "Function"
            },
            "example": [
                "\n  ```\nfunction Bird(name) { this.name = name; }\nBird.prototype.fly = function() { alert(this.name + ' is flying now!'); };\n\nfunction Chicken(name) {\n   Chicken.superclass.constructor.call(this, name);\n}\nUtil.extend(Chicken, Bird,{\n   fly:function(){\n       Chicken.superclass.fly.call(this)\n       alert(\"it's my turn\");\n   }\n});\n\nnew Chicken('kissy').fly();\n  ```"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 197,
            "description": "遍历数组, 过滤出符合条件的数组项",
            "itemtype": "method",
            "name": "filter",
            "static": 1,
            "params": [
                {
                    "name": "arr",
                    "description": "需要遍历的数组",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "过滤函数. 执行时, 接收 3 个参数：当前项、当前 index, 数组.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "fn 执行的上下文对象",
                    "optional": true,
                    "optdefault": "window"
                }
            ],
            "return": {
                "description": "返回符合过滤函数的新数组",
                "type": "Array"
            },
            "example": [
                "\n  ```\nvar arr = [1, 2, 3, 4, 5];\n\nvar ret = Util.filter(arr, function(item) {\n   return item % 2 === 0;\n});\nUtil.log(ret); // => [2, 4]\n  ```"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 216,
            "description": "在全局作用域下执行代码字符串, 避免 eval 的作用域链",
            "itemtype": "method",
            "name": "globalEval",
            "static": 1,
            "params": [
                {
                    "name": "code",
                    "description": "代码字符串",
                    "type": "String"
                }
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 223,
            "description": "返回全局唯一 id",
            "itemtype": "method",
            "name": "guid",
            "static": 1,
            "params": [
                {
                    "name": "prefix",
                    "description": "唯一 id 前缀",
                    "type": "String"
                }
            ],
            "return": {
                "description": "全局唯一 id",
                "type": "String"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 231,
            "description": "判断元素 elem 是否在数组 arr 中",
            "itemtype": "method",
            "name": "inArray",
            "static": 1,
            "params": [
                {
                    "name": "elem",
                    "description": "任意对象",
                    "type": "Any"
                },
                {
                    "name": "arr",
                    "description": "数组",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "元素 elem 是否在数组 arr 中",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 240,
            "description": "返回元素 elem 在数组 arr 中的序号",
            "itemtype": "method",
            "name": "indexOf",
            "static": 1,
            "params": [
                {
                    "name": "elem",
                    "description": "任意对象",
                    "type": "Any"
                },
                {
                    "name": "arr",
                    "description": "数组",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "元素 elem 在数组 arr 中的序号",
                "type": "Number"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 249,
            "description": "判断是否数组",
            "itemtype": "method",
            "name": "isArray",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "判断参数",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "是否是数组",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 257,
            "description": "判断是否布尔值",
            "itemtype": "method",
            "name": "isBoolean",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "判断参数",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "是否是布尔值",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 265,
            "description": "判断是否日期",
            "itemtype": "method",
            "name": "isDate",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "判断参数",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "是否是日期",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 273,
            "description": "判断是否空对象(没有任何可遍历的属性)",
            "itemtype": "method",
            "name": "isEmptyObject",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "判断参数",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 281,
            "description": "判断是否函数",
            "itemtype": "method",
            "name": "isFunction",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "判断参数",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 289,
            "description": "判断是否有效数值",
            "itemtype": "method",
            "name": "isNumber",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "判断参数",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 297,
            "description": "判断是否为对象",
            "itemtype": "method",
            "name": "isObject",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "判断参数",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 305,
            "description": "判断是否是普通对象, 通过 {} 或 new FunctionClass/Object() 创建的, 不包括内置对象以及宿主对象.",
            "itemtype": "method",
            "name": "isPlainObject",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "判断参数",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 313,
            "description": "判断是否正则表达式",
            "itemtype": "method",
            "name": "isRegExp",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "判断参数",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 321,
            "description": "判断是否字符串",
            "itemtype": "method",
            "name": "isString",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "判断参数",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 329,
            "description": "判断参数是否为浏览器 window",
            "itemtype": "method",
            "name": "isWindow",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "判断参数",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 337,
            "description": "将对象的所有属性名作为数组返回",
            "itemtype": "method",
            "name": "keys",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "需要遍历的对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回的数组",
                "type": "Array"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 345,
            "description": "返回元素 elem 在数组 arr 中最后出现的序号",
            "itemtype": "method",
            "name": "lastIndexOf",
            "static": 1,
            "params": [
                {
                    "name": "elem",
                    "description": "任意对象",
                    "type": "Any"
                },
                {
                    "name": "arr",
                    "description": "数组",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 354,
            "description": "延迟执行指定函数 fn",
            "itemtype": "method",
            "name": "later",
            "static": 1,
            "params": [
                {
                    "name": "fn",
                    "description": "延迟执行的函数",
                    "type": "Function"
                },
                {
                    "name": "when",
                    "description": "延迟时间，单位是ms",
                    "type": "Number"
                },
                {
                    "name": "periodic",
                    "description": "是否周期执行",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "o",
                    "description": "fn的上下文对象",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "传递的参数. 可以为单个对象, 最后会转换成数组, 依次传递给执行函数.",
                    "type": "Object|Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "timer 对象.包含属性：\n- `interval` 是否周期执行\n- `cancel` 取消定时器",
                "type": "Object"
            },
            "example": [
                "\n  ```\n\nUtil.later(function(data) {\n   S.log(data);\n}, 0, false, null, 'I am later data.');\n  ```"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 375,
            "description": "输出调试信息",
            "itemtype": "method",
            "name": "log",
            "static": 1,
            "params": [
                {
                    "name": "msg",
                    "description": "调试信息",
                    "type": "String"
                },
                {
                    "name": "cat=\"log\"",
                    "description": "调试信息类别. 可以取 info, warn, error, dir, time 等 console 对象的方法名, 默认为 log.",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "调试代码所在的源信息\n__Note__\n只有在 debug 模式下并且载入 seed.js, 才会输出调试信息. debug 模式的说明请参考 Config",
                    "type": "String"
                }
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 386,
            "description": "将对象 o 转换为数组.",
            "itemtype": "method",
            "name": "makeArray",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "arguments, NodeList 等 array-like 对象或单个对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "o  转换后的数组",
                "type": "Array"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 394,
            "description": "创建一个新数组, 数组结果是在对每个原数组元素调用指定函数的返回值.",
            "itemtype": "method",
            "name": "map",
            "static": 1,
            "params": [
                {
                    "name": "arr",
                    "description": "需要遍历的数组",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "能够根据原数组当前元素返回新数组元素的函数",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "执行 fn 时的 this 值",
                    "optional": true,
                    "optdefault": "window"
                }
            ],
            "return": {
                "description": "返回符合根据指定函数调用得到新数组",
                "type": "Array"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 404,
            "description": "将多个对象的成员合并到一个新对象上. 参数中, 后面的对象成员会覆盖前面的.",
            "itemtype": "method",
            "name": "merge",
            "static": 1,
            "params": [
                {
                    "name": "s1",
                    "description": "属性源",
                    "type": "Object"
                },
                {
                    "name": "...",
                    "description": "属性源",
                    "optional": true
                }
            ],
            "return": {
                "description": "合并属性后的新对象",
                "type": "Object"
            },
            "example": [
                "\n  ```\nvar a = { a: 'a' },\nb = { b: 'b' },\nc = { b: 'b2', c: 'c' };\n\nvar o = Util.merge(a, b, c);\nUtil.log(o.a); // => 'a'\nUtil.log(o.b); // => 'b2'\nUtil.log(o.c); // => 'c'\n  ```"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 424,
            "description": "将 supplier 对象的成员复制到 receiver 对象上.",
            "itemtype": "method",
            "name": "mix",
            "static": 1,
            "params": [
                {
                    "name": "receiver",
                    "description": "属性接受者对象",
                    "type": "Object"
                },
                {
                    "name": "supplier",
                    "description": "属性来源对象",
                    "type": "Object"
                },
                {
                    "name": "overwrite",
                    "description": "是否覆盖接受者同名属性",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "whitelist",
                    "description": "属性来源对象的属性白名单, 仅在名单中的属性进行复制",
                    "type": "Array<String>"
                },
                {
                    "name": "deep",
                    "description": "是否进行深度 mix (deep copy)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "receiver 属性接受者对象\n__Note__\nreceiver 会被改变，如果想要保留原始的 receiver ，可以使用 Util.merge()\n`var object=S.merge(object1,object2);`\n\nS.mix 默认不是递归进行的. 如果其中一个属性为对象或者数组，那么他将会被接下来对象的同名属性对应的值所代替，即值不会被合并。 如果设置了参数 deep = true ，那么会对数组和简单对象( `Util.isPlainObject()` )递归合并\nsupplier undefined 的属性值不会被复制，不过对象从原型继承下来下的值则会被复制\n该方法仅适用于 javascript 对象，不要再浏览器对象上调用，例如 node.style\n\nmix 支持函数作为白名单参数\n  ```\nvar a = {},\nb = {\n   b1: 1,\n   b2: {\n       b2: 22\n   }\n};\n\nUtil.mix(a, b, {\n   deep: true,\n   whitelist: function (name, v) {\n       if (name == 'b1') {\n           return v;\n       }\n       if (this.b1 && name == 'b2') {\n           return v;\n       }\n       return undefined;\n   }\n});\n  ```",
                "type": "Object"
            },
            "example": [
                "\n简单 mix:\n\n  ```\nvar r = { a: 'a', b: 'b' };\n\nUtil.mix(r, { c: 'c' });\nUtil.log(r.c); // => 'c'\n\nUtil.mix(r, { a: 'a2' }, false);\nUtil.log(r.a); // => 'a'\n\nUtil.mix(r, { e: 'e', f: 'f' }, true, ['f']);\nUtil.log(r.e); // => undefined\nUtil.log(r.f); // => 'f'\n  ```\n\n深度 mix:\n  ```\nvar object1 = {\n apple: 0,\n banana: {weight: 52, price: 100},\n cherry: 97\n};\nvar object2 = {\n banana: {price: 200},\n durian: 100\n};\n\n//merge object2 into object1, recursively \nUtil.mix(object1,object2,undefined,undefined,true);\n\nUtil.log(object1); // => { apple: 0, banana: { weight: 52, price: 200 }, cherry: 97, durian: 100 }\n  ```\n该方法在 KISSY 里具有非常重要的地位. JavaScript 是一门动态语言, 利用 mixin 特性, 可以很方便的实现特性的静态复制和动态修改."
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 502,
            "description": "根据参数创建命名空间对象",
            "itemtype": "method",
            "name": "namespace",
            "static": 1,
            "params": [
                {
                    "name": "n1",
                    "description": "命名空间字符串, 如 \"fp.search\" 或 \"fp.ad\"",
                    "type": "String"
                },
                {
                    "name": "global",
                    "description": "是否第一个点之前的字符串作为全局变量, 默认 false",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "最后创建的命名空间对象",
                "type": "Object"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 511,
            "description": "返回 new Date().getTime()",
            "itemtype": "method",
            "name": "date",
            "static": 1,
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 518,
            "description": "将对象 o 转换为参数字符串, 用于发送 http 请求",
            "itemtype": "method",
            "name": "param",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "参数键值对对象",
                    "type": "Object"
                },
                {
                    "name": "seq",
                    "description": "参数间分隔符, 默认 &",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"&\""
                },
                {
                    "name": "eq",
                    "description": "参数与参数值间的分隔符, 默认 =",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\""
                },
                {
                    "name": "arr",
                    "description": "参数值为数组时, 参数键是否加 [] 即 %5B%5D , 默认 true\nreturn {String} 可用于发送请求的参数字符串",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "example": [
                "\n```\n\nUtil.param({ foo: 1, bar: 2 }); // => foo=1&bar=2\nUtil.param({ foo: 1, bar: [2, 3] }); // => foo=1&bar%5B%5D=2&bar%5B%5D=3\nUtil.param({ foo: 1, bar: [2, 3] },'&','=',false); // => foo=1&bar=2&bar=3\nUtil.param({ foo: '', bar: 2 }); // => foo=&bar=2\nUtil.param({ foo: undefined, bar: 2 }); // => foo&bar=2\n  ```"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 538,
            "description": "将字符串转化为 xml 文档",
            "itemtype": "method",
            "name": "parseXML",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "有效的 xml 文档字符串\nreturn {XML} xml 文档",
                    "type": "String"
                }
            ],
            "example": [
                "\n  ```\nvar xml = \"<rss version='2.0'><channel><title>RSS Title</title></channel></rss>\";\nvar xmlDoc=Node.all(Util.parseXML(xml));\nalert(xmlDoc.one(\"title\").text()); // => RSS Title\n  ```"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 552,
            "description": "在 DOM 加载完毕时执行回调函数fn",
            "itemtype": "method",
            "name": "ready",
            "static": 1,
            "params": [
                {
                    "name": "fn",
                    "description": "回调函数",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 559,
            "description": "从左向右对每个数组元素调用给定函数，并把返回值累积起来",
            "itemtype": "method",
            "name": "reduce",
            "static": 1,
            "params": [
                {
                    "name": "arr",
                    "description": "需要遍历的数组",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "在每个数组元素上执行的函数",
                    "type": "Function"
                },
                {
                    "name": "initialValue",
                    "description": "初次执行 fn 时的第一个参数值，如果不指定则为第一个元素值，后续从第二个元素开始遍历",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "累计值\n__Note__\nreduce 对数组中的每个元素执行 fn 函数，该 fn 接受四个参数：initialValue (或者上次调用 fn 的返回值)， 数组的当前元素，数组的当前位置以及用于遍历的数组.\n调用 reduce 类似于：`Util.reduce([],function(previousValue, currentValue, index, array));`\n当第一次调用 fn 时 :\n - 如果调用 reduce 时没有设定 initialValue，previousValue 和 currentValue 是数组的前两个值.\n - 如果调用 reduce 时设定了 initialValue，那么 previousValue 和 initialValue 相等 ，而 currentValue 则和数组的第一个元素相等."
            },
            "example": [
                "\n  ```\nUtil.reduce([0,1,2,3,4],function(previousValue, currentValue, index, array){\n return previousValue + currentValue;\n});\n\n// First call\npreviousValue = 0, currentValue = 1, index = 1\n\n// Second call\npreviousValue = 1, currentValue = 2, index = 2\n\n// Third call\npreviousValue = 3, currentValue = 3, index = 3\n\n// Fourth call\npreviousValue = 6, currentValue = 4, index = 4\n\n// array is always the object [0,1,2,3,4] upon which reduce was called\n\n// Return Value: 10\n  ```\n\n  ```\nUtil.reduce([0,1,2,3,4],function(previousValue, currentValue, index, array){\n return previousValue + currentValue;\n}, 10);\n\n// First call\npreviousValue = 10, currentValue = 0, index = 0\n\n// Second call\npreviousValue = 10, currentValue = 1, index = 1\n\n// Third call\npreviousValue = 11, currentValue = 2, index = 2\n\n// Fourth call\npreviousValue = 13, currentValue = 3, index = 3\n\n// Fifth call\npreviousValue = 16, currentValue = 4, index = 4\n\n// array is always the object [0,1,2,3,4] upon which reduce was called\n\n// Return Value: 20\n  ```\n\n### 得到数组的值总和\n`var total = Util.reduce([0, 1, 2, 3],function(a, b){ return a + b; }); // total == 6`\n\n### 嵌套数组平坦化\n  ```\nvar flattened = Util.reduce([[0,1], [2,3], [4,5]],function(a,b) {\n return a.concat(b);\n});\n// flattened is [0, 1, 2, 3, 4, 5]\n  ```"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 633,
            "description": "判断 str 是否以 prefix 开头",
            "itemtype": "method",
            "name": "startsWith",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "查找字符串",
                    "type": "String"
                },
                {
                    "name": "prefix",
                    "description": "前缀字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "str 是否以 prefix 开头",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 642,
            "description": "将字符串中的占位符替换为对应的键值",
            "itemtype": "method",
            "name": "substitute",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "包含数据占位符的模板字符串, 占位符用 {} 包起来",
                    "type": "String"
                },
                {
                    "name": "o",
                    "description": "数据",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "将模板和数据结合起来的最终字符串",
                "type": "String"
            },
            "example": [
                "\n  ```\nvar str = '{name} is {prop_1} and {prop_2}.',\nobj = {name: 'Jack Bauer', prop_1: 'our lord', prop_2: 'savior'};\n\nUtil.substitute(str, obj); // => 'Jack Bauer is our lord and savior.'\n  ```"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 658,
            "description": "ms 时间内只执行 fn 一次, 即使这段时间内 fn 被调用多次.",
            "itemtype": "method",
            "name": "throttle",
            "static": 1,
            "params": [
                {
                    "name": "fn",
                    "description": "要缓存的函数",
                    "type": "Function"
                },
                {
                    "name": "ms",
                    "description": "要缓存多长时间后执行, 默认是 150 ms;",
                    "type": "Number"
                },
                {
                    "name": "context",
                    "description": "函数 fn 要执行时的上下文环境, 默认是 this",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "返回缓存后的函数对象\n__Note__\n- 当 ms 设置为 -1, 表示立即执行 fn, 即和直接调用 fn 一样;\n- throttle 和 buffer 的区别在于, 前者表示间隔内的函数触发被忽略, 后者表示间隔内的触发被放到下个间隔触发",
                "type": "Function"
            },
            "example": [
                "\n  ```\nfunction sayHi() {\n   alert('hi');\n}\n\nsay = Util.throttle(sayHi, 300, this);\nsay();              // 忽略\nUtil.later(say, 200);  // 忽略\nUtil.later(say, 350);  // 超过300ms后, 终于执行\n  ```"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 682,
            "description": "去除字符串两端的空白字符",
            "itemtype": "method",
            "name": "trim",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "原始字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "去除空白后新的字符串",
                "type": "String"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 690,
            "description": "将字符串中的 html 实体字符替换成对应字符",
            "itemtype": "method",
            "name": "unEscapeHTML",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "包含 html 实体字符的字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "替换实体字符后的字符串",
                "type": "String"
            },
            "example": [
                "\n`Util.unEscapeHTML(\"&lt;a&gt;x&lt;/a&gt;\"); // =>  \"<a>x</a>\"`\n__Note__\n该函数只会 unescape 以下字符序列（正则式\n`&amp; &lt; &gt; &#x60; &#x2F; &quot; &#x27; &#\\d{1,5}`"
            ],
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 703,
            "description": "返回一个新数组, 仅包含 arr 去重后的值",
            "itemtype": "method",
            "name": "unique",
            "static": 1,
            "params": [
                {
                    "name": "arr",
                    "description": "包含重复元素的数组",
                    "type": "Array"
                },
                {
                    "name": "keepLast",
                    "description": "遇到重复值是保留第一次出现还是保留最后一次出现的元素",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "包含 arr 去重后的数组",
                "type": "Array"
            },
            "class": "Util",
            "module": "util"
        },
        {
            "file": "src/api/util.js",
            "line": 712,
            "description": "将参数字符串 str 还原为对象",
            "itemtype": "method",
            "name": "unparam",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "参数字符串",
                    "type": "String"
                },
                {
                    "name": "seq",
                    "description": "参数间分隔符, 默认 &",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"&\""
                },
                {
                    "name": "eq",
                    "description": "参数与参数值间的分割符, 默认 =",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\""
                }
            ],
            "return": {
                "description": "参数的对象表示",
                "type": "Object"
            },
            "example": [
                "\n  ```\n\nUtil.unparam('foo=1&bar=2'); // => { foo: 1, bar: 2 }\nUtil.unparam('foo=%81%47'); // gbk 编码 => { foo: \"%81%47\" } 而不是 {foo: \"丢\"}\nUtil.unparam('foo=1&bar=2&bar=3'); // => { foo: 1, bar: [2, 3] }\nUtil.unparam('foo=1&bar%5B%5D=2&bar%5B%5D=3'); // => { foo: 1, bar: [2, 3] }\n  ```"
            ],
            "class": "Util",
            "module": "util"
        }
    ],
    "warnings": []
}